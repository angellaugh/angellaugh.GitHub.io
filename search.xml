<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>202202112324</title>
    <url>/2023/02/11/202202112324/</url>
    <content><![CDATA[<p>哈利路亚</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>ES</title>
    <url>/2023/02/11/ES/</url>
    <content><![CDATA[<p>sudo zypper refresh<br>sudo zypper update -y<br>sudo zypper install yum</p>
<h3 id="Import-the-Elasticsearch-GPG-Key"><a href="#Import-the-Elasticsearch-GPG-Key" class="headerlink" title="Import the Elasticsearch GPG Key"></a>Import the Elasticsearch GPG Key</h3><p><code>sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</code></p>
<h3 id="Install-Elasticsearch-from-the-RPM-repository"><a href="#Install-Elasticsearch-from-the-RPM-repository" class="headerlink" title="Install Elasticsearch from the RPM repository"></a>Install Elasticsearch from the RPM repository</h3><p>create elasticsearch.repo and config the es install repo</p>
<p><code>sudo vim /etc/zypp/repos.d/elasticsearch.repo</code></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[elasticsearch]</span><br><span class="line">name=Elasticsearch repository for 8.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/8.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=0</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>install ES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo zypper modifyrepo --enable elasticsearch &amp;&amp; \</span><br><span class="line">  sudo zypper install elasticsearch; \</span><br><span class="line">  sudo zypper modifyrepo --disable elasticsearch </span><br></pre></td></tr></table></figure>

<p>download and install RPM </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.5.2-x86_64.rpm</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.5.2-x86_64.rpm.sha512</span><br><span class="line">shasum -a 512 -c elasticsearch-8.5.2-x86_64.rpm.sha512 </span><br><span class="line">sudo rpm --install elasticsearch-8.5.2-x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>config the es start automatically when system boots up</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ES-suse:/etc/zypp/repos.d # sudo /bin/systemctl daemon-reload</span><br><span class="line">ES-suse:/etc/zypp/repos.d # sudo /bin/systemctl enable elasticsearch.service</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/elasticsearch.service → /usr/lib/systemd/system/elasticsearch.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>check the ES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ES-suse:/etc/zypp/repos.d # rpm -qi elasticsearch</span><br><span class="line">Name        : elasticsearch</span><br><span class="line">Epoch       : 0</span><br><span class="line">Version     : 7.17.7</span><br><span class="line">Release     : 1</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: Sun Dec  4 21:37:47 2022</span><br><span class="line">Group       : Application/Internet</span><br><span class="line">Size        : 525810397</span><br><span class="line">License     : Elastic License</span><br><span class="line">Signature   : RSA/SHA512, Mon Oct 17 14:57:09 2022, Key ID d27d666cd88e42b4</span><br><span class="line">Source RPM  : elasticsearch-7.17.7-1-src.rpm</span><br><span class="line">Build Date  : Mon Oct 17 11:35:59 2022</span><br><span class="line">Build Host  : packer-virtualbox-iso-1646848364</span><br><span class="line">Relocations : /usr</span><br><span class="line">Packager    : Elasticsearch</span><br><span class="line">Vendor      : Elasticsearch</span><br><span class="line">URL         : https://www.elastic.co/</span><br><span class="line">Summary     : Distributed RESTful search engine built for the cloud</span><br><span class="line">Description :</span><br><span class="line">Reference documentation can be found at</span><br><span class="line">  https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</span><br><span class="line">  and the &#x27;Elasticsearch: The Definitive Guide&#x27; book can be found at</span><br><span class="line">  https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html</span><br><span class="line">Distribution: Elasticsearch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>start es server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ES-suse:/etc/zypp/repos.d # sudo systemctl start elasticsearch</span><br><span class="line">ES-suse:/etc/zypp/repos.d # sudo systemctl status elasticsearch</span><br><span class="line">● elasticsearch.service - Elasticsearch</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; disabled; vendor preset: disabled)</span><br><span class="line">     Active: active (running) since Sun 2022-12-04 21:39:35 EST; 21s ago</span><br><span class="line">       Docs: https://www.elastic.co</span><br><span class="line">   Main PID: 8555 (java)</span><br><span class="line">      Tasks: 97 (limit: 4915)</span><br><span class="line">     CGroup: /system.slice/elasticsearch.service</span><br><span class="line">             ├─ 8555 /usr/share/elasticsearch/jdk/bin/java -Xshare:auto -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+Always&gt;</span><br><span class="line">             └─ 8767 /usr/share/elasticsearch/modules/x-pack-ml/platform/linux-x86_64/bin/controller</span><br><span class="line"></span><br><span class="line">Dec 04 21:39:17 ES-suse systemd[1]: Starting Elasticsearch...</span><br><span class="line">Dec 04 21:39:35 ES-suse systemd[1]: Started Elasticsearch.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>related log:<br><code> vi /var/log/elasticsearch/elasticsearch.log</code></p>
<p>datapath<br><code>/var/lib/elasticsearch</code></p>
<p>To list journal entries for the elasticsearch service:</p>
<p><code>sudo journalctl --unit elasticsearch</code></p>
<p>verify es installation</p>
<ol>
<li><code>ss -antpl | grep 9200</code></li>
<li><code>curl -X GET &quot;localhost:9200/&quot;</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ES-suse:/etc/zypp/repos.d # ss -antpl | grep 9200</span><br><span class="line">LISTEN 0      4096   [::ffff:127.0.0.1]:9200             *:*    users:((&quot;java&quot;,pid=8555,fd=305))</span><br><span class="line">LISTEN 0      4096                [::1]:9200          [::]:*    users:((&quot;java&quot;,pid=8555,fd=304))</span><br><span class="line">ES-suse:/etc/zypp/repos.d # curl -X GET &quot;localhost:9200/&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;ES-suse&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;0zL15OxVTY6SrXO2aQ6qGQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.17.7&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;rpm&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;78dcaaa8cee33438b91eca7f5c7f56a70fec9e80&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2022-10-17T15:29:54.167373105Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.11.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>input one data:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &#x27;Content-Type: application/json&#x27; -X POST &#x27;http://localhost:9200/todo/task/1&#x27; -d &#x27;&#123; &quot;name&quot;: &quot;Go to the mall.&quot; &#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>and read it again:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ES-suse:/etc/zypp/repos.d # curl -X GET &#x27;http://localhost:9200/todo/task/1?pretty&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;todo&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;task&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;_seq_no&quot; : 0,</span><br><span class="line">  &quot;_primary_term&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;name&quot; : &quot;Go to the mall.&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>










<p> curl -XGET ‘<a href="http://localhost:9200/_nodes/stats?pretty&#39;">http://localhost:9200/_nodes/stats?pretty&#39;</a> | grep thread</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#125;ES-suse:/etc/zypp/repos.d #  curl -XGET &#x27;http://localhost:9200/_nodes/stats?pretty&#x27; | grep thread</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 39463  100 39463    0     0  1144k      0 --:--:-- --:--:--        &quot;threads&quot; : &#123;</span><br><span class="line"> --:--:--      &quot;thread_pool&quot; : &#123;</span><br><span class="line"> 1          &quot;threads&quot; : 0,</span><br><span class="line">16          &quot;threads&quot; : 0,</span><br><span class="line">7          &quot;threads&quot; : 0,</span><br><span class="line">k          &quot;threads&quot; : 0,</span><br><span class="line"></span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 1,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 11,</span><br><span class="line">          &quot;threads&quot; : 2,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 2,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 1,</span><br><span class="line">          &quot;threads&quot; : 3,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line">          &quot;threads&quot; : 0,</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ES-suse:/etc # ll /usr/share/elasticsearch/bin</span><br><span class="line">total 3028</span><br><span class="line">-rwxr-xr-x 1 root root     101 Nov 17 14:04 elasticsearch</span><br><span class="line">-rwxr-xr-x 1 root root     376 Nov 17 13:59 elasticsearch-certgen</span><br><span class="line">-rwxr-xr-x 1 root root     376 Nov 17 13:59 elasticsearch-certutil</span><br><span class="line">-rwxr-xr-x 1 root root     674 Nov 17 14:04 elasticsearch-cli</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-create-enrollment-token</span><br><span class="line">-rwxr-xr-x 1 root root     352 Nov 17 13:59 elasticsearch-croneval</span><br><span class="line">-rwxr-xr-x 1 root root    2340 Nov 17 14:04 elasticsearch-env</span><br><span class="line">-rwxr-xr-x 1 root root    2595 Nov 17 14:04 elasticsearch-env-from-file</span><br><span class="line">-rwxr-xr-x 1 root root      84 Nov 17 14:04 elasticsearch-geoip</span><br><span class="line">-rwxr-xr-x 1 root root      87 Nov 17 14:04 elasticsearch-keystore</span><br><span class="line">-rwxr-xr-x 1 root root      55 Nov 17 14:04 elasticsearch-node</span><br><span class="line">-rwxr-xr-x 1 root root     172 Nov 17 14:04 elasticsearch-plugin</span><br><span class="line">-rwxr-xr-x 1 root root     376 Nov 17 13:59 elasticsearch-reconfigure-node</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-reset-password</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-saml-metadata</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-service-tokens</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-setup-passwords</span><br><span class="line">-rwxr-xr-x 1 root root      55 Nov 17 14:04 elasticsearch-shard</span><br><span class="line">-rwxr-xr-x 1 root root     403 Nov 17 13:59 elasticsearch-sql-cli</span><br><span class="line">-rwxr-xr-x 1 root root 3008975 Nov 17 13:59 elasticsearch-sql-cli-8.5.2.jar</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-syskeygen</span><br><span class="line">-rwxr-xr-x 1 root root     353 Nov 17 13:59 elasticsearch-users</span><br><span class="line">-rwxr-xr-x 1 root root     332 Nov 17 14:01 systemd-entrypoint</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="health-check"><a href="#health-check" class="headerlink" title="health check"></a>health check</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/_cat/health?v&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="nodes-list"><a href="#nodes-list" class="headerlink" title="nodes list"></a>nodes list</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/_cat/nodes?v&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="index-list"><a href="#index-list" class="headerlink" title="index list"></a>index list</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/_cat/indices?v&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="search-detail-data-using-index"><a href="#search-detail-data-using-index" class="headerlink" title="search detail data using index"></a>search detail data using index</h3><p><code>curl -X GET http://localhost:9200/je_index_1663720218/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@powerload-es-2:~ # curl -X GET http://localhost:9200/je_index_1663720218/_search?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 7,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 0,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查看集群全部节点的指标"><a href="#查看集群全部节点的指标" class="headerlink" title="查看集群全部节点的指标"></a>查看集群全部节点的指标</h1><p>$ curl “localhost:9200/_nodes/stats”</p>
<hr>
<p>Issue1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ES-suse:/etc/zypp/repos.d # sudo systemctl enable elasticsearch</span><br><span class="line">Synchronizing state of elasticsearch.service with SysV service script with /usr/lib/systemd/systemd-sysv-install.</span><br><span class="line">Executing: /usr/lib/systemd/systemd-sysv-install enable elasticsearch</span><br><span class="line">ln -sf ../elasticsearch /etc/init.d/rc2.d/S50elasticsearch</span><br><span class="line">ln: failed to create symbolic link &#x27;/etc/init.d/rc2.d/S50elasticsearch&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>

<p>It seems that this product is not from the standard openSUSE OSS repo.</p>
<p>It tries to use /etc/init.d/rc2.d which directory belongs to the old SystemV ways of doing (as the message also says). but in openSUSE that directory is no longer in use and most probably not available anymore.</p>
<p>Issue2: refused了</p>
<p>root@ldm-controller-01:/usr/local/stress_test/Island_TPPC # curl -X GET “<a href="http://10.219.61.175:9200/_cat/indices?v&quot;">http://10.219.61.175:9200/_cat/indices?v&quot;</a><br>curl: (7) Failed connect to 10.219.61.175:9200; Connection refused</p>
<p>—————————————Dry run es-opensuse on powerload————————<br>Config ES-suse to powerload json file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@ldm-controller-01:/usr/local/stress_test/Island_TPPC # nslookup ES-suse.west.isilon.com</span><br><span class="line">Server:         10.231.252.14</span><br><span class="line">Address:        10.231.252.14#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   ES-suse.west.isilon.com</span><br><span class="line">Address: 10.219.61.175</span><br></pre></td></tr></table></figure>

<p>![](vx_images/65815239672.png =800x)</p>
<h3 id="cat-methods"><a href="#cat-methods" class="headerlink" title="cat methods"></a>cat methods</h3><p><code>curl http://localhost:9200/_cat</code></p>
<p>ES-suse:/var/lib/elasticsearch #  curl <a href="http://localhost:9200/_cat">http://localhost:9200/_cat</a><br>=^.^=<br>/_cat/allocation<br>/_cat/shards<br>/_cat/shards/{index}<br>/_cat/master<br>/_cat/nodes<br>/_cat/tasks<br>/_cat/indices<br>/_cat/indices/{index}<br>/_cat/segments<br>/_cat/segments/{index}<br>/_cat/count<br>/_cat/count/{index}<br>/_cat/recovery<br>/_cat/recovery/{index}<br>/_cat/health<br>/_cat/pending_tasks<br>/_cat/aliases<br>/_cat/aliases/{alias}<br>/_cat/thread_pool<br>/_cat/thread_pool/{thread_pools}<br>/_cat/plugins<br>/_cat/fielddata<br>/_cat/fielddata/{fields}<br>/_cat/nodeattrs<br>/_cat/repositories<br>/_cat/snapshots/{repository}<br>/_cat/templates<br>/_cat/ml/anomaly_detectors<br>/_cat/ml/anomaly_detectors/{job_id}<br>/_cat/ml/trained_models<br>/_cat/ml/trained_models/{model_id}<br>/_cat/ml/datafeeds<br>/_cat/ml/datafeeds/{datafeed_id}<br>/_cat/ml/data_frame/analytics<br>/_cat/ml/data_frame/analytics/{id}<br>/_cat/transforms<br>/_cat/transforms/{transform_id}</p>
<p><a href="https://juejin.cn/post/7145773678649671694">https://juejin.cn/post/7145773678649671694</a></p>
<p>curl localhost:9200/_cat/nodes?help</p>
<h1 id="指定查看每个节点的堆内存使用率，段数量和合并数量"><a href="#指定查看每个节点的堆内存使用率，段数量和合并数量" class="headerlink" title="指定查看每个节点的堆内存使用率，段数量和合并数量"></a>指定查看每个节点的堆内存使用率，段数量和合并数量</h1><p>$ curl “<a href="http://localhost:9200/_cat/nodes?h=http,heapPercent,segmentsCount,mergesTotal&quot;">http://localhost:9200/_cat/nodes?h=http,heapPercent,segmentsCount,mergesTotal&quot;</a><br>172.16.71.231:9200 56 99 108182<br>172.16.71.229:9200 31 95 122551<br>172.16.71.232:9200 50 66  73871<br>172.16.71.230:9200 41 63  76470<br>172.16.71.234:9200 32 64  93256<br>172.16.71.233:9200 14 90 136450</p>
<p>当集群为red或者yellow的时候怎么办<br>集群为RED表示集群中有primary shard没有分配，yellow表示有replica没有分配</p>
<p>root@powerload-es-2:/var/lib/elasticsearch/nodes # curl -X GET “<a href="http://localhost:9200/_cluster/allocation/explain?pretty&quot;">http://localhost:9200/_cluster/allocation/explain?pretty&quot;</a><br>{<br>  “index” : “je_index_1664986024”,<br>  “shard” : 3,<br>  “primary” : false,<br>  “current_state” : “unassigned”,<br>  “unassigned_info” : {<br>    “reason” : “CLUSTER_RECOVERED”,<br>    “at” : “2022-12-05T02:18:25.712Z”,<br>    “last_allocation_status” : “no_attempt”<br>  },<br>  “can_allocate” : “no”,<br>  “allocate_explanation” : “cannot allocate because allocation is not permitted to any of the nodes”,<br>  “node_allocation_decisions” : [<br>    {<br>      “node_id” : “R2DFntg7RLiwYsEN4mwYuw”,<br>      “node_name” : “R2DFntg”,<br>      “transport_address” : “10.219.61.247:9300”,<br>      “node_attributes” : {<br>        “ml.machine_memory” : “16656269312”,<br>        “xpack.installed” : “true”,<br>        “ml.max_open_jobs” : “20”,<br>        “ml.enabled” : “true”<br>      },<br>      “node_decision” : “no”,<br>      “deciders” : [<br>        {<br>          “decider” : “same_shard”,<br>          “decision” : “NO”,<br>          “explanation” : “the shard cannot be allocated to the same node on which a copy of the shard already exists [[je_index_1664986024][3], node[R2DFntg7RLiwYsEN4mwYuw], [P], s[STARTED], a[id=488Lf_8lTI2raran4YNWoQ]]”<br>        }<br>      ]<br>    }<br>  ]<br>}</p>
<p>分片长时间处于未分配状态 ES内部会对一个unassigned 分片尝试5次进行分配,失败后不再尝试进行分配，这时候需要调用进行手动控制集群处理 unassigned 分片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Before starting Elasticsearch for the first time</span><br><span class="line">Set xpack.security.enabled: false and then start Elasticsearch</span><br><span class="line"></span><br><span class="line">After you have started Elasticsearch for the first time</span><br><span class="line">You have two options here</span><br><span class="line"></span><br><span class="line">Set</span><br><span class="line"></span><br><span class="line">xpack.security.enabled: false</span><br><span class="line">xpack.security.transport.ssl.enabled: false</span><br><span class="line">xpack.security.http.ssl.enabled: false</span><br><span class="line">and then start Elasticsearch.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password</span><br><span class="line">bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">Set</span><br><span class="line"></span><br><span class="line">xpack.security.enabled: false</span><br></pre></td></tr></table></figure>


<h3 id="change-timezone"><a href="#change-timezone" class="headerlink" title="change timezone"></a>change timezone</h3><p>step1: vi /etc/sysconfig/clock</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEFAULT_TIMEZONE=&quot;Etc/GMT&quot;</span><br><span class="line">ZONE=&quot;Etc/GMT&quot;</span><br><span class="line">~</span><br><span class="line">```  </span><br><span class="line">step2: zic -l Etc/GMT</span><br><span class="line">step3: date</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ES-suse:/var/log/elasticsearch # date<br>Tue Dec  6 03:46:47 EST 2022<br>ES-suse:/var/log/elasticsearch # vi /etc/sysconfig/clock<br>ES-suse:/var/log/elasticsearch # zic -l Etc/GMT<br>ES-suse:/var/log/elasticsearch # date<br>Tue Dec  6 08:55:46 GMT 2022</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>OIDC and SAML</title>
    <url>/2023/04/20/OIDCandSAML/</url>
    <content><![CDATA[<h2 id="1-OIDC-实现的业务场景"><a href="#1-OIDC-实现的业务场景" class="headerlink" title="1. OIDC 实现的业务场景"></a>1. OIDC 实现的业务场景</h2><p>举例：常用办公场景，上班第一件事，登录github，登录confluence，登录office365，登录论坛。</p>
<h3 id="1-1-需要SSO-来免登陆：去IDP-认证，拿到identity-token"><a href="#1-1-需要SSO-来免登陆：去IDP-认证，拿到identity-token" class="headerlink" title="1.1. 需要SSO 来免登陆：去IDP 认证，拿到identity token,"></a>1.1. 需要SSO 来免登陆：去IDP 认证，拿到identity token,</h3><ol>
<li>带identity token 访问github,                 github        拿identity token去IDP 确认，         然后 允许/拒绝；</li>
<li>带identity token 访问confluence,           confluence 拿identity token去IDP 确认，          然后 允许/拒绝；</li>
<li>带identity token 访问office365,             office365   拿identity token去IDP 确认，          然后 允许/拒绝；</li>
<li>带identity token 访问论坛,                    论坛           拿identity token去IDP 确认，          然后 允许/拒绝；</li>
</ol>
<h3 id="1-2-IDP-access-token-issuer-IDP-带-authorization-功能后，变成-user-去IDP认证，同时返回access-token"><a href="#1-2-IDP-access-token-issuer-IDP-带-authorization-功能后，变成-user-去IDP认证，同时返回access-token" class="headerlink" title="1.2. IDP access token issuer:  IDP 带 authorization 功能后，变成 user 去IDP认证，同时返回access token:"></a>1.2. IDP access token issuer:  IDP 带 authorization 功能后，变成 user 去IDP认证，同时返回access token:</h3><pre><code>1. 带access token 访问github,                 github         在 local 用签名验证access token 真实性，有效性，然后 允许/拒绝；
2. 带access token 访问confluence,           confluence       在 local 用签名验证access token 真实性，有效性，然后 允许/拒绝；
3. 带access token 访问office365,             office365       在 local 用签名验证access token 真实性，有效性，然后 允许/拒绝；
4. 带access token 访问论坛,                    论坛           在 local 用签名验证access token 真实性，有效性，然后 允许/拒绝；
</code></pre>
<p>在这里，user 申请的时候，提供2元组 scope（也是OIDC login 需要的一个参数）： 1. resource 类型， 2. 执行的操作</p>
<h3 id="1-3-Resource-access-token-issuer-由-resource-来-authorization-颁发-access-token"><a href="#1-3-Resource-access-token-issuer-由-resource-来-authorization-颁发-access-token" class="headerlink" title="1.3. Resource access token issuer: 由 resource 来 authorization 颁发 access token:"></a>1.3. Resource access token issuer: 由 resource 来 authorization 颁发 access token:</h3><pre><code>1. 带identity token 访问github,                 github        在 local 用签名验证token 真实性，有效性，           然后 颁发 access token；
2. 带identity token 访问confluence,           confluence 在 local 用签名验证token 真实性，有效性 ，          然后 颁发 access token；
3. 带identity token 访问office365,             office365   在 local 用签名验证token 真实性，有效性 ，          然后 颁发 access token；
4. 带identity token 访问论坛,                    论坛           在 local 用签名验证token 真实性，有效性 ，          然后 颁发 access token；
</code></pre>
<p>token存储在 用户的cookie中（身份 &amp; signed）,   或者作为一个index key 指向 应用后端的来自IDP authentication的信息。</p>
<p>access token: 短期有效<br>refresh token：</p>
<p><img src="/uploads/136865505836214.png"><br>![](vx_images/136865505836214.png =1000x)</p>
<h2 id="2-OIDC-and-SAML"><a href="#2-OIDC-and-SAML" class="headerlink" title="2. OIDC and SAML"></a>2. OIDC and SAML</h2><h3 id="2-1-OIDC-OpenID-Connect"><a href="#2-1-OIDC-OpenID-Connect" class="headerlink" title="2.1. OIDC  OpenID Connect"></a>2.1. OIDC  OpenID Connect</h3><h4 id="2-1-1-an-open-authentication-protocol-that-works-on-top-of-the-OAuth-2-0-framework"><a href="#2-1-1-an-open-authentication-protocol-that-works-on-top-of-the-OAuth-2-0-framework" class="headerlink" title="2.1.1. an open authentication protocol that works on top of the OAuth 2.0 framework"></a>2.1.1. an open authentication protocol that works on top of the OAuth 2.0 framework</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OIDC 允许个人使用单点登录(SSO)的方式，访问那些用OPs验证身份的网站。</span><br><span class="line">OIDC 为应用程序或服务提供有关用户、其身份验证上下文以及访问其配置文件信息的信息。</span><br><span class="line"></span><br><span class="line">OIDC 是基于 OAuth 2.0 的身份认证协议，增加了 Id Token</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-OIDC-的目的"><a href="#2-1-2-OIDC-的目的" class="headerlink" title="2.1.2. OIDC 的目的"></a>2.1.2. OIDC 的目的</h4><blockquote>
<p>为用户提供一组认证信息来访问多个sites. for users to provide one set of credentials and access multiple sites.</p>
</blockquote>
<blockquote>
<p>当用户登录网站或者应用程序时，先redirect to OPs, 在OPs 先进行身份认证，然后再 redirect back to 网站或应用程序 site or application</p>
</blockquote>
<blockquote>
<p>旨在保护基于浏览器的应用程序、API 和 移动原生应用程序 mobile native applications</p>
</blockquote>
<blockquote>
<p>它将用户身份验证委托给 “托管用户帐户” 的服务提供商，并授权第三方应用程序访问用户帐户。It delegates user authentication to the service provider that hosts the user account and authorizes third-party applications to access the user’s account.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">For example, there are currently two ways of creating a Spotify account. You can register with Spotify or you can sign on through Facebook. Facebook sends your name and email address to Spotify, <span class="built_in">which</span> uses that information to authenticate you.</span><br></pre></td></tr></table></figure>


<h4 id="2-1-3-Identity-tokens-证明用户已经过身份验证-并且是-JSON-Web-令牌-（JWT）"><a href="#2-1-3-Identity-tokens-证明用户已经过身份验证-并且是-JSON-Web-令牌-（JWT）" class="headerlink" title="2.1.3. Identity tokens: 证明用户已经过身份验证,并且是 JSON Web 令牌 （JWT）"></a>2.1.3. Identity tokens: 证明用户已经过身份验证,并且是 JSON Web 令牌 （JWT）</h4><blockquote>
<p>be read by client<br>prove that users were authenticated and are JSON Web Tokens (JWTs),<br>标识令牌（旨在由客户端读取）证明用户已经过身份验证，并且是 JSON Web 令牌 （JWT），发音为“jots”。这些文件包含有关用户的信息，例如其用户名、尝试登录到应用程序或服务时以及允许他们访问联机资源的时间长度。</p>
</blockquote>
<blockquote>
<p>是基于 OAuth 2.0 的身份认证协议，增加了 Id Token</p>
</blockquote>
<h4 id="2-1-4-Access-tokens-访问被保护的资源"><a href="#2-1-4-Access-tokens-访问被保护的资源" class="headerlink" title="2.1.4. Access tokens: 访问被保护的资源"></a>2.1.4. Access tokens: 访问被保护的资源</h4><blockquote>
<p>be read and validated by the API.<br>are used to access protected resources<br>目的是通知API，此令牌的持有者已被授权访问API并执行特定操作(由已授予的范围指定)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Their purpose is to inform the API that the bearer of this token has been authorized to access the API and perform specific actions (as specified by the scope that has been granted).</span><br></pre></td></tr></table></figure>

<h4 id="2-1-5-ID-tokens"><a href="#2-1-5-ID-tokens" class="headerlink" title="2.1.5. ID tokens"></a>2.1.5. ID tokens</h4><blockquote>
<p>Id Token 由 OpenID Provider 颁发，包含关于终端用户的信息字段</p>
</blockquote>
<h4 id="2-1-6-OpenID-Providers-OPs"><a href="#2-1-6-OpenID-Providers-OPs" class="headerlink" title="2.1.6. OpenID Providers (OPs)"></a>2.1.6. OpenID Providers (OPs)</h4><blockquote>
<p>OpenID Provider，指授权服务器，负责签发 Id Token。Authing 是 OpenID Provider。<br>Id Token 由 OpenID Provider 颁发，包含关于终端用户的信息字段</p>
</blockquote>
<h4 id="2-1-7-JSON-Web-Tokens-JWTs-pronounced-“jots-”"><a href="#2-1-7-JSON-Web-Tokens-JWTs-pronounced-“jots-”" class="headerlink" title="2.1.7. JSON Web Tokens (JWTs)  pronounced “jots.”"></a>2.1.7. JSON Web Tokens (JWTs)  pronounced “jots.”</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenID Provider，指授权服务器，负责签发 Id Token。Authing 是 OpenID Provider。</span><br><span class="line">终端用户，Id Token 的信息中会包含终端用户的信息。</span><br><span class="line">调用方，请求 Id Token 的应用。</span><br><span class="line">Id Token 由 OpenID Provider 颁发，包含关于终端用户的信息字段。</span><br><span class="line">Claim 指终端用户信息字段。</span><br></pre></td></tr></table></figure>

<p><img src="/uploads/528803599836013.png"></p>
<h3 id="2-2-Differences-between-SAML-OAuth-OpenID-Connect"><a href="#2-2-Differences-between-SAML-OAuth-OpenID-Connect" class="headerlink" title="2.2. Differences between SAML, OAuth, OpenID Connect"></a>2.2. Differences between SAML, OAuth, OpenID Connect</h3><h4 id="2-2-1-侧重点"><a href="#2-2-1-侧重点" class="headerlink" title="2.2.1. 侧重点"></a>2.2.1. 侧重点</h4><ul>
<li><p>OAuth 是framework, 用于保护特定资源（如应用程序或文件集）的授权框架，</p>
</li>
<li><p>Oauth2.0, 主要用于资源授权。<br>OAuth is an authorization framework used to protect specific resources</p>
</li>
<li><p>SAML 和 OIDC 是 身份验证标准，authentication standards, 用于创建安全登录体验的身份验证标准。<br>SAML and OIDC are authentication standards used to create secure sign-on experiences. </p>
</li>
<li><p>OIDC 能够认证用户并完成资源授权。 侧重于身份认定，他/她是谁， 而OAuth侧重于允许/限制他们能做什么。<br>who someone is，  what they are allowed to do<br>如果你希望实现单点登录或先鉴权用户再返回资源，建议使用 OIDC 协议。</p>
</li>
</ul>
<h4 id="2-2-2-广泛性"><a href="#2-2-2-广泛性" class="headerlink" title="2.2.2. 广泛性"></a>2.2.2. 广泛性</h4><p>SAML 不支持移动设备的单点登录或API访问。does not support SSO for mobile devices or provide API access<br>OIDC 都支持。</p>
<h4 id="2-2-3-格式"><a href="#2-2-3-格式" class="headerlink" title="2.2.3. 格式"></a>2.2.3. 格式</h4><ol>
<li>SAML： tokens written in XML</li>
<li>OIDC： JWTs， 它们是可移植的，并支持一系列签名和加密算法。</li>
</ol>
<h4 id="2-2-4-易用性"><a href="#2-2-4-易用性" class="headerlink" title="2.2.4. 易用性"></a>2.2.4. 易用性</h4><p>OIDC比SAML 更简单， is less complex than SAML</p>
<h3 id="2-3-常见的-OAuth-2-0-授权流程如下："><a href="#2-3-常见的-OAuth-2-0-授权流程如下：" class="headerlink" title="2.3. 常见的 OAuth 2.0 授权流程如下："></a>2.3. 常见的 OAuth 2.0 授权流程如下：</h3><p>在你的应用中，让用户访问登录链接，浏览器跳转到 Authing，用户在 Authing 完成认证。<br>浏览器接收到一个从 Authing 服务器发来的授权码。<br>浏览器通过重定向将授权码发送到你的应用后端。<br>你的应用服务将授权码发送到 Authing 获取 AccessToken，如果需要，还会返回 refresh token。<br>你的应用后端现在知道了用户的身份，后续可以保存用户信息，重定向到前端其他页面，使用 AccessToken 调用资源方的其他 API 等等。</p>
<blockquote>
<p><a href="https://docs.authing.cn/v2/concepts/user-pool.html">https://docs.authing.cn/v2/concepts/user-pool.html</a></p>
</blockquote>
<h3 id="2-4-saml"><a href="#2-4-saml" class="headerlink" title="2.4. saml"></a>2.4. saml</h3><blockquote>
<p>允许 IdP 和 SP 彼此独立</p>
</blockquote>
<blockquote>
<p>SAML 使用 XML 元数据文档， 也就是 SAML 令牌进行断言，验证用户身份和访问权限。</p>
</blockquote>
<p>![](vx_images/24513571558970.png =800x)</p>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA</title>
    <url>/2023/03/13/RSA/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1> <p>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 伪随机数生成器</span></span><br><span class="line">random_generator = Random.new().read</span><br><span class="line"><span class="comment"># rsa算法生成实例</span></span><br><span class="line">rsa = RSA.generate(<span class="number">2048</span>, random_generator)</span><br><span class="line"><span class="built_in">print</span>(rsa)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(rsa))</span><br></pre></td></tr></table></figure>

<pre><code>Private RSA key at 0x10C4B8EB0
[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_d&#39;, &#39;_decrypt&#39;, &#39;_dp&#39;, &#39;_dq&#39;, &#39;_e&#39;, &#39;_encrypt&#39;, &#39;_invq&#39;, &#39;_n&#39;, &#39;_p&#39;, &#39;_q&#39;, &#39;_u&#39;, &#39;blind&#39;, &#39;can_encrypt&#39;, &#39;can_sign&#39;, &#39;d&#39;, &#39;decrypt&#39;, &#39;dp&#39;, &#39;dq&#39;, &#39;e&#39;, &#39;encrypt&#39;, &#39;exportKey&#39;, &#39;export_key&#39;, &#39;has_private&#39;, &#39;invp&#39;, &#39;invq&#39;, &#39;n&#39;, &#39;p&#39;, &#39;public_key&#39;, &#39;publickey&#39;, &#39;q&#39;, &#39;sign&#39;, &#39;size&#39;, &#39;size_in_bits&#39;, &#39;size_in_bytes&#39;, &#39;u&#39;, &#39;unblind&#39;, &#39;verify&#39;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私钥的生成</span></span><br><span class="line">private_pem = rsa.exportKey()</span><br><span class="line"><span class="built_in">print</span>(private_pem)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(private_pem)</span><br><span class="line"><span class="comment"># 公钥的生成</span></span><br><span class="line">public_pem = rsa.publickey().exportKey()</span><br><span class="line"><span class="built_in">print</span>(public_pem)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(public_pem)</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAviJUuLHbi5CByimMRxCqFhQ7B+zga/Tk1k0D06+Lrm6Kb0HO\nvhIcmWIMCW1eeBV0Aa2PniH+qLjRhQMqz7tDhe6O6ZBc046p0CToOlaPyjFFrNvA\nP+jwqeaFFFcDNo0J9lXuv5TH4q4JvQennna/pQUQQg+pTPmC74ampQkq7p7vOb3Z\nvdRmU6IKDUKIIG/3JrWNQJ4lcmNymA9pt/QiduNik33EIRNf+5cHkD3hScrWqKOW\naQYnMdOfCet7/ItfKOIAucuV2GMetuGto+HETm0ZN8Lr05V+otqn0SsU4Wo6xTlL\nxFMIAS698RkZkqbDC0+86dHbT/fiW1MpYGcKVwIDAQABAoIBABEsaambCwECpu57\nLTv4Adznq+NN3oFxx7+hijBzITM6sc9VytY5LZMfG4Y4djlzepxyMFAwst9LfkU8\n4X+M4w70Wr02+GN1ddoik0U9r1QseiYgXS+Im0BFXYzWRSiGubkhzuRIDHvpi2Cj\nEd1KzYmauPq2jmyw9sYqy9+JQfL2iQ9f4mkTu9fN5H+h0Mkx4imFVbBG0cHlxBg+\noI5QAccrLlbVsHoFrykqtilu4kUPQ6u5KnK3xyrIS6QVoA2zsEf01ikua5DDY3UR\naFNNn0IM6U0T6nZiUkvV4ySXSxCsG8Kf0Kr26ly+10HUYniwcGgygtW/cijjjDaZ\nYWAwu0UCgYEAyRvz35KNZrOfQyn2d25QQp8HRKnL9wY8rzL0XojSPzK9T/yvctWa\n4HBxPuzd6oaUOJH9EGmR+/P6S/mfU3Qik7MOQJt7yVD7MWjpBcq0NFtjOD5lwYOV\n82tf7EG45hBIG+IDhFrzxWefQn1axhQeMeGc1U+1V3tq6TIKH8s/umMCgYEA8geE\n69WZWBW9hokSDZThsgETMO2jicAiyO4aKm6+71ibNNyP2wbq21Hk67oOThSaP5g0\nIMMMujEMqW7S3c9H0drCpCiUUB8Nni+uxd/MCbQbZnTCcqFEuyYsOAadmJQlzK/O\n0SxeZxfgOV0N6Lbo36v2SC7INYn2Yhfwcn8dWH0CgYB30i64KzISWbzvIGZXfCNX\nvjZvY5dBo7auT/anCG/z9YAz0wKZscjoJjZi3m/N1sci+WBE0hGHgzLC54RVDaG4\nTHuWZM0ZAiXXp4EG0WISu8xe61ZnOMYz1Oq+8d1/PX4pFr0vs50AJaAO1m8qCzx+\nTcTKlwYdjEwDiqvbi5Z5rwKBgQDWZ9TXuuRaRQAdk4X7pB2APDWNDafnWt810sA5\nQNxCWeM8o/uIU4tweQ7ryGntv5CZr7LWJxQ6SUNnQXbp6js8a6gsFoq0o53DuYgB\nYO121yfCzsKHG9gwVnOruiiYRv1pY4E6iiyi9WK8TnQI6ShJJSRK866Gx04NvhlS\nxMrxXQKBgGzb7nen/DoOhoasJLwTtFqUQI+xs09pkabi4oP0vYYXlYFdbhPoRNdZ\nzaxqSlPN4c/IqEpwv/gCplYrwdkb2+RfPbtIFtsEZIbhjR7qJSME+mqfrd3X4qlK\ngEeJ3howUYPd0y6ppepDQiAxcE4el8FDeV9OHPCfuQGzw0uB+QUe\n-----END RSA PRIVATE KEY-----&#39;
b&#39;-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAviJUuLHbi5CByimMRxCq\nFhQ7B+zga/Tk1k0D06+Lrm6Kb0HOvhIcmWIMCW1eeBV0Aa2PniH+qLjRhQMqz7tD\nhe6O6ZBc046p0CToOlaPyjFFrNvAP+jwqeaFFFcDNo0J9lXuv5TH4q4JvQennna/\npQUQQg+pTPmC74ampQkq7p7vOb3ZvdRmU6IKDUKIIG/3JrWNQJ4lcmNymA9pt/Qi\nduNik33EIRNf+5cHkD3hScrWqKOWaQYnMdOfCet7/ItfKOIAucuV2GMetuGto+HE\nTm0ZN8Lr05V+otqn0SsU4Wo6xTlLxFMIAS698RkZkqbDC0+86dHbT/fiW1MpYGcK\nVwIDAQAB\n-----END PUBLIC KEY-----&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密  注意每次加密后的字符串都不一样，跟对数据的padding 有关。</span></span><br><span class="line"><span class="comment"># 加密时支持的最大字节数：证书位数/8 -11（比如：2048位的证书，支持的最大加密字节数：2048/8 - 11 = 245）</span></span><br><span class="line"><span class="comment"># 1024位的证书，加密时最大支持117个字节，解密时为128；</span></span><br><span class="line"><span class="comment"># 2048位的证书，加密时最大支持245个字节，解密时为256。</span></span><br><span class="line"><span class="comment"># 如果需要加密的字节数超出证书能加密的最大字节数，此时就需要进行分段加密。</span></span><br><span class="line">message = <span class="string">&quot;Hello,This is RSA加密&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拿到公钥</span></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;public.pem&quot;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is RSA 读取到的公钥:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rsakey)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过公钥，创建用于执行pkcs1_v1_5加密或解密的密码</span></span><br><span class="line">cipher = Cipher_pkcs1_v1_5.new(rsakey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Here is 用公钥生成的密码:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="comment"># 用公钥创建的密码来加密message</span></span><br><span class="line">message_enc = cipher.encrypt(message.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is 用公钥创建的密码来加密的message:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(message_enc)</span><br><span class="line"><span class="comment"># base64 将二进制加密过的message转成文本</span></span><br><span class="line">cipher_text = base64.b64encode(message_enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;base64 将二进制转成文本的message&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher_text.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>Here is RSA 读取到的公钥:
Public RSA key at 0x10C4BDE50
Here is 用公钥生成的密码:
&lt;Crypto.Cipher.PKCS1_v1_5.PKCS115_Cipher object at 0x10c4bd370&gt;
Here is 用公钥创建的密码来加密的message:
b&#39;&lt;\xaf\xe3\xc1\x95MmL\x7f\x0b\xe6=J#ba\x98z\xb5\xb2\x9a\xb4\xbc\x9fC\x1c\xc0-\xfd\x80\xfc\xb3\x9c\xe4\x96\xa5\x8b?\xaa)\x84n9\x0c\x8f\x99?uXTp\xf3\xd6\x07lV\xe3\t\xbf\x8b\xea\xa5Dn\x80\xf5\x89\xeag\xa8J\xbc\x08\xabB\x1e\xc9\xbb\xe7m\xf8\t\xc6@\xc7[\x16,2\r\x1d=y?\xa0\x95\xcd\x8bxs\x8d@\x97R-\xea\xa3\xb1\xcc\x0f\x89\xb5\xe0:QPwj\xc0zY\xe9\xeb\x17\xf6\xd0\xef&gt;\xd7*\x7f\x97\x8f\x0f=\x06\xb0&lt;G\xe4\x00 pv\x8f&lt;\xb5\xb4f\x0f\xbd\x06J8\x7f\x84M\xa4js\xc7\x1a\xa6\xaf\xe9:@\x88\x18\xed\x8f\x96fvI\xfd\xe2i\x0e\x87\xa1RR\xaaF\x15\x11\x99~NTLc\x12k\xa4\x86&lt;\x11\xef\x05\xbe64\xf3\x84\xcb\x93\xd9\xf9\xa8R\xb6\xe7%\x95V\xb5\x80:\x81\xb4\xc0\xeaGC\xd1\xba\x90\xf2\x95#\x99&gt;\xe5\xb1\xae\xabo[1\x1f\xed\x10\xd8\xac\x1d\xe6\x1e;\xe8\xd6\x1c\xc4r\x16&#39;
base64 将二进制转成文本的message
SVJVsq5On4uFJo8OZdzuVtT/9NQexOoDiKUgeQr8v7j4PktuejMq4Ghoh6AufYwNJXSAyw1Oz6MFHfBxtSQeJU6jHN0ZlIhcv1DteMvv3VAOJRkhf93am7b97bg2KGoP/ux0W5RIKxKGTw0n8dsjhNt1X4lAFJSl3kA6n8RDaBWEzVhIzCq0fKjIZbYam/mB0WNB79/jezBj4Snv4DXX/dNSKmU6IAmV0FdTikX5lLj4xTGnUehSwzOxZzaKwhHEvUNq24W1WiIdvScFU3ycmK8OKvpTf7iEQYpyX9Hwqn5Qk+JHQAxpByOxG+TvI5pd4CPXxyQnkq2eWDOc1hhayw==
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解密</span></span><br><span class="line">cipher_text = <span class="string">&quot;SVJVsq5On4uFJo8OZdzuVtT/9NQexOoDiKUgeQr8v7j4PktuejMq4Ghoh6AufYwNJXSAyw1Oz6MFHfBxtSQeJU6jHN0ZlIhcv1DteMvv3VAOJRkhf93am7b97bg2KGoP/ux0W5RIKxKGTw0n8dsjhNt1X4lAFJSl3kA6n8RDaBWEzVhIzCq0fKjIZbYam/mB0WNB79/jezBj4Snv4DXX/dNSKmU6IAmV0FdTikX5lLj4xTGnUehSwzOxZzaKwhHEvUNq24W1WiIdvScFU3ycmK8OKvpTf7iEQYpyX9Hwqn5Qk+JHQAxpByOxG+TvI5pd4CPXxyQnkq2eWDOc1hhayw==&quot;</span></span><br><span class="line">encrypt_text = cipher_text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 拿到私钥</span></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is RSA 读取到的私钥:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rsakey)</span><br><span class="line"><span class="comment">#创建用于执行pkcs1_v1_5加密或解密的密码</span></span><br><span class="line">cipher = Cipher_pkcs1_v1_5.new(rsakey)      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Here is 用私钥生成的密码:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="comment"># base64 将文本string 转回二进制</span></span><br><span class="line">message_dec = base64.b64decode(encrypt_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is 用base64将string转回二进制:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(message_enc)</span><br><span class="line"><span class="comment"># 用私钥生成的密码来解密 二进制message</span></span><br><span class="line">text = cipher.decrypt(message_dec, <span class="string">&quot;解密失败&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is 用私钥生成的密码来接二进制的message&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(text.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>Here is RSA 读取到的私钥:
Private RSA key at 0x10C0D16D0
Here is 用私钥生成的密码:
&lt;Crypto.Cipher.PKCS1_v1_5.PKCS115_Cipher object at 0x10c19f340&gt;
Here is 用base64将string转回二进制:
b&#39;&lt;\xaf\xe3\xc1\x95MmL\x7f\x0b\xe6=J#ba\x98z\xb5\xb2\x9a\xb4\xbc\x9fC\x1c\xc0-\xfd\x80\xfc\xb3\x9c\xe4\x96\xa5\x8b?\xaa)\x84n9\x0c\x8f\x99?uXTp\xf3\xd6\x07lV\xe3\t\xbf\x8b\xea\xa5Dn\x80\xf5\x89\xeag\xa8J\xbc\x08\xabB\x1e\xc9\xbb\xe7m\xf8\t\xc6@\xc7[\x16,2\r\x1d=y?\xa0\x95\xcd\x8bxs\x8d@\x97R-\xea\xa3\xb1\xcc\x0f\x89\xb5\xe0:QPwj\xc0zY\xe9\xeb\x17\xf6\xd0\xef&gt;\xd7*\x7f\x97\x8f\x0f=\x06\xb0&lt;G\xe4\x00 pv\x8f&lt;\xb5\xb4f\x0f\xbd\x06J8\x7f\x84M\xa4js\xc7\x1a\xa6\xaf\xe9:@\x88\x18\xed\x8f\x96fvI\xfd\xe2i\x0e\x87\xa1RR\xaaF\x15\x11\x99~NTLc\x12k\xa4\x86&lt;\x11\xef\x05\xbe64\xf3\x84\xcb\x93\xd9\xf9\xa8R\xb6\xe7%\x95V\xb5\x80:\x81\xb4\xc0\xeaGC\xd1\xba\x90\xf2\x95#\x99&gt;\xe5\xb1\xae\xabo[1\x1f\xed\x10\xd8\xac\x1d\xe6\x1e;\xe8\xd6\x1c\xc4r\x16&#39;
Here is 用私钥生成的密码来接二进制的message
Hello,This is RSA加密
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加签名，用私钥，私钥加签名后，可以用公钥验证签名有无被篡改</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Signature_pkcs1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加签 使用私钥加签名，每次签名是一致的</span></span><br><span class="line">message = <span class="string">&quot;This is a request message...&quot;</span></span><br><span class="line"><span class="comment"># 拿到私钥</span></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;私钥：&quot;</span>+<span class="string">f&quot;<span class="subst">&#123;rsakey&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用私钥拿到一个新的签名密码</span></span><br><span class="line">signer = Signature_pkcs1_v1_5.new(rsakey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;使用私钥生成新的签名密码：<span class="subst">&#123;signer&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 摘要认证 digest authentication</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">摘要访问认证是一种协议规定的Web服务器用来同网页浏览器进行认证信息协商的方法。它在密码发出前，先对其应用哈希函数，这相对于HTTP基本认证发送明文而言，更安全。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从技术上讲，摘要认证是使用随机数来阻止进行密码分析的MD5加密哈希函数应用。它使用HTTP协议。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">digest = SHA.new()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;digest:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(digest))</span><br><span class="line"><span class="comment"># 用digest方式加密message</span></span><br><span class="line">digest.update(message.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加签，使用私钥生成的signature密码来加密 digest哈希过的message</span></span><br><span class="line">sign = signer.sign(digest)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;使用私钥生成的signature密码来加密 digest哈希过的message： <span class="subst">&#123;sign&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用base64 将二进制转化为string存储</span></span><br><span class="line">signature = base64.b64encode(sign)</span><br><span class="line"><span class="built_in">print</span>(signature.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>私钥：Private RSA key at 0x10C4BD670
使用私钥生成新的签名密码：&lt;Crypto.Signature.pkcs1_15.PKCS115_SigScheme object at 0x10c198d90&gt;
digest:&lt;Crypto.Hash.SHA1.SHA1Hash object at 0x10c4bd700&gt;
使用私钥生成的signature密码来加密 digest哈希过的message： b&#39;&amp;\xe7\x8b\xd1\xb5\xd2\xb3\x12\xccq\xf7\xf9\xb3\x94\\\xaaw\x8dJ\xc8\x9c\x89\xe5\xd3]\x16F\x91\xa1\x11\xff&#125;\xe9=C+\x1c\xd0\x83\xdb\x13\x12&lt;:\xd0\xcd&gt;\x99uM\xf9\xf3\xbf\x8ax\xab\xac\x87\xca%\xc6\t\xef\xcb\xfb\xbc\xba\x1f\&#39;\x19\xf0\xf9\xef\xdd\xb5N\xf4H\xca#\xe4\x9c\xa3\xee\x95\xa52Cq\x9bj\x91\xa6\xcf\x15\xcdt\xd2\xed\x10\xfe\xf7\xce\xde\xcc Y\xd3f\xe3.R\xf9\xe1@\xfc\x80\xd4\x9f\x9a\xa1\xf8\x8f\xc8\x8e\xbf\xd3w\xad\x1c\xcb\xb39\x83\x92UW\x17\x92,\xd3&#123;$\xb2~\t\xb0\x1c\xa2\xaf\xe2\x91\xc1\x98\xd9;\x18\xeb\x1aW\\\x9e\n\xe5\xa3\xdd\x07\xacr\x1c\x9e\x18^\xe0xR\x8c\xafp\x938\xcc3&lt;\xed-\xdb\x04\x9c\xa2\xdb\xb6\xecRn\xf7\xb5=\xcb\xdf\x8aP\x06\x82\xe65\xfa\xd2q:\x04\x8c\xea\x05\x1a +\x9d,&amp;\x9e\x86\xc2\xa7\xf3\x8b\t\x9d\xa7\xd2\x93LO\n\xd3\xd9V\xa97R\t%\x8e\xde\xb7ZD\xdc\xb8\xc5\x9c&quot;5\xe8\x14\xc5&#39;
JueL0bXSsxLMcff5s5RcqneNSsicieXTXRZGkaER/33pPUMrHNCD2xMSPDrQzT6ZdU3587+KeKush8olxgnvy/u8uh8nGfD57921TvRIyiPknKPulaUyQ3GbapGmzxXNdNLtEP73zt7MIFnTZuMuUvnhQPyA1J+aofiPyI6/03etHMuzOYOSVVcXkizTeySyfgmwHKKv4pHBmNk7GOsaV1yeCuWj3QeschyeGF7geFKMr3CTOMwzPO0t2wScotu27FJu97U9y9+KUAaC5jX60nE6BIzqBRogK50sJp6Gwqfziwmdp9KTTE8K09lWqTdSCSWO3rdaRNy4xZwiNegUxQ==
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验签，使用公钥验签</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用公钥生成的新签名密码来验证：</span></span><br><span class="line"><span class="string">哈希过的message ，  和  私钥生成的新签名密码加密了的（哈希过的message）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">message = <span class="string">&quot;This is a request message...&quot;</span></span><br><span class="line"><span class="comment"># step1， 拿到公钥</span></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;public.pem&quot;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Get public key: <span class="subst">&#123;rsakey&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># step2, 用公钥生成一个新签名密码</span></span><br><span class="line">verifier = Signature_pkcs1_v1_5.new(rsakey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;generate a signature key via public key: <span class="subst">&#123;verifier&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3, 生成个哈希值</span></span><br><span class="line">hsmsg = SHA.new()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hashi: <span class="subst">&#123;hsmsg&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step4, 用哈希加密message</span></span><br><span class="line">hsmsg.update(message.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哈希加密message: &quot;</span> + <span class="string">f&quot;<span class="subst">&#123;hsmsg&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step5, 用base64 将string 的signature解密为二进制</span></span><br><span class="line"><span class="comment"># 就变成了加密阶段的那个 用私钥生成的signature密码来加密 digest哈希过的message</span></span><br><span class="line">sign = base64.b64decode(signature)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;base64 decode sig: <span class="subst">&#123;sign&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 用 公钥生成的新签名密码来验证，哈希过的message， 和 签过名的sign二进制</span></span><br><span class="line">is_verify = verifier.verify(hsmsg, sign)</span><br><span class="line"><span class="built_in">print</span>(is_verify)</span><br></pre></td></tr></table></figure>

<pre><code>Get public key: Public RSA key at 0x10C3B8880
generate a signature key via public key: &lt;Crypto.Signature.pkcs1_15.PKCS115_SigScheme object at 0x10c3b8a30&gt;
Hashi: &lt;Crypto.Hash.SHA1.SHA1Hash object at 0x10c663160&gt;
哈希加密message: &lt;Crypto.Hash.SHA1.SHA1Hash object at 0x10c663160&gt;
base64 decode sig: b&#39;&amp;\xe7\x8b\xd1\xb5\xd2\xb3\x12\xccq\xf7\xf9\xb3\x94\\\xaaw\x8dJ\xc8\x9c\x89\xe5\xd3]\x16F\x91\xa1\x11\xff&#125;\xe9=C+\x1c\xd0\x83\xdb\x13\x12&lt;:\xd0\xcd&gt;\x99uM\xf9\xf3\xbf\x8ax\xab\xac\x87\xca%\xc6\t\xef\xcb\xfb\xbc\xba\x1f\&#39;\x19\xf0\xf9\xef\xdd\xb5N\xf4H\xca#\xe4\x9c\xa3\xee\x95\xa52Cq\x9bj\x91\xa6\xcf\x15\xcdt\xd2\xed\x10\xfe\xf7\xce\xde\xcc Y\xd3f\xe3.R\xf9\xe1@\xfc\x80\xd4\x9f\x9a\xa1\xf8\x8f\xc8\x8e\xbf\xd3w\xad\x1c\xcb\xb39\x83\x92UW\x17\x92,\xd3&#123;$\xb2~\t\xb0\x1c\xa2\xaf\xe2\x91\xc1\x98\xd9;\x18\xeb\x1aW\\\x9e\n\xe5\xa3\xdd\x07\xacr\x1c\x9e\x18^\xe0xR\x8c\xafp\x938\xcc3&lt;\xed-\xdb\x04\x9c\xa2\xdb\xb6\xecRn\xf7\xb5=\xcb\xdf\x8aP\x06\x82\xe65\xfa\xd2q:\x04\x8c\xea\x05\x1a +\x9d,&amp;\x9e\x86\xc2\xa7\xf3\x8b\t\x9d\xa7\xd2\x93LO\n\xd3\xd9V\xa97R\t%\x8e\xde\xb7ZD\xdc\xb8\xc5\x9c&quot;5\xe8\x14\xc5&#39;
True
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> binascii</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成了个 private RSA KEY?????</span></span><br><span class="line">keyPair = RSA.generate(<span class="number">3072</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;keyPair: <span class="subst">&#123;keyPair&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>keyPair: Private RSA key at 0x10C663940
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pubKey = keyPair.publickey()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Public key:  (n=<span class="subst">&#123;<span class="built_in">hex</span>(pubKey.n)&#125;</span>, e=<span class="subst">&#123;<span class="built_in">hex</span>(pubKey.e)&#125;</span>)&quot;</span>)</span><br><span class="line">pubKeyPEM = pubKey.exportKey()</span><br><span class="line"><span class="built_in">print</span>(pubKeyPEM.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>Public key:  (n=0xa1ed1f3d0be71914eee28da05492820df0f21666e64a68ba698f93933d2b2ffe71fa3a8221da24354dbb5b756dd64d70696fe650dd607d2a255fbbae4f668a2115ca22b172a0d9d694adc160713b8508f0ffe403c89b7dcf6a388e2bfb58c57c920841945e13edbd0c8baf6c921b7af4647b545ed5e404776fb0e2374ef4e343f32b1cfbba3b76ff57957fc6f67924472485c3bd96ef67ce79e05f0229621257fd803e3fdcfa026b481bd61c6e202821d4b829e0393bc7137c444180b81fc6bccc34f327da2dbd5daa750d60cdca3a5a026e11c25e2d74c5ea43b54640a93c0daf94f5e5eece42fbc9ae0efb65af7503ab3ab5415dd87d4a49c6de79ffb4a1c3682108456c514822cc11d6f849eb88f083292b5128995bf77594448946af5fba1be4d7612fc79cf8f37e8b692c151500441d5d47c989cbadd7f3dee4ad188faf1e4b52fcab8ab483c6324356994215ed080f23451c700e3c89d12ea608a7b96728a025b4a657f0f25f82dc0a27ea852c3294cee81cff2a692df08c7833cd1fd5, e=0x10001)
-----BEGIN PUBLIC KEY-----
MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAoe0fPQvnGRTu4o2gVJKC
DfDyFmbmSmi6aY+Tkz0rL/5x+jqCIdokNU27W3Vt1k1waW/mUN1gfSolX7uuT2aK
IRXKIrFyoNnWlK3BYHE7hQjw/+QDyJt9z2o4jiv7WMV8kghBlF4T7b0Mi69skht6
9GR7VF7V5AR3b7DiN07040PzKxz7ujt2/1eVf8b2eSRHJIXDvZbvZ8554F8CKWIS
V/2APj/c+gJrSBvWHG4gKCHUuCngOTvHE3xEQYC4H8a8zDTzJ9otvV2qdQ1gzco6
WgJuEcJeLXTF6kO1RkCpPA2vlPXl7s5C+8muDvtlr3UDqzq1QV3YfUpJxt55/7Sh
w2ghCEVsUUgizBHW+EnriPCDKStRKJlb93WURIlGr1+6G+TXYS/HnPjzfotpLBUV
AEQdXUfJicut1/Pe5K0Yj68eS1L8q4q0g8YyQ1aZQhXtCA8jRRxwDjyJ0S6mCKe5
ZyigJbSmV/DyX4LcCifqhSwylM7oHP8qaS3wjHgzzR/VAgMBAAE=
-----END PUBLIC KEY-----
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Private key: (n=<span class="subst">&#123;<span class="built_in">hex</span>(pubKey.n)&#125;</span>, d=<span class="subst">&#123;<span class="built_in">hex</span>(keyPair.d)&#125;</span>)&quot;</span>)</span><br><span class="line">privKeyPEM = keyPair.exportKey()</span><br><span class="line"><span class="built_in">print</span>(privKeyPEM.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>Private key: (n=0xa1ed1f3d0be71914eee28da05492820df0f21666e64a68ba698f93933d2b2ffe71fa3a8221da24354dbb5b756dd64d70696fe650dd607d2a255fbbae4f668a2115ca22b172a0d9d694adc160713b8508f0ffe403c89b7dcf6a388e2bfb58c57c920841945e13edbd0c8baf6c921b7af4647b545ed5e404776fb0e2374ef4e343f32b1cfbba3b76ff57957fc6f67924472485c3bd96ef67ce79e05f0229621257fd803e3fdcfa026b481bd61c6e202821d4b829e0393bc7137c444180b81fc6bccc34f327da2dbd5daa750d60cdca3a5a026e11c25e2d74c5ea43b54640a93c0daf94f5e5eece42fbc9ae0efb65af7503ab3ab5415dd87d4a49c6de79ffb4a1c3682108456c514822cc11d6f849eb88f083292b5128995bf77594448946af5fba1be4d7612fc79cf8f37e8b692c151500441d5d47c989cbadd7f3dee4ad188faf1e4b52fcab8ab483c6324356994215ed080f23451c700e3c89d12ea608a7b96728a025b4a657f0f25f82dc0a27ea852c3294cee81cff2a692df08c7833cd1fd5, d=0x1b6c1223947b1e9447a061110b41847a37ee723cc58df463c80763469c254ee0c30ca2bbf1b504f76ca2936a8a4a05f348e7da694cbefa736e163857dcba7b74a996ac7ec09adcf3ff59d855d781eceb06baa48814d66b07fa9a794e997cff1f89863c6a3e99c163dd56b543fdba5efd8f1c13bdbbc5fc6652fe9c50cc33a209453517ee1ed67de08aef41246b63e3463e63d387ad4d5341c9acbb14f2a283d8c2e58fa5366c60872a9461938efd8323b7928e04f05709efbd8111ac158276cab2457512d111abba989e2ef5c0cc8309a32173c206eee8a10102bb20f19c76c1182759052e34a120bb87c220df920f11019b3ebda111c634ccc94937acb0ef23d7114cd13a8a154c909efe9700fae3fabae91529d4bf6dc70aea942ba5128c4d61eef66a857fbfd47cd30b20595c3a609a0348a3cfeca5c5bd3c5e6174e042c16a6262fcac07604536d1a1037ee4c88d6df0713347957e9a1185b30c25c4842a9b184eff70533e799cfb8519c414ea84a5936f4e16d5841175f3bd0d0436705)
-----BEGIN RSA PRIVATE KEY-----
MIIG4wIBAAKCAYEAoe0fPQvnGRTu4o2gVJKCDfDyFmbmSmi6aY+Tkz0rL/5x+jqC
IdokNU27W3Vt1k1waW/mUN1gfSolX7uuT2aKIRXKIrFyoNnWlK3BYHE7hQjw/+QD
yJt9z2o4jiv7WMV8kghBlF4T7b0Mi69skht69GR7VF7V5AR3b7DiN07040PzKxz7
ujt2/1eVf8b2eSRHJIXDvZbvZ8554F8CKWISV/2APj/c+gJrSBvWHG4gKCHUuCng
OTvHE3xEQYC4H8a8zDTzJ9otvV2qdQ1gzco6WgJuEcJeLXTF6kO1RkCpPA2vlPXl
7s5C+8muDvtlr3UDqzq1QV3YfUpJxt55/7Shw2ghCEVsUUgizBHW+EnriPCDKStR
KJlb93WURIlGr1+6G+TXYS/HnPjzfotpLBUVAEQdXUfJicut1/Pe5K0Yj68eS1L8
q4q0g8YyQ1aZQhXtCA8jRRxwDjyJ0S6mCKe5ZyigJbSmV/DyX4LcCifqhSwylM7o
HP8qaS3wjHgzzR/VAgMBAAECggGAAbbBIjlHselEegYRELQYR6N+5yPMWN9GPIB2
NGnCVO4MMMorvxtQT3bKKTaopKBfNI59ppTL76c24WOFfcunt0qZasfsCa3PP/Wd
hV14Hs6wa6pIgU1msH+pp5Tpl8/x+JhjxqPpnBY91WtUP9ul79jxwTvbvF/GZS/p
xQzDOiCUU1F+4e1n3giu9BJGtj40Y+Y9OHrU1TQcmsuxTyooPYwuWPpTZsYIcqlG
GTjv2DI7eSjgTwVwnvvYERrBWCdsqyRXUS0RGrupieLvXAzIMJoyFzwgbu6KEBAr
sg8Zx2wRgnWQUuNKEgu4fCIN+SDxEBmz69oRHGNMzJSTessO8j1xFM0TqKFUyQnv
6XAPrj+rrpFSnUv23HCuqUK6USjE1h7vZqhX+/1HzTCyBZXDpgmgNIo8/spcW9PF
5hdOBCwWpiYvysB2BFNtGhA37kyI1t8HEzR5V+mhGFswwlxIQqmxhO/3BTPnmc+4
UZxBTqhKWTb04W1YQRdfO9DQQ2cFAoHBALUKXxmsVeBjMpojUrD2ekDzOqKhYoQl
oI5T6vbn8KtYsSh7ePrm9jE6MfOKwL3MJxy4Q2VKKS6s9ruDQtkYpPy/EzSWi5yS
MroGEFBlqMCKIneVhOa4+qYyqdpNfQFJq9dOimIS+4pIuccE13fX7UC6OYtQ+1qx
AuXo7tIVk/OHRBTh0FCGAFPzUKk3C0Nxt1o4Gkb2sdq/aKWKhr+eEf29l02UiocN
EGZjJHKv7Zql14PmD/NGGNDz0wd6Xn+JhwKBwQDk+LWxxiijAAbYZvNM3/ay73Pc
CtbbgrFBCFwf0Fqh/F6NTAFEvvcrk1k5YVnV45flsU54zlEH2ce1mPK9WoPcyI0P
iNGPUSfoMwlwa6jlbOxanCCqOl70LrQP6v97AId7KxUsei1B1FjKKftF2Q47zu+x
E+LXI1jSv2IJiVTTeZon3RThwKMqflVN22erEEqQu944QVe1KNwKMqg/LlSEnz/4
LWkCXvkVDbVg4g9HLsPQVe0OsumTcbjx2EidMsMCgcAJy6fdob97xqJESMj+njd7
MC3qAsVr1QVc7hl2hpI1EzVytUuUd862VynAva80Fcm/+hBbeKnFxsIK301MpdK3
gjctzz96l0Z7XjyfvQBmepLm2YY5XaTiPTeHgk3TNgNAQRWnvNMzZj/3DsIB0AMc
T3cxnI4dGBrKCdJyN4yrzpPWdWlqEfYOlMm2fi3z1kFPdl2lnU9+QIEPA/HKiGj8
y7dWEUV1jTVn9NFSC0bV6UdB8b7HMPHCzI6Mhwh56h0CgcEAwRcoCkIElOj53NZ8
yNB5943NE7wkUrsVBbWqEr4fIEl15ww4aaPtRtccwDHjk2c5+l6awW+jj85NB0xz
L9G8L50EsBv+NTEISV140VBI/yjq7MKLHWLaHmugN2hCiJT6q5i6Y2ao8cHEGsBq
gQ25XiB1q8wMWMcbKaZxY39nhGsg4Aslh/du4e/luiGTfAPiDcoQbTpVX5WUchkk
HxvP9INja8PHsVMsFGAaHBinL601PmSn4+Rm64tUnsZ4/fAHAoHAUT1YY5uMjbr3
EJ3c2HviYM7ExchdrByMbtxipp5z8JWMSxH6pfyVFK+kqiaTAwtmZPm9LNgUym7Z
A4fSM/W0QvLu8qa/4rKLYgRebwPMj9oCEeciecINENqVHjNPOFRqTuqMV+aMrhDE
xiboGbgoNWGxJGcAvsKTD1/49Rjtl7ZpEHMbV6jI3JPX161n7D20vRWHSgRBdTNn
h1b97aHzKQlwEFFbAgQzfh3ATEJRJCkUoX+YK5TsVTUkfJOYPM5U
-----END RSA PRIVATE KEY-----
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encryption</span></span><br><span class="line">msg = <span class="string">&#x27;A message for encryption&#x27;</span></span><br><span class="line">encryptor = PKCS1_OAEP.new(pubKey)</span><br><span class="line">encrypted = encryptor.encrypt(msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, binascii.hexlify(encrypted))</span><br></pre></td></tr></table></figure>

<pre><code>Encrypted: b&#39;7afbfdb44b4b507b4e000a0b16ff3b64e9b570f932b3467b06b69d2071f92886f62f612f57caa9d1a46189759f51f46784388f7e52ee08f2434a8f7918e5e92a639f32bcf8c5ec36ce5cb5328279b793e33c1a9dc4af373875b9b230772d51f9818292b178153f172ca8ce5aea84396032b4ab26f29ba7808ef335d072cfaca61cc311e1542cc404c11fed5db0349ee4f56568e702bfc3a2203f521a282b1cd5b22a8f6d0c731589da8169b078c9be5d00b8df31b40a26f4e92d8d049dd3b9f5bd43d9c1680688cb81af3bca4bb44c8a8227941f5a874c7fb043e7dd9351117e1d286b6ac26486514681805c66b8bab5ebad7d7f9556a14678342c6278268bab1e98867ece9c253b48e4ca71411bc9728b7844b1ec1c007c6006701b3951f4e7b5b4558b140121422960a7fb1e1f8a9be1cb499be33517602d7a231d69741d0a50318e0bd3ce771f62b6161c0f945da9bfe28a05ccebfabedc38821f7048a5c6c6288435757d632192386ba0f607a6f96fe41fafbbf26dd6aafe46ddeb313de9&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publicKey, privateKey = rsa.newkeys(<span class="number">2024</span>)</span><br><span class="line">message = <span class="string">&quot;hello geeks&quot;</span></span><br><span class="line"></span><br><span class="line">encMessage = rsa.encrypt(message.encode(<span class="string">&quot;utf-8&quot;</span>), publicKey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;original string: &quot;</span>, message)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;encrypted string: &quot;</span>, encMessage)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the encrypted message can be decrypted</span></span><br><span class="line"><span class="comment"># with ras.decrypt method and private key</span></span><br><span class="line"><span class="comment"># decrypt method returns encoded byte string,</span></span><br><span class="line"><span class="comment"># use decode method to convert it to string</span></span><br><span class="line"><span class="comment"># public key cannot be used for decryption</span></span><br><span class="line">decMessage = rsa.decrypt(encMessage, privateKey).decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;decrypted string: &quot;</span>, decMessage)</span><br></pre></td></tr></table></figure>

<pre><code>original string:  hello geeks
encrypted string:  b&quot;\x1f~m\x87\xe0_\x8f\x89w1B$|l\x04t$\xa8j\xd4\xc7\xbdr&gt;y\xfa\xd1c\xc2\nm\x88\xd02\x05\x999\xae\x96O\xf8s\x83\xe3\xccw\xcc\xc5c\x97\xec\xdc\xefpe\xe9xkg\xdan\x83\xafzYJv\xdb\xf8\x8a\xa3\x1c\t\xb0\x96\xa6\xbci\xeb`&#39;\xe9\x15\x15\x97\x10\xca\x867\xa1\xb2d\xfc\xc4~:\xc5Q\xa1\xbe\x1aq-6\xc8\xd3&gt;&#39;!H\x15\x03F\x94V\xb5e\xaaBp\x13Nx\\\xac\xe1\x96\xf2\xde2\x98\xe1\xe0;_|\xefa\x17b\x9a\x1b@\x0f\xe9%\xd9\xfe@g\xecDxA\x8cS\x12\x8fI#\xf6\xa04qN\xe9g\x1f4Y\x19\x06\xff\xa1\xa0\xad\xec\x983Y\xd8%\xb1L\xa2r\xd8wr3\xbb\xa5\x06\xd7o\xed\xc4\xb5:JGr\xc2\xdb\x8bz\xb3$-\x89Xj\\2\xc5\x1f\xac\xa1\xfdm\xf5\x02m=\x9a\x0b\xd7\xb3\xc1\x80\xffY\\\x06V\x868\x81\xe54\t\x81\xaf\xae\xf7\xdd\x18\xb2&#123;\xec\xb7\x9e`&quot;
decrypted string:  hello geeks
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
      </tags>
  </entry>
  <entry>
    <title>Multiprocess_2 concurrent</title>
    <url>/2023/04/12/daily/</url>
    <content><![CDATA[<h2 id="1-return-坑死我了"><a href="#1-return-坑死我了" class="headerlink" title="1. return 坑死我了"></a>1. return 坑死我了</h2><p>return是表示从被调函数返回到主调函数继续执行, return后函数就结束了,后面的语句不再执行</p>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
        <tag>multiprocess</tag>
      </tags>
  </entry>
  <entry>
    <title>DailyEng Context.md</title>
    <url>/2023/02/23/dailyEng/</url>
    <content><![CDATA[<blockquote>
<p>the intended audience 目标受众</p>
</blockquote>
<blockquote>
<p>the issuer 发行人</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The result of each system activation/login 激活/登录 is a set of access and refresh tokens issued by the Application.</span><br></pre></td></tr></table></figure>


<blockquote>
<p>SAML Tracer   —&gt; browser tool</p>
</blockquote>
<blockquote>
<p>Time zone      —&gt; 不同时区application, idp, sp 之间可能会有问题</p>
</blockquote>
<blockquote>
<p>Token expired  —&gt; need to refresh</p>
</blockquote>
<blockquote>
<p>bearer 持票人 token</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using a SAML bearer subject confirmation token to propagate a user&#x27;s identity.</span><br><span class="line">使用SAML不记名主体确认令牌来传播用户身份。</span><br><span class="line"></span><br><span class="line">Are you exchange your SAML token for your own bearer token?</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SAML assertion</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use the saml assertion to get/pull the actual token which is a JWT token</span><br></pre></td></tr></table></figure>

<blockquote>
<p>individual cluster</p>
</blockquote>
<blockquote>
<p>establish trust session</p>
</blockquote>
<blockquote>
<p>for instance/example</p>
</blockquote>
<blockquote>
<p>obviously assuming 这俩怎么会凑一起？</p>
</blockquote>
]]></content>
      <categories>
        <category>Eng</category>
      </categories>
      <tags>
        <tag>DailyEng</tag>
      </tags>
  </entry>
  <entry>
    <title>diango</title>
    <url>/2023/02/11/django/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="400588f35ada9c78cb3fa8ac39d7d3f2d4ed8f6b98f1672774ab7f82cd499e74">b123e65eb64ebfafab7d0f6af3e97c6405b8f7ee56c57cda7d135c78e1255b50fbd4fd18fb0280ab157bec56dbb898c22b993ab7d7025478bd5d311077a5392f8615d8de10ef4b56b3c15dcc30c8c80e0420ac56b03d2ee6223138363b9f23e792359ba5fd337679da82e260fe377476abd4fac5de8a99914eaea08aa39b3e1024118c0eb808be2307a7f89e3b1cb5e40cecbfb31dcf0b58462637a2ed1e204fe9350b279a8b38132b6b923c32a288e23f67dba4c673352affd7336833771823c0024a2731c07034f9bbd700aa2a2092f01cca8b80daafd75f1ea1f3f9fc0a028f45f06e55439c4d118383c94f61d76d3c9dc5f1d27636429bbda72c2b7968ba5585d45e7d8f28032ba40e7837fbceb4598276b6922934ab3e9307cdd0a3a22f2f751d56cb6c91949f4317c97379369beff2dde8ac19adc97afbf23e4ba93d2d81ffc8a307d6c369b85f59a9ba4df69148d3d0585f62c03be78659254b192fa4a66bb5a9d9207ceeba2c8296edd7154e687537f0ce4ea5c0e3ce0a905a6711dc8cf72df827945d6a319482aee05e88c37bbf4c4c0a7a80cc01cc57c8db4218d1859a7837659e8c2577b9a89348ef118ec3d7a03af05cf35dfe304f01d5fec4115e972e95c5441e0f00d0f420e92fbe071310bbcc625276e4e51daa4e02259d3cbb5f37c5881fddd4a3abbcb91efc12858d8cb70cc2289ec0ac2552652c736316b262073413e03efe4b0c2d8db7be9161056b271f6b191b426a81a47cd15d8d066ee54e023a99d876b34dcb78eb4852b1ae9eaaf46748e49c31430df55aa13a35743c4609006c3ff3d5a62a91a629af977c028de2a16b1e9e0955fa4ec96a96fd5eb70083f3a24ca318fabbbc6b5f3b7546c7439be355ff28248cd94d558a18882c9c56019f43725ef7c318d04365640b6243a0ee3e525849b42f98685eb9a930aa093c431b82ac4befb5026a43ea554504b3df4c83992d5ef7622e134720ac49163c534bcfa30f00901227a09c9a8ccc7fd8ebb09e91873c6fd7523adea5f9c36a2c1b42886527ee9ee17680be08c68758a38b62e8497a695cdd88d9a29b1463b1968a8b5531433249bb7cf4e8132fd7ee96f4a47b22d929bde713f59235efee17556f8253856374d490756302cd3f10b502b220764870f3c4254139b87da2449e61f17b1c020c1bc7bd2a51e2365951e504709a5290ddc00f62d90c86b9d61849ac47c42012b34526c16c662fab7ba3d8760df3bacb1fa3893b26ef8ab0bbee45b8e4d0f821bb17971a2a507e7377f4a374e35a26f9ec5fe1936a8d0c4ae79187e53754abba646af9aa0ebe31c9c6ca917407b5f918682888c4d691675ff97dad5d4df2a8ab680267b32eb9f91b3475fbdf2b69fb867c9bbc5cf46cbc6c7cc1f3e6ad4ecde3ac1d4bf73a361068e5f708b5dba24728f75747cd5ff3be164720140fdaefcd9efd4916e15b974eef0ea50f23e6d7e4394a4f23b3b7e85d6f7afb06f730d904517142ebbe2b18b376dbb188d36b696c402bcbb8bc4bf4aa7d3e1d1efd64f82b2a1722c335d2f86a510024550996d515aa4b1872f11753e6ac4e9f90bb200113496d27e35e4b9e688db3fd3412d8696df2ba6f65a2a1a18336e6f6e7b4d9f92de0b991d6c705403db7f45889e53fb2ff8da51321fd3d2cf8ebe72e7f1c412e4dec6a287e91ac0e1e18d702e4afecbf07bc73eb3152af1bea5318695578fe49afa4862db83705725832a04317589d3ff974b7febe2700891ca65bfcc0b07e1724987b135af3fd90f89ecafd445cee4734d78735b9b2ef6898c03d7477ab4602065728ba67dbce55dcc5c7654094b3e9f23a9e27f8c168974e164de2966f928ba199a19ea801092c370ea02ab39d43b587bd60a7cd6d5262e7454127e2db962649e2cf0d68cfcefc73770dd588a057647e84f9dbb19687c7c032e316e0e79803cd4077c98fbd5066f1e646317c392c5cedbedb96b9a1c3114ad6aba80619f8618c27ef6e6394efea7579426669542f0375c07e497155cba01f26422f9b2f8d20f2fdb9ef4c9db6ce62d28952ceba1fca35c9bd7f0cb2e92e0e26e3b3251f82717490fc75e895a2f8e0168b5d0ed7b0e220fd00fc9372cfd334f6ca837aaa9799c784292db648cf10ef8c06e2381d7ef54f98198f4c4b7fedad87bfdfeeb191719bc584177b460e309a0665f26926c99696838fd1f1be87ac542a0a2a54788f09653dd78abafc4e50dd53a55e8576be9a68a8d5066d1e530c1813abc2eaa2ab347dd452deeec3ffa45e7329acd49e6d0aaf76dcdc1259f09e17a635790ba4e2b07e9250c4ba01eb6eb2fae6b99fa6cd9863da101d7a7ca76d3a5153a9d1be074666aa1eedb7c920b30c1046e607044b38aa891e55314e13b6c281f431f6b44e649b6f6df35a968845a67a1907c640205e885821e3fa8ce38d403c9beb56d38d988dfb9fdc5e33c1ccf3f67261b0f8394eed5f9d1baa62f666d6919379e8a725a439d56e09b4335a294675cab517a7770a42b85d569fa18a7f287e41d460cc9fc8de50b299bfff4121d2acfd2365a8cfbd3bc865c12b653642f2f88cfc71339a2176b2385767f34cc6a71e6a51b99077378142f5267899c4b88efb3b322e979308acc098be86e840ad15d4748274621a7c15d1dcf3144c8eeab44dad66ca284cac93f5c806cac207af50c9c05ecff99ffede88f8dac961d51549203e5db4792bbe2de2686f9b5ce074f935785e83b0a7b621964e3ad4e30b9ea01ead2a2f79d94cec3088a888bb8a91d3605de271713494e847e93cfa458a59286177503e55589f05ce4ccd5d7d018d35e4bedec43faf39e639d5896110bd0cfd23b4cc3bd6e27bdcaa60e215a6885df0db4fd8eba4ce531132c22db75e0ddda7cc3dd7a908ace504523ef8a7aae2fb222e22d0a4efb41483f31878bb2f7f92a4cda43de1c1f2278d9286956201c89f8f94f76e41b4c2b2eacf5785559e1cebe43bbf27cc431488b07365fe0abad109aa074e0c26295e1741baa71958cd0a3d02837bb7457e92a89c7c0d8843baa0149c87faeca32b12af06856192de89cff8fbea90d52302f8401ae50bd1511e4ebde86c647524cd0030934f7905ed16b1aaa9ce5cc7564c9ef6ecf55277fee2e8af46aa7f237391fc0f551eb186aab0b11fc21a380990cebf05af81698ef13d6ff9bd2b605134f6e964be5a117b9e0abed177bb089eb6879a0e6c9c7dd89f51c4b4a8ca0934e49e9f872eb238f334d776a71f376d72a28f306db438ecf754f7ac3a2c2ec4a8fe04ef09628736cc1c625f361531b110893980e4428ee31e54c72b19be43a88891a79d7bb4056d2ef56918d14d8d10c9f4a48bd559c8df7a13a4bbbe56f4ecbd836c9abba1d60cfaf0d459ba5072ae10d95d961398b99a3aa664e97c4f1bfb49535aea60a385bb6a8b25e941018e762965cea2079f43954ba53f2e9e52153ad059980dcaa5f8ec0da3f2c71e53602530078364ec0be295aed2606c1fa61f545a62a3d421d04ff6d5bd21159e4e3734ab9fd21833bf6a9e0a524ab5d13167dfc887cf6359c0047fe0a968b23fee7a80630a4e6492a12418c1dd03a06b5d2f265efed0e030ad1a6b767b3f2c2547ded7cd7b217d2e684f63de1cd401182d11eb4c0f4259ed65cf5d33f2c2750a68f8a95b4b28775c6a0bbda51bb0106681422401aa241cf420a0d5bfde35ce2d2d5f551c1fa8db2917128f8f7b7fc394cb3b3ea3fdc3edffbab680823a39ecdd17a60b825ec2ea466d53a6a7493dd46ac09318d41596bb5a6858c9f1c25c72703edd288b9a775c9d7fa2e89cdce59be7bdb9c5d54be5cc0b218973b3b2f70f2e3e31f71d2c40f8e1f1148ae61e1bcfc32f2cbec220d3d2bb275be8e1ffd9b6d489a3e53de06f2a3895386d37c4cb9fff711edca90fe041fa6254a802dedf9efdce5f327c82a2658212a43d23dc193ff456bdebc0e51659a1c157661b67ef2c07178d4fb40d3c7713d765fdf4a8c9871b2099912f7a24276a81707aba38caa554a26e4d9d5645274d93b762f24c3726f3e8742d50c79c44c9c3e5662c85ad8c543e8bde50fbfd396db295c88816259db809ec638c313f3de903dc81f25723da31eb1d01b1876ede388aba19b85c2268ccfedd6b2ddc282077a047409c20543249b235eba8732437959da95568546111799447bf0eb3a8d2cd0b0d40040a5490e37ce8393216581893fa3d1be7e0ad1f85a8688290a78cb019f5d5c01d0939f5ff64d4f8747d602d4ef0c22f1c28792d0c4840d06aa3abf05a01e4bb5d6d5fbc50380cde0e5dfa711567da46df662a21dd464b2c6c31836be5266834e0d2ea9a71b3659bc5541cdaa6079ee27beae94052dfc4bdbd9cf34513aff623225bdfc065bd1ac605e084fef86b94fdaf98e7da372dea2acc221f11833733e36367aeda3dbb39c12cd54cb8b850df44659f613aea7756f7070b3557b65d5ab2a38ebf535eb61b8b5911e61b5a0d65962672748110294365368e94e664dc8032c7a480c08de923310196775044d756078eac625b24b2c15af0b96f71ce062e0b69e579ed0ffd477ec72066ac622646fe0d43370b681aa5b924d44d26afb9c9e7e6a553220fbc7c5cc8b2ba59987957e720fdd6260c769a008e05ad300cdbc8032ace47ea9a4819f9da070bd3f85c005b9b277f6c7012b70f2a310421ca4722335b2b1cd55b2dc875ba034e0524385f60a5b5118a2164705635c6cf7338ef2d117a2bb091dcabdbf1bd5272e51030e11e0ad0f66574ca98abadd395ef12cd6ea013d621c6e1c92e09caeb655f8d44f1388ca2c882aceb61fe148810a46b21ce5154f538b840954778584c7ad5a2900739b4aa8870740612465ff09463f4fa2ffd9dd7edad1ca24e5b693b32ec9f98c81eb2ca6eaaf2eb982ecfca435ec6de2abad1e1fbe0b650fd80eb6e116ac00a0650708a4f270d710e64fc431620f4d068bda2f822ab6eeb98c428ba723b5d42de255d3516ab6938593e79ae79621ee3eba427b41725cbe1ab56367319b930f0d771e3d8550b420e9991592d2a2dda881411534794cd1c4ae7dccc353946b0bbf31d94c7db1ba0244c926513d35f74da882d8de39f191234375e505b120676428ca32e632be470e6faf5bdf9c3cda48e9149022f5b4660853965c84105e8f85263ce4437cf860f8f400b1f62e9e540cecec7115d7e93ef374670310c551e344d1cf44d523db092080df35819433ec5d371f10e3ceba0c381fee6b4d8c75b3d0c50d93f1511d64ec7166c53091180abc9772817a8a83867297edc22793058ce1a01be82a1c76615585f0ba13c34acd339ca5b796dc6ed8b34b898602d090f12e0bf799419217c4622159cf32a763af3c5f8e26b8bfe5415df93d941904280c03f49d427bab69a1625c2197f4a2d88c1d6a6eee1f2e403fbeb10bf908d1d6e14ee19117da24ee8d4247fb7a2a8463cc0f83146748806ec4fad7bcc64bdb838b7b72c91f546bca4a7d626ffb328bffa5f9eb1fa136adcb4e6b8edf3da9fead07af9eb671ce9bf02932b6fb5a68fcd225898fbc3d4d552efb5252bf2c26729f5de588fb90cd237aa3da7508d4d031fb8ed6832b3e0ccb8c7c2ce06ef5ffb609d758e5223b9f83c4de273e26767513206989d6a22198addea4c22e1d3e41c94984d423a3e6025c40cb4fe7b9fcdb2ca7a3fa27e082caa647bee0ce31079dbb2a3a4659391359a388fd1caf306ab043ebf20d67433ab3082fe3d15194c9238342884b6456f67970746b75ed681cecb8c2d569adde7b2398c257b0ba45e9b024e931f3f583b65ee859a9cad7824bece161748e41e040847cd656f572d36c52d08d1e0f091c2bff3e19c1fb8a1230458cc50867ff31901440b3db9e5123403ab03eca1492003905ff53828a4143490eeb9f7162986f31163952c3a5f829c71b3f056a4f2c417405b145a92f57e7847369dd31ec948b278366b7afbf4899cc065ec5512a53add8d79f7ca2d65fb8f606b6b0038cd4205944b60d24aed898012e273e8e4b11ce0724879f85f8ec450cd3fa6f80ca25dc7069e8ac6ef479814af1519d29d4156e9dd19eb84637609486749b565f26dbbd89eb125caf8a08fcb6d19f722b513cb7542264b7b77953a5101cff704cf402d3491e5b3ba05e4fae7bae88b42429a8b19dab2bccb07663d85b913bf6431e34528105bf118a75912fdcd20e1469820039d3d621c21287305e802bd6e7d906f3891dec3d2439f4f9232725099dcf0fb916e8a6a7b9d9d717bfb1aaba0ab379ae3ce5b1f99b77c8505e39fef4f07e734cea7cc2302884158f6850aae67b80403898bac996c81fa0a2b2d5067fca78fcd5b81a7ca28bf823ec423404a0f61a1205bd35a3442c0e30d2d6ad6208fe643a4944b20f1ba327b4e7d3a4a8324ee4d9c09c458c14dbed096e19502dc09c81f450761a8aa9db704f43af4dcbe5a45607058963447a28f664ab00ca7d41d9d53be658d5e8e8cddc5425be619dbe407ba849b2cf921fb678e6b1ee38cf502e42a55a2ea5823318b656dfcf5dc9f306263563f2f392d9f24d0f2c496594db99bd974488531126f8a206393bd5043e10730716a1ee3d1f69d40410477b58a8cd20c76b868297e2eaaf7334fb8a5fec51ea4b56f8c4518b7f3152a50ed8920cb9621fe6bf6090cb7f96b975f112dd9c686ac5253df69b25d44977a04179681208f2805bbb662d6ecf7421f9a30b9a8faa5db758e0ffbd13c6707184045568c3630515cf2ae6d03f2722e98708d0144950ea317a136bc390fec5f45146b7cc4e0eb76a77a4f6d5845a97a3182f57dd470cc6681c41e39337f5eb4e0ce8e0ae196cc103dffd8c67b52ed7247cce78fd705be4ba611900d112cb68ce99b95cb636142bae134dd52ba24eeb28894733bf9421c56217fe68446a52693af167449e57c072268367f045267c0ac0b622a2cbfb841aa8b88c386426f948fc2d7cd4af3d22f59f55ba88398e669ce972154e59381f986bf44bd8d4d28f2a4d0405a3cad8a789f8fdeaaa6b7132eb465b48bd03abd1422765b25f6a712673a7c921833cd4214dbca401b87089e5319071247580a0be1d96b75ae14dc1f2894ddd87c0df0d70440970fd3716cc2c4b33f4828fea504c20382893b63059800b008b06f194623eac8cba1ddd43deb8665158e352925d06ba7c2b1d5cd53c4c5fdeb1df843667865df0dc1cd2800c23e1e428b49b57159984b21a9eb3e30aed18e86ff99c968f04151019ff3a22aa5d822d8ee17bffe93a05aff36a9a01f982c670e8c4c56e568f92e7cf41ee880d1aa870827ff00b45485711b51bf6ec8bed79a51672e7584da40da53d0ffdfb60d583c0600893811bc811d847aaa8719b651126e3fba4db509b32908945d1010c01a09206fffe4e6316efe44e8918bd22aecbfd67aa18fe4fa81ff862921856e0675e04505f00e8fcd90593a6bac63030275415482329bae3e6616909bb0523c59e315eb061c8357d2e54b00786977504d5e2f06e3ec3672905817a85e03071bb27fde86bca14b9c78b838d8c53bfb50bb7ec0f923d0f15eeefd1a7a0120dc5b219d4074c935741d39e9eee46612148edd8e69ab212736e4fd1c303716ba69e346aeb74d128d62d98ae9542320cbbc67a80613421f0afdd8efe87857660a924af4cc1ab10e64ef6bab00a60b496d109e01305155906dc2c3b5de54dd562ca7dc88c32ebd1ebaa95a06e769e678e8329a96a08cf6fa12f353ddb7828254a04376e1a98c0db50baf11ffbd0d237614bf00065d254859ec7613156969590aabd5719b0b0cfaa8012ea04a01e82c5313434914e6315645b9a2659c2b0a1fcd7a30852b8d6f1772484ce8abcebe856111e99f0fb29cc77ef2e6c3ad5fdbc0b85d676f4a238e3d44e0dc8d851658fde78305d64e741c2e6e6843867e125c1e77aca0d359e199f363019daa0bfd9032ff0143d74bff9dcb29434d5aaad7b039cfc1a69f8dc822a3561c3b3d120f2ee85fc0abf6485b646c403577ba9ad8edce49d51b48b5355e7394916dae052d048f94af7d6001d65252ebf97aa4c5122d8b213545b802e524ccdb13658f7494379d01fdcd8e6d7640ef31a4015d5637e7aaa06147dbb7d5778972114382b32334758d9fad474266ff460256444465db16fb72fbff584ed6dbfbeccf69dbc1f405105cab9f6502f3128aa80f0fe47621765b5de0528e3d647c8b5fd77ca8cf63872e8b4a790889a48df7b3b06840751fe504f8a43c789830d2eba8eac9c1abd317509c8b94661fad5f6ac48b31df18a0684615936e4a757a48364570be7e292014d1fb38b3a65a8171aed63a32df0d3f4281cc515c9e4e370e2fb823f3ad7a345868cf5985ff2b993678d59128e1de9cfa4ee24ffdb39b0cb09c75f47e1395cad8f5afed23e41d748d321a2acee31e067a1528bc7c61df0d067e4da382b87482adcabcc337f84f287e04fd284eb1315439cd24534802ba0eaea5feff6d38478143e4818e70e44181aefe66e29b095830cf10b4322a86c63ee807b9efa81186eff98d5e4d4114fcc8ed82c004dc5f66ec68d37a9482a6f16f11601c8d399f1b88a111595783dcda6142aa83fb928d3dfa9fdddad38fb9e3c3d43ac18bc2adb3ea119eab1a4109da58ce45ba72f27d3d782f3a33e885d0a6c3d0ead69001e73e8f664ed2a94f3b53599bae92ab96061ab447f52f2d4699952d4ffae7e436c7bb424b125a25445eaf925875d67bbadc2c49db0a50b29ad786cd19249a01359bd485346553f8f707caeb23879208ad200ab03caedafea7bb9ad17746b226ddfb8cf8de02dd67fc07e6c0e24fcd6b1349e783d8af29b0e9487837501c7d292a65fc82d917d287e9b0105f4a38e4001cc1fb6deed03f4fb29d6310dd85dc869436851abc2899acca9a6a3f1673c31136d4d4fed70a0e127be057325453b9d2c131c8ec55df80a57de9ff56ccb3da69dbd9efdb5040158c252af4d61b214a53629dd102bdfbccdccd30b957f1ee63b1120f546525c20dad8f8245891177ed56fed4e793cbfd40c155d3006864689bb502239d912d3190fe1fbf5620a7af283e744907459bc48213168bcaaf4b13ee0374afa2ded3e8f7874096cc976876e0f0c2954951752a029bc7ec3158c02e27da7edfd84968cd892a9c06f8b47eb878b5559617d2fa8411c4c8d784dabf5aaaa86c77f56bc266f5a861adeb1dafeeefb998b33154bd319895fbaef79d1327e16b65499ccad2b04780764350ecd4d98ee95221a5434fd793692a8d8a05c206807671f872d9307938803af7f8ac2c6b1c5dc1ae6cc39efe0d7d5782feb9498f45300007878801d259a34243671da56f4c86556c7cb1a40091563041d7b29590fd867e5d001a42df527eaa7709a5948663abb90911d08e8eb67565f1e506e7207b66d551e9488a1929eb65864c5081e5b268fb19b99ddd8e188af987fa6e7ab3f3085ecbc0ae808f76edb34c034275d376dac8567603e6c7a2f71c024942830a21be6b5abe32a230e06daa951cbb8c5ad8a3643efcf26af0b27de760b58ad41b165622646c6429e6a9023fd7c0238bee6fca001ac02b33f0c4b692890e14c8ffb0d97a8a30fb89d10088bff6a614278c239a2d1a8ca60be1ff27f8101361017c70e819f86b8c54416a5fff79496c840712e8685e338865afc10905726cc35ed674a4001a4cdc33ac46fa7babe4c7f90bd34700fe3ca6c13390185d2db197a9a3085933e60387a7d45f39ce9333c274bda09c827853b3d1a441b332b081afb1667d039d28219378f0a9571c589455881fa436fa4396047159fef8377049fafacec9fa7bef0e4047e431a42c1704b00715e659cc691c085b5755fad1f4c967e74a7c562efa1636e6816b9a67b7d18288ed686c8ec88ccba6deca0a76ece9d5ef60c4a0d967febaf2a3132c85b54ce188160b9b99ae014d6c819aafed97b3af3ecd0b66705cefae3050ebb17a8bf46c045d100f3d873d654a18944ef9fc69ad24e4fe52ba469793e98e4e072e4cd4cd7f3311c4ad48773231ff66c9de5196c52afa0805fe8dca9823a808c12272624870be00c2ddab010ed988425588876e1335a278c16b9ac0c931c16b04eecf157cb317479b678b76d959e24faf256c130c42c73881ceb523d0bb1a237ba45c0396ecc6e6f8c355f9f6555a165df84c0b94286776c4698b41e53250ae3fd59da4505d3685d61d648746a98ae95822a116b6931abd97860f74d8bc74bf456050080e8da0a8caa1ed609a87effcb3851080aa058ead532e48af94bc7cb99ee64c86b6fa448c75e88dff318918f956054a8a99e0549225ca4d901315a954c8f1fcb3df0169e8c10ed6c5e2696483f7a6a001a08b68fa6460ee35a3a858f207cfa7145d810cf87ecf05dd8a855e68c3645742564b51604b23cce675a7e5f2662702fde5cb45f564c465a7f345bc9660ba34d9974a376508a05579b87235df20adac6290028f56a298d87b9030308c383e8ae5b5e37f6752cc8fdd36d3840a545389e847b64b2e9df1558a9373a559d89caac907369f500aaac68e1bd10f6f41fdbe5125f92367d1c1b8b71226d66ace38da6d494a981b7debc390370fa67ce050950c0ab4a0b1ca648da21d7ca8712945d89b0e6c8f13fdf74f0d488220b81dc7f27ead81a00e7ab4754b39f357196c63a5e89c8561eaed65fdfeec1f1984d734247ddf8c671a8ca9ff50052ddfff8928a607ecd0169f869df2e2fc8a9c3a95d11a92bbcc3e803741bbf087f4fbbf1c6b5478f11eba6132f17086fe216428ffca0753e746511fd40b80c40d713e8f09f98046db94d996b062a6fdb1a48091dc05d5633699fa9373b4f7254c1eace64f3ffb61b34be2aba14719ba4656e9e37348696d969238b086b45073e7e076747d9133994e617c50b7f9f0142fa4b7c1b5f929b520f9b6021706093d9eac36469c2097358fac908ed144a2d0ced181be804a0f5164f72a30a0cbbbd7cad2122a5b13cf10f2f5653bd516adf0f18e514a6a4083a2ed7fa501a4f65a824d27cedccf7ff6fd4bc6f423a015eb9e2acecac3e1df7ffa8fc45ebc9b4947ee73c51692c8d74b84a3b97a717917c763b43a32fbbf725d92497b59d2a3867d0c0b388ba2b3962fc2c99d3d38ae57f30b9fffb16f2739b665c359a27ded00b352d37d851f57ade06021d3117680102b093140193b639c606291aef1e77974b0e5eec0c5e366e2e58867bf1b77e362a5e5e7d646ce41616133c9087637047f0d0362a42e6895186ef058779957ca7c3c74faacf94d6b048d0dd1083a5ba41bc3a7365ed1663b270ee27922969c82bfd0b0e3956de97eac0aa84c3caf0ca8299888623ab8b64bd3853654fc1861d48b6a7eda3ab4deaa4c4427ef04626ae5622faf4d3c92a32335e11ef0f233f38326d2383f0da8a4e4865707ceb0372da5cf0a91f63ee0651b8d5d34de0a574a57712836a89d5d5ff4d57e66b97ee1c81cd0166e7052415f2e9c7d39ab3205768121bc55ea3fb50b5831e77500a001c30bc17502fc3922c3e6a61051df84d5161061cec5d1cdacdd29242fdae8ffbf62541307457a409d91a7777cf9634ee669d8731d9c6baa3d3a991c654daaa78eca7ed08bb61df51338b919a2bb91d36f6f7677cb4313d60ad883d8f2ad7ae0978a44cd956bccb064ad6cf0114d30fbac3a32301140447737a0f32542241ee8ee80ab3580852f0c9e817b6477bfe90c010da7b887734dc8180abbbaa15d64c8e8f86f75a5799ea7032ea81b2b34c9a67d577988a8fcb312b08ba62c373b4d50649a419970352b79a68a5e5d1980d1c60b6cd11cd32a5922901b3d634eb20f20f3d5d5241466c151841fea37e2fabcf390bd74ef218f738baba090f70694300c674b7f40d344ff5c03c6663d529e3c75fd25e1eb61d2af3909780d5812dd507bd39911ab28e4bd73d0cf032226a0b9b2469d438fb6017482c1d82a8e534a3f93e9b2312b3335873ea723f246d9a309dc720f0eb392d89071d672d9ee4cb10f5534066c0610bd9a2e2b1b4975249d14ede5a43ab7312925cabbe6a29c26d63225b346e65fe28a418b54413b9af6d73360c2ad9eb3685c7e08b0b8678644828f70551aa0f9c85d269cf4608e12957041fbb89b0bf45940459b19156dd11d9ea2481544dc2b6831419d35c03cc9a63ff7f043b70eb938b841b456e29776c5b9ba1e0379bb9524b611deb4297355a8278e9c31acebaa643300e48186e6deba1b09b755e38c6aa1010d231743b4df00ff324a6d9d2e72e4212fe669d43e0dfc8fe60c68642fc436fbc70cf2cc271dbaab5cc7f86efe0a8405f53842936793097bd1b7cea4eb35c2c7356912325664c1f72995912ba503f49ee6da05066d8927a149402003c71819217020396fcf27ae2654e3910829fab65bb03877e070609cd8aa683870941d203df29ad484da4cdf4e29d717e72e028c3fe562e338ac485188d5f5a0ee5701bcf6f59567f1c443d9ceb9a41adcbb9f6724a08964a134744560156821b93dbe6db9f3d87655dbb43586502077521cdfee816018d1bb9bf150616e7cea84a29b86a61104e805bd8ef2385b160aa3f5076852ef1abb1f3456d2eb13db101f69bffbd7de9f06e8fa232581faee8ada0c8b6b0ec3f3125499806d8d6b976ada71f8b4a0da0f03a75be38054005c4ac04b8e443a3c7dd9ecf063689acc92a285376c3444be76708d01f5448c861153ce9051e267539f3349c8c5f12d90d80105bba40f0d947797cef550926571b528d0aed45ec24c7b93f0d6794d9451490aa3770048f0a30596dde8fcc77ad8803212e69e9c919cfb4775ed6cc9aa63ae93c2789805bbc9512b5944ed49ead653dc7a55fa4bccd1450a5fa7822411e280f72c9ec5c7e5b28fa9893e2b5d398b2b6884ed5028970eb55c39ff2ba03456f6015b8875dfe2e884cf24f654d87b1ece97d0f36ae3fb1879525a34104eba292a8b35dece9dafa411fbe526bccf36ce4031fcad6a167f33b9e94a3d472ed2196340e04b8db538b3dca12aa0984291efa2fc8de6e723459215675e369477100ec8a17c9b780c6b703c52afcad82163b5f84d0aa2ea2e6a042c4fb7988e31cabbfeb79c021ebf4add4a90954fe791e09dd593270329e73dbe53f714aed76bd8f24c9dc431b99cb0b173f162443255d1d2e4dd4e97524f57a6e23650990e7a406bebb9a874d7ad8e4df35e400ed7b54b419e57afe35986f1db26ef1bd51b94f5ee1a0f5700293224119fa9ded2661ffecb1f138ece43cb40d86291456764311dec99dd367e29af81a9c2f8d1dd30fabb1b5bb3c7f92fc832940ca88d80f9f22fae97e8aa7aa895801f56676c6d11b873c611cc57f41276e8cb075290d457bd75c9a22cb53d0a56ec7301c4d62c4c2b37364727250f77a0f34e51be7fcff8252887c7a635025ed277f4b8373c77fb7ece1d8886bdb5b5e15051cfb41765ec58616de827ff3fd7c1c7d1f02f3f9bd0c5120ae72363b2d11ab13eacdbf21acdee60315ecb8124000211cd8201491a053504d1d2f903e58fa2273709388ab698458db17381a21508b563e19640b11ae04b27dc716a617c046f0a8eb1d29974369186c7bb65abb779a205e62ee5b5cd52a41bdfee933aa378e1bc825e936c09a075981f57d1e65fabf3f7980b08f24006af3ff69d0c4f6bd37be6a66b6123301af362443588501cff63e66df209860b0c89d186bfeb51a306ec4627124bb8a2b6917eb3014e65d1f3fc106aca1ed0fd27bd1ef0f1e96cb44704f1ae78a3f813b96248a100553ebc61329def8d34709bb56df2bd94b59f7b03e5ab4b82e2b7072817e37c309f5e9091ac380bd0e892d29f7eae338a8b84bb15b1cd7f8a2cfa12883dc67cb8ac386b4c5167deb4ac2ec093e2ca866d880d8f68765069c12ac52c1d12a6152877bfcbacc308bfdcbf7974ce323eb2999548556c57c4951ed59e81612036e89ffcfb586f681e5ef60fa65d02accf775045fe0346b0bde9472431daf58d338a9d3304a65be6f8eb40d8dc335a520e51ee6a826a2073ffb01b827e726c09556ce7b2762a49e51706ecaeb675313bbd6e95a6bc82e750db411b24e162792fbc526d656e31533f7ad4114ee55edd0e1ea268587e91d4bfbd7e2af54c59629ce11e64a813e5a903578419a47f0c858ae0c164ac6d5d0e1dcf10a8218b5e1b389ba3f1ce51a1e3911275cf3eb1f3e619f935cf2b3aec3f36f83459c00b7d44f82001075563ff71d15500f97cf8918cb0cfa1b2eccb67e5e5dcd7437efc4df0e1b743f4d67b5ce7cef906dfdb4766bce1d44569b648fcd6ae49019953a31ef0e103ad8b1f79ea39e35e42e4d56c88f992e0bff7d4cf91fdf7827d516803ef6d1c4f0e93a1ccfeb7f44d90655aa9bec0760a194fe9391a32b62b48b776a76ec00c211a31846bfaa096da297e4b805e4e98103ef3e1a201c88828f6ffdebb5b4a2ac0dc9ec71733befe276162c42408be239e0e6358a517c9bf1cd099b055387b54b6d0021bc6111b05286d9f2bdad140d6ba0e25b68eb5925abfcf1ba72d78040c1049ecae703c6c6b7e408119836bdeb1e88e6472bd3918581469d377034ca4f2b29492bf7534eafe8198a489f63ec0086bcfd0053265388d883390d93738e4550bd7b82d2fd48807afb007c5c4a7cf48bd9424520f14505b908c4e5a6db6035f1aef0d1ef992b046fa5f34c0d1260af1f56f0770beb32e4049e47c61be55248b04b49667cfb6cffc01bd9caf9874207838d28b5167c99e1bfe7bc403de92519c6d9c60c4c3f4bf938dabe0d2f7199cd4ab09292c7a965d368421d738ff820ae22430daab050bb9f326300f8fa562a5112025d1cf434254e69563256eab5b9e4c3afbe99fbb84d7ca817734c40f42cc17d2fce6f0a1d121d9dd7f56cc29645869b5e3f8d0e23e3cc251f8408b9b7537b9f32152da8750073d8bc1e0de267df6276b629805570665000b6e5fe4e6e60809ac8dd1cd673da1228771a1634a889fee3c526e4090ea3c26de591a53b7068c14f37ef6a50ffeb353cf1791e418db8a8314ad4b8de38587ce46bc6763818c1fc4041ecaddae7e4bf87050744284d6d454069b49ad204bf587cac36be6f8a71a897b0bd38fc19db73470ac1f3da0676fb7e5e49e398d553ece596ffc1f69401e05fe71977b5441fb72c5a7241fac3b950eea0c10dbd10ff89393c1cef4ef86e2574a6c09ba9bc5b33535bcad2a43ad53ec01d3b43ab034bb85631398bcb6847ae7282f5990957ac1fc63e43ff7beb2079d82b93a61248f5b295c9c659381e22f1ac5298712267d884630eb3682856ef4af108e1f608877f0d089b24f28b90f3cd9c6d4162aaec0175c5526c77c22c7c7f79cddcd1771689fa259e0576dbadc37629991e0f936b9cf4ab70cc7276df130c6e8bbca0e30b906e2c566a62b0f5c41d20a3ea8176ae9d4ce9ec1acc529e1a5ffe82eb1fd7ee53d70e8f919684ee712c08e21d79d9bad878f3d31b14e8b6fd7f0990cbe8742f27eedc71098370a1349819227db266c34446f26d3e6ba52fd7a425b7d33546e3b0e50f972802da2fde4048dabe9773a75844416443c9ad83ce0dacfa50b85049c0886f7ab8d52593170286c475575aba96a2b816916a754b27640566a5a6272d634464d807a3c9a6964e2663b1d5fb9ebb39bf305deca2c90ac5a142e6860f8dc350c4073b3c72fa8529d65c857151087fe5156c5f3c5542190548b80d6923ee781ac36d09e817b681ef366e00f2411fced8bd718a9ad9887ac62bc4c0ca372f1bad6ae2d8fce55eaaeff30c4d505fc419bed75af443f16f33a06955052011e11346cba879a3fe679b3d747cdbc84b4476b836b5aab762df141e8ecf1ec475afefe750081a32d5f5a2feaa532d7c7aacd1f6d195ee796cce3bc93be6d56d938b0b081198ace126d411c07842f926c686d44456c80b3b60730c8c6eaf1913c9d92374c061d80b2522eeba6fe6910201cb60881f896ada29af863522a0f6729864a1813d50f269fc4599fec0e1755db45fa243d878d9fae444271862b1aa02958540e8a5f131f2c12d12c40b532c50fb93683d7ffdfc19ff63ccfaf2b45927e3606a41800c68fe4b7f4a63056caad38100f4e404c4a2ed9900908ab79aef9386aabd5283a85cb947174ed6376628ed281bbd808d4579ac2249a37167de6cc4314ec32668bc860af22f226af5d6b06ad8692f770db8b402bf67b47f35e879963c784fbbf44a3a59cb374487113e1bf0cf3cfe8704307c92ca1cc8f35852f7d3537475e17f1fdcf2200883305e8f56a3c31d22610acca182198dec7edc3f9c972e593b9eed7632982a33bd358b6afce4dd286cfc882d9e46b4c4e98762d797c1653cfec562046b7d025e1b9cfc1fb2d09b3248c7f7179dd69b0a34fe2e2c1f438569c58cfdcc32b56c5451720836da9cd57680ffccf761f787fde9315969b8947869e6b17b0a245f522b71ce4b8a8f3e33814f3dbadf183b93c895b13610d4d45e493dc4ae2ee800fdd1017729f08b0949bb361bca7968141bef9343e0807498320a0606d6163187ce4b28bb1799899684f9ef36e883e2b909be15f8b226b2f86ac7725b6c4b1df1b90e12b822e5010c8643f1359c5bb64b4e46c67011596e311bcd5fbf99770df7608bf6dc15e2ffc2a83adba60f112e30104649ba5c6843c4eb77947bc1414517fbb4eaad52d51b80a480bc35dcd52d771219904a97c6293baca2b1132af9a5b218b3e243ab0d1d1c5023bcf44790c8d1b1e0d9d77f4898daddee4b950474447d6b8433a8fb0262e9e4624556d078256fa6c5007f835a2eb73ec8b331d7749631904a2aee2241fa4334edea406629be73145b49d64ed3340b89aca47aea087d5a7137496831626f36a98283ccee153e2dd4bfec91f8b10067ddd430ff5ef793f73fac70a00a58209b9bd5af213cf3e8cca4d7216b0f5ed306e48a42c9e0ad7a7e1de6f8ffd0e0b0d584472245010e377255831e4dd9595f61f1982a7ca58781c902bdec25aa1b73b47ab4f190cc9c72abb107e58c2017b7582ce63099b17d9014fe75f059245fba9dd981c01185b6f87a52cf5c38fd33eac6951557a7cb79163af3199467e9a2cbcc33d9a68268ce3edc2f7e43673f61d2299a43fdfb57d0eb8cfad1f3af34be9a251c27d9a0d832844681f40ab5cc3df40d23c02d11ee768d4bb5ebfb8f39a182f19743448be36ef5336997c1ab13d26ea35e00ea60fe2ff463f761fda2184c592bb0fa81a7c51c033380a39323b628d5dccbdd17da13ea9c51479178356a5a962fe9235b32e948d52f33112227d9be602d45b65291b37e1164b66147d391c5ad5033af9e374fbee94bca20d3df75b6c300e43d3d1094a8cc3416e0c7a7515835e9e2700a05169d29759eb5a796f22bcd83d5eaafcd1292bf648d815a89a5691da30efa0e499cb403fdfdbeba9057d57d6df59ac026506d299caaa1f68d6b10908852b85ddfb8b163c71d8446f6778d1fff9848704d645b7622c38b6944b1dd080af30af490005337923c4055043a32f5a0138763738ca7ba3704ed57056516675422681e5a05f627818a492685117635ac200e696dbc18db0c7b6385716b785fe70b74af0adcee778c81f46f2bc33b294b9cab551d1a1945362c80c6fdfca42219324546f678928401342cf224fd3d92a125e178356cbe2d7e7f5de189b0a69ede0293b5a045e7c4b8046703eabbe4d69f42ca3cf6d723d381d3b03b187c28ce824005052f736d5446f594b72b2de7e2bb2ce2f4f7df57006734b7c6e5f1f12b2183ffb743fdd99186ab150d028ee4e7d22ee70349d90e035a3ccf549a022150f531866eae11ee0e64878b585ef2c0d1587619af0977513088f45d6f55bdf46b96f559b482457a36b8af34253b3a1116dde29fd4bc830b30b5ceece149c35dd441f9a63bd227eea9a3df0a572736dcef66652e413af9d113f38125669cf9a214a950166d96c8afa7d23949d18f7f3387e117a4943e5be9308fc4bbb0241fb5cdb58f00cb512611c173df841ac116d28ca3a430c12dd78d82a9619234dc5702577d16885a2df6eeb3948a10f808e4a66f53f443a51bc5682b81f9e860af240ac367a67151f54abb312df0b5d72e3f8034e53c5be886148c8ea34d0467eee65c994b1887a628e8c45c04b0aade624e3054750d5622c222dd626518aa551cce192c546176573cf0ee4de15e0849afb9d762a886139dcef2299c39f62a03d09a4b72022fb0a5dee0aedd4698d7d74541d332d12426b404d7a7e0dc19394a7f3af20d3f8a4a9763d081ffe9972ad1e23626d6b52b38d77aa8e89b1d74b746a0ac35f493c9dae4039787ae4d8e93b8fdcc82abd2649a7d7bcbfab0e30e75438dfc7a12360f09969548bb30d615b46cdff19dad8ab20c806d1971f0003e0870d3680258fa0528eccd591b9cc3e1ef7c84d279f32b2bb49fa58cdfeb6f3e4f2d877f119f12bf0180be13bf0914f542e0f6ab2a8091e7178ce82cbe77a3dedb00bbb97c4f508dfbfe003e2f6d5e5ec2af59514a7c2523f0bc818d4d0b09c4229d661f6a8b37989e3b9cde37e26ff95779bec8da7886b374d7a8a630036e842dd67815f8a1b5f46998d534ee3bcf388d98f047e32a53472f48de584adc5d9e219e630f71361be634ae8e3a856b6db6a08f355d895b60def38fafe1b23d0144f38a42540ee1078398761a9c2e6e22370ff541b2badd5ef16d3630f12a36baeedf8405af16bf503a2daffb6cf9c2e07e70af222e45ac9ce04f93cefc8bb8697890e9be8be1ad75c1de8255f860d7e36c18bf4b7244b075a7d26fda6d12bfed46df4074b0b003ed0a43a6750e586fd5e625bac3f9c936ec03c8661fc67e0ff299bc5c38778b7dce04da36463107c0f7a0f6c3ee5b29fcfa99b3e6940a1d6427b877fa7a9f79ac135894eee31cc24f2fe7e51e0a88fb3826c462ff8368a1dbab58c917c5b93c20abea0fab5a545fb10e8af97bd7e51b4d25a5f2ca15295feeb0183d160fa85fba83752fd38bc842adfad680357735e2b1ee0949ba07477c2d8a042b71922d1758eb44ce945cfa128c18fc502f13e199d285e8e46fcbbe7b766020c508fb8b6f9aa2b67d196e5e3fa25c1908e9f93d264cd669bd097133f0ebb140856242af37d59ae1edd3d65be41de916932251d1bbb1881004ee78ff70e8872672f74738c9398863c99b37f3bb84a659841a1961171abf6f04a7ce93ecc852c4e62db12e99bbc34e4a144198ae60912dbbcb0fa8333807b45088efe938ddba700c415c691aa8cd4710da5b579daa618c8ceb7985fd964fbd61ec081a5d1fbe9c029decdba16d4114a61a76c951a8008481b630c385080c401d1619b68cb274fa35e9a05f1d9d1b157a09593800aba7aaa4985c51f73b503d70d9e051e93e9d1d91dd27e10ae6eb29e8b48f6c9f9c4793405f081ec7acec0a5b899d6ea9ec1d7c58c6cf594d34ebe5e00ddb3448398e5f837c5216e6d55153a4dd63b098e872a6118f4c10ee198de333d05f51d6b7dfd18dfefb451597f0397fae646f3c6d12678d76f812885ac4b000fb4dd9a1736a4788b410b315063ed3af1746537dc5f5cada8f67819ba6959b12e7b18a0aea9cc47331c8aff2ea0749043c3c049bbe3d8555df41dc126ffc6450e26102f0bbbaacb18d20137fd7fb1b0c0c00624637eb5c44cb22cdcc343df7ca9b01f888555e181e4f3a50b8d3293211d74075e93280861f62f86d0573dd4de2f38e4cefbd104f66effe5be34475fe85d58b15699da7ef6c675c488cef9f7a8e053e5321e8459e55a24d15b2260ee03d9bf98a0a043591f702d5fdf9ce963630c763ecbe5cce373062949758c85e9b1e2f6ac0663f1c8afc9feb5efe90a168c5712ba8fd144f41fb8b83106b0986fb992b5e75ccf072c92742d2e9d174a6c162c7c5fd179cc3f9d7a0c41dacd56d0d3d6978f798bb3c5c28fdbc98e731dba95a8f010683e19228f5d9ad55022848ecd95c7bf317617057e1283ff7ceb6257f92e34c889140af9c8a9b03b500aacb77629fc7797ca775e1eec7dc02cf1401f3683ee4ed11f7108be19d6579d4824219136ff5a6bf68446865fd522a8ed3704f29cdb068c047514c2e646b2edd593484c6b224a9fb1fb4783ffc2e9d2dfa549d5ec644053aa2b92f387500c366324ff904bb15edbe032755d115f6399003fa1f8a196d3d063e825f748df078e36792aebce8dfb434b89e0739b82ae8b85677f34e4debbe8b74f6bdae264cb3591bfb8940a4ca2484dbfd96bd68c791e3a774e054aad145ad661398ce7918e79df523604fdcac7f048bb3640185e06e84c957dbb4cc857370d8babd41edbe45f977c2d7a04c8e6249c9a8be34c28517b62a2177af63510801d3cab84abbc32b893281231d838a8f3532dbd7a121e1d5756c21d06719be2983e96c573b3677e2c92295b6bef0be6aec349d02aa398698ee7b68652bdb9fa1e0d2a264dc851edf9985eb658799deef9996dc3135058d58ab4e6add0f73d36520dbc010b880437904dd2269a122dca72fc15db17a7db40fbef2b30a1414dd8d002847220ca19cc0a0a0904125616dbaf523933bce2069e8e0378ddea2c4836cb40de53f2a912d93089e0964183671fce1e23979009b391cac54a1a2caf2815e7488e4ae3be6c67c19d67b5741ca77d93d030e667c80b714467f417a6c081a9d4ffaf2f68d34d6f88c576b37ecb70df6e2da09bfe5c71fe1dfe886dab4e87db0c54cf28162fc0464c069d855b5566aba7005d76c6a084216c91786aebbfd0557beb59ffb2c7c3020574dd7239247f107fb9a099d4e4f27f38f79cd0d310061e9b05c147372c928035fc0f2f80b5071d5bd694a8dba4f1a1dcf0487dfe6c2164cc24546f22b0f0c09c1a167a78a3b0304f326f0b35aff5fce8cbf022f99788bb5bb6ef23aa99a13ffcb46a393852b6795f3441e44483484caa39635c480aebefa042805a4cccc5aa721af25cbbe8d711825d00cda66cddff16fa3c4e7c552fba3a1e2ed905a5378989a449f97f13b14bf5e5d0607af99b0b5091ccd951741231c54c34664c5d3c7044f494fb7846a88e98027eac139e08d0ef599d9f0b6891958c0be61bd5fc9f5f8c915beedd8f6e410520da07aad23222d6a362f9da81d5e9b9083a0f95fd9de7757edf4d0fc8d4d8b11152475af521d027fedfea60288a02a89b733331a46e3810f85fa48fc07ceba94df3f17d0ef2844fedf37fd50436ccc33fb780c53db11f4b133f48cfdc0470089c0b37ccc7bb0fedc3b8fad9aa0e6f05ec28c95dfb4a19eebbcd89946c2830a72f6a8bf1c35b4d784d0fb9617c09bd4ffcdf027eb656d58af4a4092ddb29eeb4bb10e92b598007e5d0d5ee68c7cdf11b3b276174ef4dba5a8743580894803ead9c3b29abcb7a64b4a5734e1ad47adb8fd2e31264dc9f6c6dba78178ed1c728f8f54592d8f0f0bbcac3a7fc4e70637d2af9b32ec87a0b1d03649f4c8d250f12ad8193a17082fc15ca8c18c74c77bc7dc1cbfb6bff6e14e1ce25cd3a331d68738659e57c1ccd76e9bce5823d7484cfe27413cf9e712ca34423ff86d142f032378c376230b4f1890630814b452c8dbdab8a98ba1728fb7cec95a1a30128bec669bb9d4bd272443b6dd9a1095d8c48e8f8f879949d7a5ad90ca2258ab5dc7da04b6eb6fa9223451bea83fac97b394ec1f652e76a6c6d826371f14e28f28d6bf60f95e70092fc3fc4d17b2acde01d669e11b154d1318d0a2d03b0fb8383b2efdeef4f9cfe3f9a6e2dda4ca757ae2c76c3c2db6308ec13cff30aa93832b3f6a23391d86cba51ab9516ef8654d4996907d808b05d3a9c4d5e9576d5aaead0dd05384be87cd75c8d9df0793787a3b157eb509a2f7693bc7796babfa69b87cda30a967efc944fbf09ed274c8e1aa62b770e95469146bb4135df146d9573b134a61ef75d92b69f025c45137f44fd658b1cbb32c43873a4b0e153f88571e7c5c8e11406e82b9dabb833ba63feeac8479f16187833ce086d935fe3c269c2cc07531204cf33430bb43d087cdfbdd97677ddb01bd6a3a920bb9d7dce4139897335943d246a35e958cbfc1df166dc3d8e6d56fa50f457371a923703aaf8848cad093cd26c5e4c5d989b9cfa40e0fa3bdd24c034689c1d712b69f3d9247382fe991451faf012728486e2ab675c669f499d6642cfc8e4b687733ab4832e131dc697e176440d04e7ad1be623fcbd89606c210bf31a1d58b642a49ab0ac665fe7de855935e8b730a116243271dd19df1e5e9a340c8144eadf7801d7127674c98780a14884c8e61d6b34c82de7e606f502c3e2e67f122ccb9fe5f2c771822270d4051d737df82eb832c361763c144d096d00014df4b0a8f6418a81ef814628d253df0678bb3164bd6c89a01ebe61c23613384493f390e325b8e94eee6e73ea6bb15d033f0802b4da95ce956532e1d58431c735ebd2ecea9eec6fa50f9920f22db963168c8f90f34c11fe1f80c54f3f78acade820860ed37f3f73ac1f6b7cd0672c656b93c682d5b2a58bf0009c7c17e64e916d1276d51226d9ba189e925a88e46f4f6c890ce3b65c233a7b16b5f3d72cd5f15cc3d76f9393d5f3626e5b500495970be035bb0a0a1dcee3bebda03f90ba8cd3f717c5d5223130c8b20d7f5876bbaf70666ea5c2c8bc6279546c40d92ae449ada42bbcc95b7dff5b0599ee3a78b57f07ee9b04f4d1f704d4ac2b7cf2e87d7f50c79868455cc5dbeb9d3a80d2c1b20215d338f6af2b483b70900b6c69e022878baf8eaa2cd5fd09f694dae7d17c2e3078ec32a57600a1784ff2eb3ee91f5a9ea925605d5b2e229f399da12cf9b393e4e265337f3ede1a64e8a15825c7f08495497ab35b8f2b29a37bf63cf3eb3450a6a2a4023c567345e41602f6fe2f17167230df1a3b8137d4c2013136cfeb80936b0e15bcb7f48fcdd7721e8762665daeb190da67d4b376036e2af397e66b8aa40d3d0e39529a1db6abacdab7dfa8749bd1b92e94aa687aae687e3c0e8ac98a2d2470a63a3921d3e9b42a87fc37eaa2011b4960c328f59d4add513734ff7b5362981a2cc61c9151f0039087386664ae203ae32d205c3eda6b2e4cc9a8c1f4d897c7415c6b37ac90f230675382fc3b44f88e0d9a5cb50ac104bfe4aedb6129dd7bec69b09ef3db67ff625d0923026e91d2b0b0442455d007f82ab7650249176920a30f92eac966acf735880d4949a6487774ed5c3c57b8829422d016128d1ead256052aef3f40cda94637899ed166c564908c0116cd52798cd54efe6ccaac8e04c8339b1c3f55615318ed85e561b46800cded7da90a9f68dfce2a91719d2dd8e9a7bc222aa05c4be18e8e3b8e80f2af8fbc31bac8853be7b788fecb69c0ab136c29a052ec20df97ae78ef9afb87684b11573bd2fed21602f2c9710c09c8b33b17726a992abe0603241569e93876e207808d48345b9a943da9b8161f831b7ba6cdb1aa923ad44e2ee7a51db548ee537158fe30831c6204fae7c3fc838e41098d4382960b63c2f5010b3f942a64941c8f64442e6476494f3f840a5a67d255076f8e672b9eafb34b6a2ffbff4eb7c2c3c236cfe60f2924ecf6548bd39d5d44589021b0322b9f128d92191c011993f5fb71b5873ecee63008ca75af48ae84fb836f5f9be72fa58f4f28bc4b8bc8a697dad9fbbc1b59607cea97d58bdd0218e8af8647f1e892f83057e42dceecd5c632fb3ff5e0418bcd647693c3458ed152e7f6e6859f812e6c09c4217b6ced5afe06e5cae7053166d2d5de8f79717ebf6713b82e791cbb3f599d530e5ef7bbd4ddaa4d73b8c7af6527792c4afb7e07679164d89b41d25eb9bfc6631accd658f22aea3f39249bc289f1085d0cf846ac2244dd1d174ff2b2e551ab5c2bb1f74245a24f114d0ccfc3454fdf21f0444aba8146f98c54e51680f3acb9993b5a8135af4a3fa00c631d2070648ed3c5b4408467f2d458d25f389cad22546b3da4c0b8a72551f3e3cfebc1a4e205c81974e1b458f4515e0dab2c6443d6fe98c6e14057df2211ddbbe275fddeaaf364d95cb1c0e091ba247e09a03e831f649b524f6959581b3993d06aaf5a5bda2aacf3c3ba404a7e957592d0269306852ae2c0479489dec227f510008ecc1bb218d132bbef24ae9a2131978ced2b4d545d1df3e9f7b98cd2e08b5bd1ea3730487648d20df9338f5839d14bdf52fe4c4ef406949132c1b0fef483e715f83a080194e09fd0455c42dab4dc2141b71b5194877c8c2d2828cac9a3cfc509aec8072d6ea9bad3f4c107b8decf54c9aa58986df2aa8530fa073e53f026ef06cce05670743131ec78b0f274c1cc336d42bebbd99fbc1a01d9968b51f8e55b8f2ac7cf21c439b979e0e7e0dd3b1cab24c74b648762f4cff8c9bfa5e10540d53a664309070c40ddd3613de483f1cbc804e25414c47f96c73642dbba3909a9aa6121aca8be83a00892ab9aa24f6bfa5662bfcf0a770b66b610c924c80b2eed1bf13b14c74a3e1a43754228c0f048dd20eecc87a561d84c7195517e93eb751b79abe8e2739feb899891e7728f74d952d92cb316bbcd350dee7d14bed2600bee3bf2a6fee985cefbc9ec581b4e971023a09b2143d0da236f2dc20cd9b7deb7edfcb7d31ea24aefc4c34924417edfbae4476777dfa5949fe378de9193d864db8847b06a8dd59c68073c836c02e8051222d2769749f87831cd439071b4342cffa170e12e5a3d96284aef0562411f9a0f3fd50f5ddb6aadfcc443db8265d9ee79d2e9009fe9b1840082c57e4275835b62deff2b2c75751d8bd047688a74001ac76bf07460773d98e3ccf649fcda430b735632c0bace4ca2f8950bcaf1b0e9e7619ab38ebb31bbb714a80116bb0c8131dc1d45dd9e5a3d13ea7a1134862c18d750c91fdd59faf35bd3145274d4b7b52040ea280edce5665ee6d64531b83a1699b157c6535a7b01f69a6861367436788aff8fc421fa05bebb5b28d690d785760d6ae27909b0f06855c3dd1f464b305d701299fd28431abbfc3fdc9ced429780f67a109ce5b99d46c5c7cb5864ec5925cbc54d7371c7d6ec56ceadda8ece5f97a6ee396b09d7d4d51451f689bfc05f46a41f6e710f15ae5a1bdfd350f4ec9d954db43d39d5242c70a5397b8e78e95156ce39175158b2bdb970981a58fb939bb6a30b924b3e4392d09c1551b2cfebb348a8baefc3da23c46e2edc419ed661464f351d1496f3c0c8aa4cefcae0fccde95c9aeb8dd8235217f9027cc6bbb9809a3e1f51d9a68ea2741b2f7ee4132a4aa98d45b08743776bd20daee3ba4eba1f5383240a8c9fde14fb6e5161dbba2ee5a08f3a07dc128031cebfb382011e1ddb553c47855b3508e3a368af640565932dc9d048eccafeb21380cca2a1d5c3aa7d9daaa3558566c6320b6d812d08ffc46bf24b588a59a088bf72be621fd3d860c6ba8f1742960d73681ec23a522c6fc5d4dabf212176fdf6be168831b5a8fc3e9402b0de611677416a9c1712e8241b43c909ca33f83d39967a6a417c3aec3a8571ab50b20834e017f544a3a9f694a1c2b038951aca99d591b03b4a5122c7da77509b31351ec081b22a996eb34a90c7b1e58b209a407df7aa232f53547186550281e9e7985428f590eb7895a3db726f39b9369dd6d254e8a3d7529e47c65f37131d01717765c34c573cbe096ca4ff503146133fbd130a1a0dfeacf52f67f33da5e140540dc0dcbd4f84fc96d844eeb3125c2930b116296cbbb90f2857c514c6ff4a5a16ff24cdafc939985e9b9a1677c158ec1814421f6f9b452b1abcfab36c2131ee7ca769b2683eb1c0a6302f703ba58568a805b8ea8902155bac73462e1fc0fdf812f5576d4a67254f49e1ed6aba463accbb5c9c1384d3bac0570361fb20593b245093dfb5d212fde353ec2bc1c5c874d0a1333a3af70c10d268011c4b5a21d52f7f47d850a0060b03f257e5a0d4eae4c085145a1f8dad434469268de87f82282624df4d0774c9a690ab2ea3fa343fcbf9f7e47acf0329090c9a3771199c52003a029e460f583407a5c6808b00f949d8530c59e6977b73dad85d0b2ec2bc2d37687d5c37b033949085395f12c06837f4d618147878fb072731798ff3d5c3d61a16360f7bd43473cbc907b9e8cf9a0e7d4db446ad107a8ea1d088948c62a63ed22aebddbc8b25df9ae958b8c29c284032ea12f3985a5d74fce1a32789bc5a2868704c84fcebae65266fdd3c1fe993c43aaec143bad6659ef5e2b10fbe8c57200c94372f4873bad51f18ce0e88166592c565a8f09504eb9c2aae9f023e86a2b8dd3839bac248890a0b3855f7e55c15570fcfbe824022f9a9d5573348ab2aa144c5cb5c7cc771453d63a0f96e5b35541b42593fe9eecbe554f20936f0e96e73fc2c5c52d24422c009c2d5f3e96e7869456112a04e4f3ea0fcf7bfe5e1ce60db38c5711ec8cc15dad2224bcb9cdf6264e86a735aeaa115eee53f0720a6e2c4006b79ba7ae2a72d5fb5421ab933cc0ae019f5503a20d8d9d5c5f64485618726593f4cf8d3b3f44648abc20847e82ab775582ebbe181a94b3431e58824af84f2f53c16d821f8957a586b45b4120fffb9e927286462b04f28c96ebbea6ceba5d293932214005ae2b8f1d4bd191ce4e4067c1cb5d2ef5455a95703117dc819a2700467588d4b102a367ae76582c5d96c253d247e94762abf3311ce0b4e1283222b46083a66991b99bba132fd260de40deb7cc72b96c41348cb6fa397d27e106ec8f10172dc48c9eed8ea4c0651dbd71454a91c39bec243f5a7a0c089f731fed36ff743ac09b3a1cfef880721f73c1f4de6cf65d4b8c9766c616ad92a551bbfc56532e93bf9448234d51642b3e18129d1a54d90feecee036f2721a1d1daece5d13dbf05ca4dcbae160d68c3dffd0ad52884bffd7abf5553780456ab2148971d9a11e12aa9c6756e4c4aec2c4453829e7d2502c42f4303453bce92879ad67ccb60bbadeeeb2a16f6260d8adcffa2b71553f24eab68f8a29a72935b452a9fcb8cf2513330acbb60211716d09f9a263bfcdf5f04b2f0def32e6f29feeb4ec19a7967ba240c47f7f40fafb61ed7937f7711982c9fe1501fd892ddbee26a38a42d83a79c96c67528c0346f0764e6e83113f88853267031e1c947e0225d4094c31ec1724722933df5b6bbdb5a25e16918b596820c77f3b751685a308694bdc0657afd63def6111fac37e00d551bab9c22a4f620bf36ebbcc85b470bdd59058d5681613c290670b54e23bdcd18bfb3e4352a34955c3e59e227d5178619c25266e4a926bbeeec5fd8cd27921c4560e83810db1b14d52f09575887e559312a0ba577d57a18cb1f3a94a295b3fc2da25035426197833e463307163bc550506f00d75d50455090a85d9fa0b12c8450edbbab1f3e4bc27a5d5cb986b7e4938dce759a5cc1c3d49d603313b3dd4fdbd36ed0476d0598467e745370bf30f09e864a477361b1cb85cad1fb565fc99037f3b570f46d073f0a9f26a6597753eebab05a8675ebdccb677e419d341b7021e1fed5e97234598b0affcf4dc172426ca607e32613b2b0f2023cb9415f8b3a29936e34b3c3d6856e39584693e8f8724109e5462d7395fc5fe5758aea73a5f6b1106d76cc5c70e10b7372f70440158cf9ecda66fbd45ab08f1dcaf73e3f28c7b7737f60eba06f8b9bc8947cf141632af9f526f6a39728105adf4a0615d4b376b75b1317f03a430057c4448b493efaeff4d1affa9e861600511fb1a49ebb3dfc6f33576c40110afbfa9d8d0c27cc09b3a17aa0eb2b69cfd3a4c5928bcedaf7ee98ea644f0ecf8eedc465c13717eab5974f82b510775649aadbc5d6a83726a44d2e151c6c4877a2beafd6137da89f98e845e89671249951ceabb36f197de06955705bf9dbad7f4fc6da16fc18986ea0457f92f1b843a42766b09dd69dc5154ee5ffe3d65224b6c4fcdd375e2513337b248500f71c2fabc7d931d84e9eb6cabeb444be16c45b9eb2d61081f93029fdb14f673bd4f6b222f2aa034f6ec810579c72ceb9cce65d821a488e4571c29321ce90a2877a50ec1d3ceee51ac2fe9a4b0d04973c53327e92e17f32c92083123c2fff38c2d0dd787009c1c0bcc54ee97ca954778d3b05e539c824946ef51e3cc9f711d97c36f1dba23ea7dfae49265856294adcda9fedbeed680243cf762912bb61f709ee9b360dbe87f846691305c486e03f304d1fc621b19d87182e118f556933fc7a5e1b72d15e45c96c6456ba4068af70129fe02d611edb3e7b5eda8a4a0b70e8d6260bc8cb7bdd4b55133b487c922b3ad8a586540984ca574ec613e5cdd82de9d386fa0f33c58e681a307f6ce85226627c0d378e52422b8a52a49d07c8b31c9ad0cd42dc9c375e8953d83d7767235b490afb4e47468a4b43e0d219cb25cb7de4eddca7d7951f73f8d661edc59cfa6781aec4f86e5691b727609ec02475bcb9e07e2b6b20b2b469c7f0980a42b8ffe6025b16964703ebeb461eca05d188f328f89a7c95c7e1d311a5c16a58e0f6c99a517280b96de9b14d841089c5e4b7aa3cbd14aa4e2d88b2f33fe19d4f9d7023f0ca32bd5449f01d07219804d5910dacbc4769531298ca914abb390f22929159e8dbe981c9265441b25cbb96310d76a0fc30a56ffb9a6fd6d728f0d538f3ba6e1d1c083c082f48bb2b07d576fb8cdb311f30c11ff1c9e64d08f15058debea3fb3cacb5763c97d3444e94f9f50ce218db77a4bfd341c7ffaeb5fb644e10423dcc0b875525b42942b24d63340997c01b1be3fa2a88213b22ba3ec0bd66e3a53bc8faf0f74179f72fdf37ed8a7b5e4ddde41b771daf6790ce504eff43662fc1d8ccfbd0bc6bcc8838c4b81b69fa1606482edbc7377a0f5f023c4d1e71eec655ad188cf449fb3c3ef0b9834b67445cc9b2eae81affc77009879d9ebdea0e3e10a987ab65b2ae4178b2f6567fdc91e8f9aff49f198855599896c4a84ce8987e266f1e4aaf334a6e88faa34db944417ac940e99b9a043e73cfefa5c90451859a5555eb3ef55caa6d9727c9db0bb1b045fda60e5f15db34dc0a596826c221b140b7bf7a8bdc36e9bca6618e2c46d7a231d66652f3223b94d420319a9ef30d464eb036fe7b4b99c8f6bcdd1c1b288f81bb092e5f1ada868c61401f9730bf324fbd723e27fc0faee03a2436505aa0c7eafb9c27064d7f9b381bf7492e99d5c521316e67f0db7522eabe3e4605d17e18415142662a1cb7e04feb0f2bd4a5f784d56f11497b43ce82d2b52f1be9f5babb42aac0bbe43960880759ddd0d540b3a4eded6e245911b63f7ce333eda23e8959b5d14fc66b82ee69f19bde9c24ae4a369b6f4ba415858b28a1cc86261a5061c7f6dfcc4c788de0ad17764c6039f05f4e5cb40e289f5c99af0d3f91aaf993b20405ab16e2bd476c29aa873a2191c6556e67f8cc8d86abb1252a60a5c368ccf10b515a587700d43919424a2e4d780b331d2528a6587af612b7715a09a0a643f298521d6ed957435454c7bafc204d1a3cf711bded5c6c16290c0b3c198d81b8d8fe7b481cad5c89f3809eaa639f9f702dbaeb0c11862c0c7f290f4851e6af4313c9517ba65022b120210d63e1ff2ff2ffcf2b8917d4ddf7aab2075c05242592b86a0db53c633131a16292eecffc998dce220cc368c0112b7281ba9d9776a6ce6e8a994fada62817689ffd5c44a995eca090fe9d5566d12d5f5ab94dc2d50e683ba03236992a34a205faedd2bb722c5bfa7b3fee60b801cf3942fa89e83f90101f958be42d7540430aef378e05b2313aa5d0455b258473a6140c7084090c0815f21f1015358442391a036e51dafb6651288ad7786e8b3b10974ebf22da7537b9ce7ceb6e96c78b8477b59f37d04d56f0a50c04771b582d33bc37fe8718ffdf50e3f4098c20ba8eb9100a328964d46dc58e2f60771b6542ffeefdfd906da9497c55794f4f4a51dafb8cc0f76d1cde036c4f57189faaed7688c5624e5093abb5c7a2ab53e9998d41cafc52555db1b52a0e557cc793077fd00091d59cce9817409755025ccf4374f6b7cebc115f9131eccfa8c8d1bf29c3dbcf2adfc197482021e15193526468277546181cee78f2c9a57693163ff839f864756e31ab7fed51e5779f97af82a7accbd659076a4bfc8af06a543746b10acc72700fc0103eb063bd622996f05ae55c2a899c4b0f20a665caac8e31eeed908a665b232486b00dbc5e0287b8701bc1fe5ec70bcc4d08dae4e53fb90f34bc5956b3ef8bd6661e7c006edb7ef0ad9dac94e7637aa002b876073f363378a76adc5c5816112832dde26dd226051cec20ed0a4fe63cd00e07760ffe692622820c8f8b975c123fecfe95168fbad1b459a3bd129c9169e8d0b1629ea1469bc3ee76f56d2de1fcc6f7b24ccf83844a902bcd91468b2c3deb02e9374a69ffd319700f60b37571e24600c97bd9d146bc9e5c86eabd6a4be1054d59d97d855718c9ca7245dbbc2cdab2e9e59d92519d2228546a095b06b5d1571d1daca8f4178f7cde37f95a7e76e63656247de0684564f537e1100b91bab406d33d52dbdf1662e57edd692f24f41918f8629b870a1463f7e181226ca810016a710dfede88cbc6ce951ba03c480af0af45eb54171f6940a9568cd52494edd0267ccb2dfe7fe57ba71b1a761691db036499924cb9d08a5dca4fb0bbe36899524e0fe29917c2d3fc66883b4bcf66bfb7667a711bdc68ca7b259f9802f07f0a6240454bab4024fdd411e7b80269af0e424eb49d81d2ec5b329b366191351683aeb7aa9b3bda80bb96b18b458c6e99b99b5b861c27adf40285ab96df2815a99e278eb624f1a41fc9dc8d9c749c4de4744a473660d9f9bdead622f91c074a3e3692ba13e536e8fdcad4854e61bac5fc8cb059c9bdae342f9640bc541510e8d3f241dabaa2ce6cf29aefa6ad58517a69d328ec627c80031635d6a0e76afb0cf5aa500eea46a55ea0060738efa8f65d204aefb63d44337eecf7e5837b88faac5686463e1abf0d9890069767ce24b662685f87a18ff62001ca775833d995090dcccc22cd41cb84d7e1996d90b9ce976326eafadb7a2b9631c2343ade1faf7d5c0ad607120eff89bcbd24c4d8365bfdab18eed7db6f2b517f4ccae90f0d834b7caad74eeec2468bef59a1f69c9c7a69248af99809037e2eedf9edfcdeb9d37b151e4ba7f43e7db14bf6e4d97532129d46343273226638ec6bb1656ae0659a6fae4f324edf74e47220c3bbe0bd6dfb21d88ac2e7ae6fda0f0bf736a19ab9ef38a77cdc95c5c75fde4a58ab4502612209f92864310418a9def930c06bfdef2a0df8807453d95a10c50c5fc1230205d94f0355c7f742ff5ca9773ae70cab5483907131131665f3fb5b4fbf2a3c365169fa4f5b3f01b0b5253dbff683e83a7f60804092ebc5e35de42fe5a7bb2561315d63d84f613ca333d6726c8ea77becd3fbafcd0fd51032e03f390b10a126599fd1a7bd2003927c9f2a3214f6c28f861d26b950b09fd316916441ca5d6f1a2c96e4ffecb03cefdc5d85e73d88dda859b4d4be6797c4e4fb3e6a96cb0775060b80985016d7a626a61ece73b5d7b986541afd0a02db604a3bd5b2674906368ad65ed373f30ef6c238f74186c519d7c0f34d5a89e5ebe0ce0bfcfbf35423c92b6a462e8ff2d8bff0e5dcf04627f7b8304bd3f1e53e1e3b1c6f80670c2d1c5683a1ddd4cf941f6f6f6e9edaac46b24155c1ae1a5df728fe3e24bee7378739fc87248d3fbe102b06d37211ee7f1d397f4bb01f50bef46fc9255cd5acfefb3123479d57c79016e6d9332f1a9b3c2f8d4284773762c08d42dcfb4b96a65f39a9da54bd11c506a28fcbbdedb43bd633e6c96d957477eda3b052692f2750e6406928fbe08712fbc7018cc7134c14654ca4231d45b63ad6d91342c1072a19abda65b304189eeef162895eda7f5fbeab584137e68dbd8d4257a7293e84de38c0a98f0eac73c7fa785aa91e2c668d3c00527c33ce36df06f6fd587685a3fd6c3631edc81b195068ddc8012b86121a1a739ba46bc4997b664346b64dfbdd88ba5332627f459597b8085537cb068cdaf8ea8b23f11553387b30c3f59371ddc05753fa183e2561c92812cad9169f5b3f4ca3581bfea7f2bbde5df7deca6e3e91a6ad479ee1db3784fbca76832ecc8b3f3d30ce10517ed9452381e7664c79e28794af38c69ae2631a9deda7df59a82766ed78a5317eba92e7e0390d1b47a441c39d25ea79b8ceb12836d3dcad72ed6c682ffc1ff6be11da58f00acbbcffa5b081b2d606e25462139f4427b88aa9a37e74917025578124946751e2fafb86956d7d492c929c33a10a62adb366d5f60ac7da40f27142bee8d39dfac9ae173677f9dba664eba4099d7ee28dace684b71aae22fd377fe7f678276378d27e7a04308ab23d1c8572a5336b0a78f64959356c744ded82e75275060f04a4b879472651eecf56a2c5e5939f9dd310a4fba</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>es-suse</title>
    <url>/2023/02/11/es-suse/</url>
    <content><![CDATA[<h3 id="1-hostnamectl-set-hostname-ES-suse"><a href="#1-hostnamectl-set-hostname-ES-suse" class="headerlink" title="1. hostnamectl set-hostname ES-suse"></a>1. <code>hostnamectl set-hostname ES-suse</code></h3><h3 id="2-reboot"><a href="#2-reboot" class="headerlink" title="2. reboot"></a>2. <code>reboot</code></h3><h3 id="3-change-the-network-config-to-generate-ip"><a href="#3-change-the-network-config-to-generate-ip" class="headerlink" title="3. change the network config to generate ip"></a>3. change the network config to generate ip</h3><h4 id="3-1-vi-etc-sysconfig-network-ifcfg-eth0"><a href="#3-1-vi-etc-sysconfig-network-ifcfg-eth0" class="headerlink" title="3.1 vi /etc/sysconfig/network/ifcfg-eth0"></a>3.1 <code>vi /etc/sysconfig/network/ifcfg-eth0</code></h4><h4 id="3-2-add-one-line-ZONE-public"><a href="#3-2-add-one-line-ZONE-public" class="headerlink" title="3.2 add one line ZONE=public"></a>3.2 add one line <code>ZONE=public</code></h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/etc/sysconfig/network/ifcfg-eth0&quot; 3L, 46B                                                                                        3,11         </span><br><span class="line">BOOTPROTO=&#x27;dhcp&#x27;</span><br><span class="line">STARTMODE=&#x27;auto&#x27;</span><br><span class="line">ZONE=public</span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<h3 id="4-zypper-update"><a href="#4-zypper-update" class="headerlink" title="4. zypper update"></a>4. <code>zypper update</code></h3><h3 id="5-zypper-install-net-tools-deprecated"><a href="#5-zypper-install-net-tools-deprecated" class="headerlink" title="5. zypper install net-tools-deprecated"></a>5. <code>zypper install net-tools-deprecated</code></h3><h3 id="6-zypper-install-cnf"><a href="#6-zypper-install-cnf" class="headerlink" title="6. zypper install cnf"></a>6. <code>zypper install cnf</code></h3><h3 id="7-cnf-yum"><a href="#7-cnf-yum" class="headerlink" title="7. cnf yum"></a>7. <code>cnf yum</code></h3>]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>flask</title>
    <url>/2023/02/11/flask/</url>
    <content><![CDATA[<h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><p>FLASK_APP=/usr/local/devcodes/powerload-web FLASK_ENV=development python3 -m flask run –host=10.219.61.224  –port=2222</p>
<p><font color=#063060 size=2>1. 命令行启动 flask：先export FLASK_APP指向启动file.py；再flask run;<br>2. 命令行启动debug模式，export FLASK_DEBUG=1； 此模式可changes reloaded authmatically.<br>3. python 启动 flask,  if <strong>name</strong> == ‘<strong>main</strong>‘，可在其中设置debug模式<br><strong>4. 用装饰器 app.route(“/“)  route decorators 来管理页面路径 what we type into the browsing to go to different pages.</strong></font></p>
<ol start="17">
<li>login logout, 验证注册是否使用存在了的username 或者email。 登录后不再显示login 和 注册按钮，<br>只显示logout按钮。 logout之后，不可以再访问account页面。  首次登陆直接展示account页面，再次登录直接展示home页面。</li>
</ol>
<h5 id="先做点简单的"><a href="#先做点简单的" class="headerlink" title="先做点简单的"></a>先做点简单的</h5><p><code>pip install flask</code><br><code>mkdir Flask_blog</code><br><code>touch flasklog.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span><span class="comment"># root page</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<h5 id="增加venv"><a href="#增加venv" class="headerlink" title="增加venv"></a>增加venv</h5><ol>
<li><code>export FLASK_APP=flaskblog.py</code></li>
<li>flask run</li>
</ol>
<p><strong>只要做了改动，就要restart flask，才能生效</strong><br>3. 开启debug模式： <code>export FLASK_DEBUG=1</code>，就可以实时更新改动:thoes changes reload automatically.</p>
<ol start="4">
<li>增加  main 之后，用python来run<ol>
<li><code>python flaskblog.py</code></li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span><span class="comment"># root page, two routes are handled by the same function</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, World!&lt;/h1&gt;&#x27;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)  </span><span class="comment"># root page</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;About Page!&lt;/h1&gt;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<hr>
<ol start="5">
<li>在layout.html中，包含网站主要css样式，其中，body中添加 block模块，可以用来让<br>the block section that the child templates can override. 调用它的其他html可以重写覆盖。</li>
</ol>
<ol start="6">
<li>mkdir static 来存放 css样式， main.css</li>
<li>从 snippets中复制过来的navigation.html样式，放在了body标签里面；<br><code>https://github.com/CoreyMSchafer/code_snippets/blob/master/Python/Flask_Blog/snippets/navigation.html</code></li>
<li>添加main.html 到layout.html的 body中 head下面：</li>
<li>在layout.html的head中，title前面，添加link，来引用static中的css样式<ol>
<li>注意 flaskblog.py 中 import ulr_for: <code>from flask import Flask, render_template, url_for</code></li>
<li>改写layout.html，增加如下：<br><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123; url_for('static', filename='main.css') &#125;&#125;&quot;&gt;</code></li>
</ol>
</li>
</ol>
<hr>
<ol start="10">
<li>安装flask-wtf： <code>pip install flask-wtf</code></li>
</ol>
<ol start="11">
<li><p>register.html中 各种div 之内的 form.username/password/confirm_password都来自于 forms.py中 class 中定义的变量名字</p>
</li>
<li><p>但是最后一个div中， 指的是flaskblog.py中的fun name:<br>@app.route(‘/login’)<br>def <font color=#FF0000>login():</font></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border-top pt-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span></span><br><span class="line">        Already Have An Account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ml-2&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="13">
<li>flash :  redirect  — flasklog.py<br>在register中，添加，如果submit验证成功，就返回到home page ，这个home，<br>调用的是 flasklog.py中的 home fun<br>flash message 是一次性的，当再次刷新时，因为未触发到那个条件，所以flash message不再出现，除非再次注册。</li>
</ol>
<p>加入flash 和 redirect 来控制，做了注册之后，页面的刷新跳转；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span><span class="comment"># root page, two routes are handled by the same function</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;home.html&#x27;</span>, posts=posts)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)  </span><span class="comment"># root page</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;about.html&#x27;</span>, title=<span class="string">&#x27;About&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    form = RegistrationForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        flash(<span class="string">f&#x27;Account created for <span class="subst">&#123;form.username.data&#125;</span>!&#x27;</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title=<span class="string">&#x27;Register&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>13.2  但是当register 失败后，并无feedback 来告诉用户  why it was invalid</p>
<p>添加了一些验证在 register.html， 用的是如果拿到error信息就展示出来</p>
<p>![](_v_images/20201019234332261_1025641223.png =300x)</p>
<ol start="14">
<li>在login 加了 flash信息 ，hardcode写了 用户名和密码<br>![](_v_images/20201020002527262_100800492.png =300x)</li>
</ol>
<hr>
<ol start="15">
<li><code>pip install flask-sqlalchemy</code></li>
</ol>
<p><del>export  PIP_DEFAULT_TIMEOUT=100</del>  无效<br>sudo pip install –default-timeout=100 future<br>pip install –default-timeout=220 future<br>因为sudo 调用的pip 是3.6</p>
<p>![](_v_images/20201021220751159_1841048205.png =600x)</p>
<p>python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flaskblog <span class="keyword">import</span> db</span><br><span class="line">db.create_all()    ---&gt; site.db file</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flaskblog <span class="keyword">import</span> User, Post</span><br><span class="line">user_1 = User(username=<span class="string">&#x27;Corey&#x27;</span>, email=<span class="string">&#x27;C@demo.com&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db.session.add(user_1)</span><br><span class="line">user_2 = User(username=<span class="string">&#x27;johnDone&#x27;</span>, email=<span class="string">&#x27;jd@demo.com&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db.session.add(user_2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line">User.query.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">User.query.first()</span><br><span class="line"></span><br><span class="line">User.query.filter_by(username=<span class="string">&#x27;Corey&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User.query.filter_by(username=<span class="string">&#x27;Corey&#x27;</span>).first()</span><br><span class="line"></span><br><span class="line">user = User.query.filter_by(username=<span class="string">&#x27;Corey&#x27;</span>).first()</span><br><span class="line"></span><br><span class="line">user.<span class="built_in">id</span></span><br><span class="line">user = User.query.get(<span class="number">1</span>)</span><br><span class="line">user</span><br><span class="line"></span><br><span class="line">user.posts</span><br><span class="line"></span><br><span class="line">post_1 = Post(title=<span class="string">&#x27;Blog 1 &#x27;</span>, content = <span class="string">&#x27;first post content!&#x27;</span>, user_id = user.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">post_2 = Post(title=<span class="string">&#x27;Blog 2 &#x27;</span>, content = <span class="string">&#x27;Second post content!&#x27;</span>, user_id = user.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">db.session.add(post_1)</span><br><span class="line"></span><br><span class="line">db.session.add(post_2)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line">user.posts</span><br><span class="line"><span class="keyword">for</span> post <span class="keyword">in</span> user.posts:</span><br><span class="line">    <span class="built_in">print</span>(post.title)</span><br><span class="line"></span><br><span class="line">post = Post.query.first()</span><br><span class="line"></span><br><span class="line">post.user_id</span><br><span class="line">post.author</span><br><span class="line"></span><br><span class="line">db.drop_all()</span><br><span class="line">db.create_all()</span><br><span class="line">User.query.<span class="built_in">all</span>()</span><br><span class="line">Post.query.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>


<hr>
<ol start="16">
<li><code>pip install flask-bcrypt</code><br>用bcrypt 来生成hash 加密，每次生成都不一样，<br>但是反之check却可以验证真伪。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~ 🔥» python                      vivi@vivideMacBook-Pro</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (v3<span class="number">.8</span><span class="number">.5</span>:580fbb018f, Jul <span class="number">20</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">11</span>:<span class="number">27</span>)</span><br><span class="line">[Clang <span class="number">6.0</span> (clang-<span class="number">600.0</span><span class="number">.57</span>)] on darwin</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask_bcrypt <span class="keyword">import</span> Bcrypt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcrypt = Bcrypt()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcrypt.generate_password_hash(<span class="string">&#x27;testing&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;$2b$12$mwleE8U2426VUFW1ZfjI0OsrWatmzYla/hCHhiH5t/xsLxQl/ob6i&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcrypt.generate_password_hash(<span class="string">&#x27;testing&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;$2b$12$6kcDKHgJJDhlwaZZV9l0f.DPEqxcJFx01axApkdAVm/v5uoiQKyHe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcrypt.generate_password_hash(<span class="string">&#x27;testing&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;$2b$12$8LMjQhBOdUqT.ZLF08SreOf7CrOYCtgOaEEXHal5okuXclqgviR1e&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashed_pw = bcrypt.generate_password_hash(<span class="string">&#x27;testing&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcrypt.check_password_hash(hashed_pw,<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcrypt.check_password_hash(hashed_pw,<span class="string">&quot;testing&quot;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>添加了一些校验之后，在首页注册成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~/Desktop/Flask_Blog 🔥» python   vivi@vivideMacBook-Pro</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (v3<span class="number">.8</span><span class="number">.5</span>:580fbb018f, Jul <span class="number">20</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">11</span>:<span class="number">27</span>)</span><br><span class="line">[Clang <span class="number">6.0</span> (clang-<span class="number">600.0</span><span class="number">.57</span>)] on darwin</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flaskblog <span class="keyword">import</span> db</span><br><span class="line">/Library/Frameworks/Python.framework/Versions/<span class="number">3.8</span>/lib/python3<span class="number">.8</span>/site-packages/flask_sqlalchemy/__init__.py:<span class="number">833</span>: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead <span class="keyword">and</span> will be disabled by default <span class="keyword">in</span> the future.  <span class="type">Set</span> it to <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span> to suppress this warning.</span><br><span class="line">  warnings.warn(FSADeprecationWarning(</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flaskblog.models <span class="keyword">import</span> User</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = User.query.first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">User(<span class="string">&#x27;ali1&#x27;</span>, <span class="string">&#x27;ali1@flask.com&#x27;</span>, <span class="string">&#x27;default.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.password</span><br><span class="line"><span class="string">&#x27;$2b$12$JM7NPMUz6329UQmMtj8p7uDFWtKRHmpQujnffwW0U/W1WNOfWHThG&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p> 用已经存在的用户来注册，页面报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlalchemy.exc.IntegrityError</span><br><span class="line">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: user.email</span><br><span class="line">[SQL: INSERT INTO user (username, email, image_file, password) VALUES (?, ?, ?, ?)]</span><br><span class="line">[parameters: (<span class="string">&#x27;ali1&#x27;</span>, <span class="string">&#x27;ali1@flask.com&#x27;</span>, <span class="string">&#x27;default.jpg&#x27;</span>, <span class="string">&#x27;$2b$12$HjaXxkdNbmjhLSLTu7CSsO9Nx/HLJG8.1cUrBL9TwS79/Zui9wvSm&#x27;</span>)]</span><br><span class="line">(Background on this error at: http://sqlalche.me/e/<span class="number">13</span>/gkpj)</span><br></pre></td></tr></table></figure>


<p>在浏览器页面，到某个地方想执行，输入pin码即可调用python生成各种信息<br>所以，不可以生产环境使用debug模式，暴露的信息太多。<br>![](_v_images/20201022210758556_1552795459.png =500x)![](_v_images/20201022210936423_1612001069.png =500x)</p>
<p>添加了一些验证之后：<br>![](_v_images/20201022212003059_248276131.png =500x)</p>
<ol start="17">
<li><code>pip install flask-login</code>  安装login 模块</li>
</ol>
<hr>
<p>User Account and Profile Picture</p>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>KeyCloak</title>
    <url>/2023/03/14/keycloak/</url>
    <content><![CDATA[<h1 id="keycloak"><a href="#keycloak" class="headerlink" title="keycloak"></a>keycloak</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keycloak-ali1:~/keycloak/keycloak-21.0.1/bin # sudo zypper refresh</span><br><span class="line">Repository &#x27;Update repository of openSUSE Backports&#x27; is up to date.</span><br><span class="line">Repository &#x27;Non-OSS Repository&#x27; is up to date.</span><br><span class="line">Repository &#x27;Main Repository&#x27; is up to date.</span><br><span class="line">Repository &#x27;Update repository with updates from SUSE Linux Enterprise 15&#x27; is up to date.</span><br><span class="line">Repository &#x27;Main Update Repository&#x27; is up to date.</span><br><span class="line">Repository &#x27;Update Repository (Non-Oss)&#x27; is up to date.</span><br><span class="line">All repositories have been refreshed.</span><br><span class="line">keycloak-ali1:~/keycloak/keycloak-21.0.1/bin # sudo zypper search openjdk-devel</span><br><span class="line">Loading repository data...</span><br><span class="line">Reading installed packages...</span><br><span class="line"></span><br><span class="line">S | Name                     | Summary                            | Type</span><br><span class="line">--+--------------------------+------------------------------------+--------</span><br><span class="line">  | java-1_8_0-openjdk-devel | OpenJDK 8 Development Environment  | package</span><br><span class="line">  | java-9-openjdk-devel     | OpenJDK 9 Development Environment  | package</span><br><span class="line">  | java-10-openjdk-devel    | OpenJDK 10 Development Environment | package</span><br><span class="line">  | java-11-openjdk-devel    | OpenJDK 11 Development Environment | package</span><br><span class="line">  | java-17-openjdk-devel    | OpenJDK 17 Development Environment | package</span><br><span class="line">keycloak-ali1:~/keycloak/keycloak-21.0.1/bin # sudo zypper --non-interactive install java-17-openjdk-devel</span><br><span class="line">Loading repository data...</span><br><span class="line">Reading installed packages...</span><br><span class="line">Resolving package dependencies...</span><br><span class="line"></span><br><span class="line">The following 2 recommended packages were automatically selected:</span><br><span class="line">  pcsc-lite timezone-java</span><br><span class="line"></span><br><span class="line">The following 11 NEW packages are going to be installed:</span><br><span class="line">  java-17-openjdk java-17-openjdk-devel java-17-openjdk-headless javapackages-filesystem javapackages-tools libXi6 libXtst6 libgif7 libpcsclite1</span><br><span class="line">  pcsc-lite timezone-java</span><br><span class="line"></span><br><span class="line">11 new packages to install.</span><br><span class="line">Overall download size: 43.9 MiB. Already cached: 0 B. After the operation, additional 189.6 MiB will be used.</span><br><span class="line">Continue? [y/n/v/...? shows all options] (y): y</span><br><span class="line">Retrieving package libXi6-1.7.9-3.2.1.x86_64                                                                  (1/11),  35.6 KiB ( 66.5 KiB unpacked)</span><br><span class="line">Retrieving: libXi6-1.7.9-3.2.1.x86_64.rpm ....................................................................................................[done]</span><br><span class="line">Retrieving package libXtst6-1.2.3-1.24.x86_64                                                                 (2/11),  17.2 KiB ( 22.4 KiB unpacked)</span><br><span class="line">Retrieving: libXtst6-1.2.3-1.24.x86_64.rpm ...................................................................................................[done]</span><br><span class="line">Retrieving package libgif7-5.2.1-150000.4.8.1.x86_64                                                          (3/11),  28.8 KiB ( 35.5 KiB unpacked)</span><br><span class="line">Retrieving: libgif7-5.2.1-150000.4.8.1.x86_64.rpm ............................................................................................[done]</span><br><span class="line">Retrieving package libpcsclite1-1.9.4-150400.1.9.x86_64                                                       (4/11),  32.8 KiB ( 38.4 KiB unpacked)</span><br><span class="line">Retrieving: libpcsclite1-1.9.4-150400.1.9.x86_64.rpm .........................................................................................[done]</span><br><span class="line">Retrieving package pcsc-lite-1.9.4-150400.1.9.x86_64                                                          (5/11),  82.2 KiB (140.4 KiB unpacked)</span><br><span class="line">Retrieving: pcsc-lite-1.9.4-150400.1.9.x86_64.rpm ............................................................................................[done]</span><br><span class="line">Retrieving package javapackages-filesystem-5.3.1-150200.3.4.4.x86_64                                          (6/11),  17.0 KiB (  1.9 KiB unpacked)</span><br><span class="line">Retrieving: javapackages-filesystem-5.3.1-150200.3.4.4.x86_64.rpm ................................................................[done (2.8 KiB/s)]</span><br><span class="line">Retrieving package timezone-java-2022g-150000.75.18.1.noarch                                                  (7/11), 155.0 KiB (341.2 KiB unpacked)</span><br><span class="line">Retrieving: timezone-java-2022g-150000.75.18.1.noarch.rpm ....................................................................................[done]</span><br><span class="line">Retrieving package javapackages-tools-5.3.1-150200.3.4.4.x86_64                                               (8/11),  37.7 KiB ( 71.6 KiB unpacked)</span><br><span class="line">Retrieving: javapackages-tools-5.3.1-150200.3.4.4.x86_64.rpm ...................................................................[done (129.7 KiB/s)]</span><br><span class="line">Retrieving package java-17-openjdk-headless-17.0.6.0-150400.3.12.1.x86_64                                     (9/11),  38.4 MiB (179.7 MiB unpacked)</span><br><span class="line">Retrieving: java-17-openjdk-headless-17.0.6.0-150400.3.12.1.x86_64.rpm ..........................................................[done (12.9 MiB/s)]</span><br><span class="line">Retrieving package java-17-openjdk-17.0.6.0-150400.3.12.1.x86_64                                             (10/11), 284.4 KiB (447.5 KiB unpacked)</span><br><span class="line">Retrieving: java-17-openjdk-17.0.6.0-150400.3.12.1.x86_64.rpm ..................................................................[done (869.5 KiB/s)]</span><br><span class="line">Retrieving package java-17-openjdk-devel-17.0.6.0-150400.3.12.1.x86_64                                       (11/11),   4.8 MiB (  8.8 MiB unpacked)</span><br><span class="line">Retrieving: java-17-openjdk-devel-17.0.6.0-150400.3.12.1.x86_64.rpm ..............................................................[done (7.8 MiB/s)]</span><br><span class="line"></span><br><span class="line">Checking for file conflicts: .................................................................................................................[done]</span><br><span class="line">( 1/11) Installing: libXi6-1.7.9-3.2.1.x86_64 ................................................................................................[done]</span><br><span class="line">( 2/11) Installing: libXtst6-1.2.3-1.24.x86_64 ...............................................................................................[done]</span><br><span class="line">( 3/11) Installing: libgif7-5.2.1-150000.4.8.1.x86_64 ........................................................................................[done]</span><br><span class="line">( 4/11) Installing: libpcsclite1-1.9.4-150400.1.9.x86_64 .....................................................................................[done]</span><br><span class="line">Created symlink /etc/systemd/system/sockets.target.wants/pcscd.socket -&gt; /usr/lib/systemd/system/pcscd.socket.</span><br><span class="line">Updating /etc/sysconfig/pcscd ...</span><br><span class="line">( 5/11) Installing: pcsc-lite-1.9.4-150400.1.9.x86_64 ........................................................................................[done]</span><br><span class="line">( 6/11) Installing: javapackages-filesystem-5.3.1-150200.3.4.4.x86_64 ........................................................................[done]</span><br><span class="line">( 7/11) Installing: timezone-java-2022g-150000.75.18.1.noarch ................................................................................[done]</span><br><span class="line">( 8/11) Installing: javapackages-tools-5.3.1-150200.3.4.4.x86_64 .............................................................................[done]</span><br><span class="line">update-alternatives: using /usr/lib64/jvm/jre-17-openjdk/bin/java to provide /usr/bin/java (java) in auto mode</span><br><span class="line">update-alternatives: using /usr/lib64/jvm/jre-17-openjdk to provide /usr/lib64/jvm/jre-openjdk (jre_openjdk) in auto mode</span><br><span class="line">update-alternatives: using /usr/lib64/jvm/jre-17-openjdk to provide /usr/lib64/jvm/jre-17 (jre_17) in auto mode</span><br><span class="line">( 9/11) Installing: java-17-openjdk-headless-17.0.6.0-150400.3.12.1.x86_64 ...................................................................[done]</span><br><span class="line">(10/11) Installing: java-17-openjdk-17.0.6.0-150400.3.12.1.x86_64 ............................................................................[done]</span><br><span class="line">update-alternatives: using /usr/lib64/jvm/java-17-openjdk/bin/javac to provide /usr/bin/javac (javac) in auto mode</span><br><span class="line">update-alternatives: using /usr/lib64/jvm/java-17-openjdk to provide /usr/lib64/jvm/java-openjdk (java_sdk_openjdk) in auto mode</span><br><span class="line">update-alternatives: using /usr/lib64/jvm/java-17-openjdk to provide /usr/lib64/jvm/java-17 (java_sdk_17) in auto mode</span><br><span class="line">(11/11) Installing: java-17-openjdk-devel-17.0.6.0-150400.3.12.1.x86_64 ......................................................................[done]</span><br><span class="line">Executing %posttrans scripts .................................................................................................................[done]</span><br><span class="line">keycloak-ali1:~/keycloak/keycloak-21.0.1/bin # javac -version</span><br><span class="line">javac 17.0.6</span><br></pre></td></tr></table></figure>



<h4 id="Realms"><a href="#Realms" class="headerlink" title="Realms"></a>Realms</h4><h5 id="Realms-are-isolated-from-one-another-and-can-only-manage-and-authenticate-the-users-that-they-control"><a href="#Realms-are-isolated-from-one-another-and-can-only-manage-and-authenticate-the-users-that-they-control" class="headerlink" title="Realms are isolated from one another and can only manage and authenticate the users that they control."></a>Realms are isolated from one another and can only manage and authenticate the users that they control.</h5><p><mark>You create a realm to provide a management space where you can create users and give them permissions to use applications.</mark></p>
<p><img src="/uploads/203023010625203.png"></p>
<h5 id="Set-Require-SSL-to-one-of-the-following-SSL-modes"><a href="#Set-Require-SSL-to-one-of-the-following-SSL-modes" class="headerlink" title="Set Require SSL to one of the following SSL modes:"></a>Set Require SSL to one of the following SSL modes:</h5><ul>
<li><p>External requests Users can interact with Keycloak without SSL so long as they stick to private IP addresses such as localhost, 127.0.0.1, 10.x.x.x, 192.168.x.x, and 172.16.x.x. If you try to access Keycloak without SSL from a non-private IP address, you will get an error.</p>
</li>
<li><p>None Keycloak does not require SSL. This choice applies only in development when you are experimenting and do not plan to support this deployment.</p>
</li>
<li><p>All requests Keycloak requires SSL for all IP addresses.</p>
</li>
</ul>
<p><img src="/uploads/354284833950954.png"></p>
<h5 id="Configuring-realm-keys"><a href="#Configuring-realm-keys" class="headerlink" title="Configuring realm keys"></a>Configuring realm keys</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Keycloak has a single active keypair at a time, but can have several passive keys as well. </span><br><span class="line">The active keypair is used to create new signatures, while the passive keypair can be used to verify previous signatures. </span><br><span class="line">This makes it possible to regularly rotate the keys without any downtime or interruption to users.</span><br><span class="line">Keycloak 一次只有一个主动密钥对，但也可以有多个被动密钥。主动密钥对用于创建新签名，而被动密钥对可用于验证以前的签名。</span><br><span class="line">这样就可以定期轮换密钥，而不会对用户造成任何停机或干扰。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>虽然reaml setting 的key中，是active，但是到底有没有使用它，取决于第一个选中的 key provider</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A keypair can have the status Active, but still not be selected as the currently active keypair for the realm. </span><br><span class="line">The selected active pair which is used for signatures is selected based on the first key provider sorted by priority that is able to provide an active keypair.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><mark>Once new keys are available all new tokens and cookies will be signed with the new keys.</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. Once new keys are available all new tokens and cookies will be signed with the new keys.</span><br><span class="line"><span class="comment"># 一旦新的keys 生效，所有的token cookie都被signed with the new key.</span></span><br><span class="line">2. When a user authenticates to an application the SSO cookie is updated with the new signature.</span><br><span class="line"><span class="comment"># 当user authenticates login via sso，  那么 cookie 就随着 new signature update. </span></span><br><span class="line">3. When OpenID Connect tokens are refreshed new tokens are signed with the new keys. </span><br><span class="line"><span class="comment">#  当OpenID token 被refresh， 新的token 就被signed with new key.</span></span><br><span class="line">4. This means that over time all cookies and tokens will use the new keys and after a <span class="keyword">while</span> the old keys can be removed.</span><br><span class="line"><span class="comment"># 意味着 所有的cookie 和 token 都在使用 new keys， 并且，after a while old key 就被remove 了。</span></span><br><span class="line"></span><br><span class="line">这里的 after a <span class="keyword">while</span>：删除旧密钥的频率是安全性与确保所有 cookie 和令牌更新之间的权衡。</span><br><span class="line">The frequency of deleting old keys is a tradeoff between security and making sure all cookies and tokens are updated.</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> instance:  create new keys 3~6 months,  delete old keys 1~2 months. 如果user 在这期间old key 被删了，新key没有，那么重新登录认证即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h6 id="Adding-a-generated-keypair"><a href="#Adding-a-generated-keypair" class="headerlink" title="Adding a generated keypair"></a>Adding a generated keypair</h6><p>更改优先级不会生成新key，但是edit keysize 会触发生成新key<br><img src="/uploads/595696697899358.png"></p>
<p>####### Compromised keys<br>keycloak has the signing keys stored just locally 将签名密钥存储在本地， 不会分享给其他user或者application<br>如果认为签名密钥已经泄露，可以立即生成新密钥对，并且删除旧密钥，甚至考虑删除provider。</p>
<h5 id="Using-external-storage-正是需要的"><a href="#Using-external-storage-正是需要的" class="headerlink" title="Using external storage 正是需要的"></a>Using external storage 正是需要的</h5><p>一般不会把包含有信息，密码，其他凭证等的数据库迁移到keycloak去。<br>keycloak支持已经存在的外部用户数据库，比如LDAP, AD。<br>用户也可以通过keycloak user storage API 来为任何 custom user database 编写扩展代码。</p>
<p>当用户尝试登陆时，keycloak 会检查该用户的存储以查找该用户，如果找不到的话，就会遍历当前realm的所有 user storage provider，直到直到匹配项。</p>
<p>来自外部data storage 的user 会 映射map到keycloak运行时使用的标准用户模型。然后，这个标准用户模型映射到 OIDC token claims 令牌声明和 SAML assertion attributes。</p>
<p>external user database 几乎不会完整支持keycloak的所有功能。<br>因此，User storage provider 可以选择性的存储items 到keycloak user data storage中。<br>User storage provider 可以在本地导入用户，并定期与外部数据存储同步。<br>但是这取决于external user database是否支持OTP， OTP可以通过Keycloak处理和存储。</p>
<blockquote>
<p>一次性密码（One Time Password，简称OTP），又称“一次性口令”，是指只能使用一次的密码。 一次性密码是根据专门算法、每隔60秒生成一个不可预测的随机数字组合  </p>
</blockquote>
<h6 id="Add-a-provider-kerberos-provider-or-LDAP-provicer"><a href="#Add-a-provider-kerberos-provider-or-LDAP-provicer" class="headerlink" title="Add a provider: kerberos provider or LDAP provicer"></a>Add a provider: kerberos provider or LDAP provicer</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user federation &gt; can choose kerberos provider or LDAP provicer</span><br></pre></td></tr></table></figure>

<p>一个 keycloak realm 可以 federate multiple different LDAP servers. 并且把ldap user 映射成keycloak的通用user model。</p>
<p>keycloak 默认映射username,  email， first/last name, 也可以configure additional mappings.<br>usermap: email</p>
<p>fullname: firstname and lastname</p>
<p>Hardcoded Attribute Mapper</p>
<p>Role Mapper: 通常是group， 从LDAP map 到 keycloak对应的role group， 比如：</p>
<ol>
<li>from groups under <mark>ou=main</mark>,dc=example,dc=org map to <mark>realm role mappings</mark>, </li>
<li>from groups under <mark>ou=finance</mark>,dc=example,dc=org map to <mark>client role mappings of client finance</mark>.</li>
</ol>
<p>Group Mapper</p>
<p><mark>Certificate Mapper</mark></p>
<p>此映射器映射 X.509 证书。Keycloak 将其与 X.509 身份验证和 PEM 格式的完整证书结合使用，作为身份源。此映射器的行为类似于用户属性映射器，但 Keycloak 可以过滤存储 PEM 或 DER 格式证书的 LDAP 属性。使用此映射器启用始终从 LDAP 读取值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This mapper maps X.509 certificates. Keycloak uses it in conjunction with X.509 authentication and Full certificate in PEM format as an identity source. This mapper behaves similarly to the User Attribute Mapper, but Keycloak can filter for an LDAP attribute storing a PEM or DER format certificate. Enable Always Read Value From LDAP with this mapper.</span><br></pre></td></tr></table></figure>



<h6 id="Dealing-with-provider-failures"><a href="#Dealing-with-provider-failures" class="headerlink" title="Dealing with provider failures"></a>Dealing with provider failures</h6><ul>
<li><p>Keycloak 先查询本地数据库来解析user，然后才考虑LDAP 或者其他custom user storage provider.<br>最好在keycloak 本地建立admin account，以防连接到 LDAP 和后端时出现问题。</p>
</li>
<li><p>任何external user storage provider 在admin 控制台都有<code>一个enable 开关</code><br>external user storage provider(ldap or custom user storage provicer) <code>has an enable toggle</code> on </p>
</li>
<li><p>如果您的提供程序使用导入策略并被禁用，则导入的用户仍可在只读模式下进行查找。<br>If your provider uses an import strategy and is disabled, imported users are still available for lookup in read-only mode.</p>
</li>
<li><p>Duplicate usernames and emails can cause problems</p>
</li>
</ul>
<h6 id="Storage-mode"><a href="#Storage-mode" class="headerlink" title="Storage mode"></a>Storage mode</h6><ul>
<li><p>keycloak 将LDAP user 同步到本地（定期或后台），但是不会同步密码， <code>password validation 只会在LDAP server上执行。</code><br>Password validation always occurs on the LDAP server.</p>
</li>
<li><p> 用户第一次登录keycloak时候，keycloak都会将它写入本地database。 Keycloak performs a corresponding database insert.</p>
</li>
<li><p> 可以但非必要，同步LDAP。 can synchronize， but unnecessary.</p>
</li>
<li><p>您可以将 LDAP 与 Keycloak 一起使用，而无需将用户导入 Keycloak 用户数据库。LDAP 服务器备份 Keycloak 运行时使用的通用用户模型</p>
</li>
</ul>
<p><mark>如果选择 disable import users, 就无法将 user profile attributes 用户配置文件属性保存到keycloak中。</mark><br><mark>user profile attributes metadata mapped to the ldap 可以保存到keycloak中， 但是 user metadata不能被保存，user metadata=[role mappings, group mappings, other metadata based on the ldap mappers.]</mark></p>
<p><mark>如果禁用导入用户，则无法将用户配置文件属性保存到 Keycloak 数据库中。 此外，除了映射到 LDAP 的用户配置文件元数据之外，您无法保存元数据。 此元数据可以包括角色映射、组映射和其他基于 LDAP 映射器配置的元数据。</mark></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If you disable Import Users, you cannot save user profile attributes into the Keycloak database. </span><br><span class="line">Also, you cannot save metadata except for user profile metadata mapped to the LDAP. </span><br><span class="line">This metadata can include role mappings, group mappings, and other metadata based on the LDAP mappers&#x27; configuration.</span><br></pre></td></tr></table></figure>

<p><strong>UNSYNCED</strong><br>keycloak 会把 更改 username, email, password 的动作保存在local，这些信息需要同步回ldap， must synchronize this data back to LDAP</p>
<p>当 Keycloak 创建 LDAP 提供程序时，Keycloak 还会创建一组初始 LDAP 映射器。Keycloak 根据供应商、编辑模式和导入用户开关的组合来配置这些映射器。<br>based on a combination of the Vendor, Edit Mode, and Import Users switches.</p>
<p><strong>Sync Registrations</strong><br>Toggle this switch to ON if you want new users created by Keycloak added to LDAP</p>
<ul>
<li><p>当选择 import user， 用户第一次登录后，从keycloak admin那里查看all user，会看到验证过的user展示在这里，意思是已经导入了，keycloak只在user 第一次login时候导入，而不是一次性导入整个LDAP的所有user。</p>
</li>
<li><p>如果想一次性同步所有user，有2种方式</p>
</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">If you want to sync all LDAP users into the Keycloak database, configure and enable the Sync Settings on the LDAP provider configuration page.</span><br><span class="line"></span><br><span class="line">1. Periodic Full sync</span><br><span class="line">此类型将所有 LDAP 用户同步到 Keycloak 数据库中。已经在Keycloak中但与LDAP不同的LDAP用户直接在Keycloak数据库中更新。</span><br><span class="line">2. Periodic Changed users sync</span><br><span class="line">同步时，Keycloak 仅创建或更新在上次同步后创建或更新的用户。</span><br></pre></td></tr></table></figure>

<ul>
<li>最佳同步策略： 在创建LDAP provider时，选择 <code>Synchronize all users</code>, 然后 <code>Synchronize all users</code><br>The best way to synchronize is to click Synchronize all users when you first create the LDAP provider, then set up Synchronize all usersSynchronize all users</li>
</ul>
<p><img src="/uploads/86293028586002.png"></p>
<h6 id="Password-hashing"><a href="#Password-hashing" class="headerlink" title="Password hashing"></a>Password hashing</h6><p>当 Keycloak 更新密码时，Keycloak 以纯文本格式发送密码。<br>此操作不同于在内置 Keycloak 数据库中更新密码，Keycloak 在将密码发送到数据库之前对密码进行哈希处理和加盐处理。<br>对于 LDAP，Keycloak 依赖于 LDAP 服务器对密码进行散列和加盐。</p>
<ol>
<li>By default, LDAP servers such as MSAD, RHDS, or FreeIPA hash and salt passwords. </li>
<li>Other LDAP servers such as OpenLDAP or ApacheDS store the passwords in plain-text unless you use the LDAPv3 Password Modify Extended Operation as described in RFC3062. </li>
<li>Always verify that user passwords are properly hashed and not stored as plaintext by inspecting a changed directory entry using ldapsearch and base64 decode the userPassword attribute value.</li>
</ol>
<h4 id="Authentication-flow"><a href="#Authentication-flow" class="headerlink" title="Authentication flow"></a>Authentication flow</h4><p>flow是一个在登陆，注册或者其他workflow时候要进行的 身份验证，屏幕 和 操作。<br>An authentication flow is a container of<br>authentications, screens, and actions, during log in, registration, and other Keycloak workflows.<br>To view all the flows, actions, and checks, each flow requires:</p>
<h5 id="browser-里面的-Forms："><a href="#browser-里面的-Forms：" class="headerlink" title="browser 里面的 Forms："></a><strong>browser 里面的 Forms：</strong></h5><p>先说cookie，user 首次登陆成功后，keycloak会 sets a session cookie.<br>如果这个cookie已经存在了，authentication type=success, cookie provider return success,<br>而同级其他验证方式都是alternative可选的， 那么keycloak不会再执行任何操作，这次请求会返回一个successful login.</p>
<p>而这里的Forms， 是个可选的子flow alternative sub-flow，它能不能被执行，取决于它的parent status.<br>它包含了一个需要被执行的额外验证项目，因此如果想这个form被执行，就需要删掉cookie 验证。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Since this sub-flow is marked as alternative, it will not be executed if the Cookie authentication type passed. </span><br><span class="line">This sub-flow contains an additional authentication type that needs to be executed. Keycloak loads the executions for this sub-flow and processes them.</span><br></pre></td></tr></table></figure>

<h5 id="验证步骤"><a href="#验证步骤" class="headerlink" title="验证步骤"></a>验证步骤</h5><ol>
<li>Username Password Form, 在browser flow中，这个选项是required，并且不可更改， 需要用户输入uname+pwd</li>
<li> Browser - Conditional OTP sub-flow， 它是based on the Condition-user configured</li>
<li>Condition - User Configured. This authentication checks if Keycloak has configured other executions in the flow for the user</li>
<li>OTP Form Keycloak 将此执行标记为必需，但仅当用户由于条件子流中的设置而设置了 OTP 凭据时，它才会运行。否则，用户不会看到 OTP 表单。</li>
</ol>
<p><mark>可以添加新的空白flow，也可以copy已经存在的flow， 里面的action有很多种， from sending a reset email to validating an OTP.</mark><br><mark>可以建立sub-flow, 可以拖动顺序</mark></p>
<p><img src="/uploads/151286775946824.png"></p>
<blockquote>
<p><a href="https://www.keycloak.org/docs/latest/server_admin/#configuring-authentication_server_administration_guide">https://www.keycloak.org/docs/latest/server_admin/#configuring-authentication_server_administration_guide</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
      </tags>
  </entry>
  <entry>
    <title>mapinuse</title>
    <url>/2023/04/05/mapinuse/</url>
    <content><![CDATA[<h2 id="1-map-reduce-zip-filter-对序列操作"><a href="#1-map-reduce-zip-filter-对序列操作" class="headerlink" title="1. map, reduce, zip, filter 对序列操作"></a>1. map, reduce, zip, filter 对序列操作</h2><p>对指定序列做映射，返回值是迭代器</p>
<h2 id="2-map"><a href="#2-map" class="headerlink" title="2. map"></a>2. map</h2><p>收获：</p>
<ol>
<li>map(func, list_) 是一个迭代器，需要一个一个取，取一次运行一次，拿到一次值；</li>
<li>next: 可以取一次迭代器的值；如果取到最后没值了会抛出一个错；</li>
<li>list: 可以遍历取多次迭代器，直到取到所有值，并且存到list中；</li>
<li>list(map(func, list_)) 可以取代之前的旧写法，定义一个变量，type=list, 然后for循环取值append到这个变量list中；</li>
<li>list[func(x) for x in list_]  也可以稍微简写一下for循环；</li>
</ol>
<p><strong>小补充： list还真是遍历多次迭代取值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = <span class="built_in">range</span>(-<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nums))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(nums))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">range(-5, 6)</span></span><br><span class="line"><span class="string">&lt;class &#x27;range&#x27;&gt;</span></span><br><span class="line"><span class="string">[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="2-1-map-func-iterables"><a href="#2-1-map-func-iterables" class="headerlink" title="2.1. map(func, iterables)"></a>2.1. map(func, iterables)</h3><p>map(function, *iterables)<br>对指定序列做映射，返回值是个迭代器，可迭代对象： list，set， tuple<br>map 取代for循环</p>
<p>list(map(function, *iteratbles))  == [function(iterable) for iterable in iterables]</p>
<h3 id="2-2-最常理解的实现是for循环，把结果收集到一个提前定义好的list中"><a href="#2-2-最常理解的实现是for循环，把结果收集到一个提前定义好的list中" class="headerlink" title="2.2. 最常理解的实现是for循环，把结果收集到一个提前定义好的list中"></a>2.2. 最常理解的实现是for循环，把结果收集到一个提前定义好的list中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">a= []</span><br><span class="line"><span class="comment"># 只会这么写，或者next</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    a.append(square(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">b = [square(x) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">map(function, *iterables)</span></span><br><span class="line"><span class="string">对指定序列做映射，返回值是个迭代器，可迭代对象： list，set， tuple</span></span><br><span class="line"><span class="string">map 取代for循环</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<pre><code>a: [4, 16, 36, 64, 25]
b: [4, 16, 36, 64, 25]
</code></pre>
<h3 id="2-3-进阶：-使用map-简化掉for循环以及提前定义list"><a href="#2-3-进阶：-使用map-简化掉for循环以及提前定义list" class="headerlink" title="2.3. 进阶： 使用map 简化掉for循环以及提前定义list"></a>2.3. 进阶： 使用map 简化掉for循环以及提前定义list</h3><mark>
list(map(func, list_))： 等于 for 循环取出 map得到的len(list_)个元素并且append到一个list中；

<ol>
<li>next 可以取出 map迭代器的值；</li>
<li>for 语句等同于 next的效果，挨个取出map迭代器的值；</li>
<li>list(map(func, list_)) 等于 point2 并且append到一个list中；</mark></li>
</ol>
<h4 id="2-3-1-举例-next-效果，更深刻理解list-map-的效果"><a href="#2-3-1-举例-next-效果，更深刻理解list-map-的效果" class="headerlink" title="2.3.1. 举例 next 效果，更深刻理解list(map)的效果"></a>2.3.1. 举例 next 效果，更深刻理解list(map)的效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numbers = [2, 4, 6, 8, 5]</span><br><span class="line">def square(x):</span><br><span class="line">    return x * x</span><br><span class="line"></span><br><span class="line"># type: class map, object</span><br><span class="line">square_num = map(square, numbers)</span><br><span class="line">print(type(square_num))</span><br><span class="line">print(square_num)</span><br><span class="line"># 在list的时候调用了square_num，迭代5次，并且把每次迭代的return 都append进list中。</span><br><span class="line"># 类似于next(square_num)了5次</span><br><span class="line"># 也类似于for循环把每个迭代元素调用一次，得到的值加入到list中。</span><br><span class="line">print(next(square_num))  #4</span><br><span class="line">print(list(square_num))  # 因为上面next已经取走了第一个值，所以list这里只剩下4个值</span><br></pre></td></tr></table></figure>
<pre><code>&lt;class &#39;map&#39;&gt;
&lt;map object at 0x110a75c70&gt;
4
[16, 36, 64, 25] 
</code></pre>
<h4 id="2-3-2-举例-for循环取出值append到list中，用list-map-来取代for循环。"><a href="#2-3-2-举例-for循环取出值append到list中，用list-map-来取代for循环。" class="headerlink" title="2.3.2. 举例 for循环取出值append到list中，用list(map)来取代for循环。"></a>2.3.2. 举例 for循环取出值append到list中，用list(map)来取代for循环。</h4><p><mark><del>其实精简了两次for循环</del> 其实是map+list 两个动作 一起取代了 for循环和list.append</p>
<ol>
<li>numbsers 和 square 用map来一一映射；</li>
<li>list(map) 达到了 一个一个for 并且 append的效果；</li>
<li>啊哈哈哈 意外之喜，理解了另一个写法：b = [square(x) for x in numbers]</mark>
<span id="more"></span></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># type: <span class="keyword">class</span> <span class="built_in">map</span>, <span class="built_in">object</span></span></span><br><span class="line">square_num = <span class="built_in">map</span>(square, numbers)</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> square_num: <span class="comment">#for 也是next的效果,在这一步，迭代器就被调用，返回值赋给了x</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    b.append(x)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;class &#39;int&#39;&gt;
4
&lt;class &#39;int&#39;&gt;
16
&lt;class &#39;int&#39;&gt;
36
&lt;class &#39;int&#39;&gt;
64
&lt;class &#39;int&#39;&gt;
25
[4, 16, 36, 64, 25]
</code></pre>
<h3 id="2-4-map-组合lambda-小复习"><a href="#2-4-map-组合lambda-小复习" class="headerlink" title="2.4. map 组合lambda 小复习"></a>2.4. map 组合lambda 小复习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(square, numbers)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*x, numbers)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>[4, 16, 36, 64, 25]
[4, 16, 36, 64, 25]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line">numbers_2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line">numbers_3 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">return</span> x*y+z</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(add, numbers, numbers_2, numbers_3)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y, z: x*y+z, numbers, numbers_2, numbers_3)))</span><br></pre></td></tr></table></figure>
<pre><code>[6, 20, 42, 72, 30]
[6, 20, 42, 72, 30]
</code></pre>
<h3 id="2-5-map-小应用"><a href="#2-5-map-小应用" class="headerlink" title="2.5. map 小应用"></a>2.5. map 小应用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="3-reduce"><a href="#3-reduce" class="headerlink" title="3. reduce"></a>3. reduce</h2><h3 id="3-1-对参数序列中的元素进行处理，返回一个值。看图理解"><a href="#3-1-对参数序列中的元素进行处理，返回一个值。看图理解" class="headerlink" title="3.1. 对参数序列中的元素进行处理，返回一个值。看图理解"></a>3.1. 对参数序列中的元素进行处理，返回一个值。看图理解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># func函数必须有2个参数， sequence是一个序列， initial指初始值，default=None</span></span><br><span class="line">reduce(function, sequence[, initial])</span><br><span class="line"></span><br><span class="line"><span class="comment">#满足了函数必须有2个参数，满足了序列  但是，怎么计算呢？</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/92494814625291.png"><br><img src="vx_images/92494814625291.png"></p>
<h3 id="3-2-reduce-小应用"><a href="#3-2-reduce-小应用" class="headerlink" title="3.2. reduce 小应用"></a>3.2. reduce 小应用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; def fn(x, y):</span><br><span class="line">...     return x * 10 + y</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])</span><br><span class="line">13579</span><br></pre></td></tr></table></figure>

<h2 id="4-zip"><a href="#4-zip" class="headerlink" title="4. zip"></a>4. zip</h2><p>4 zip(*iterable)</p>
<p>zip的功能是映射多个容器的相似索引，可以方便用于来构造字典</p>
<p>a=[1,2,3,4,5]b=[“a”,”b”,”c”,”d”,”e”]c=dict(zip(b,a))print(c)</p>
<p>执行结果为：</p>
<p>{‘a’: 1, ‘b’: 2, ‘c’: 3, ‘d’: 4, ‘e’: 5}</p>
<h2 id="5-yield"><a href="#5-yield" class="headerlink" title="5. yield"></a>5. yield</h2><h2 id="6-lambda"><a href="#6-lambda" class="headerlink" title="6. lambda"></a>6. lambda</h2><p>6 lambda表达式通常和map，filter，zip，reduce等结合起来一起用非常方便</p>
<p>下面看个例子</p>
<p>a=[1,2,3,4,5,6]print(list(map(lambda x:x*x,a)))</p>
<p>执行结果为：</p>
<p>[1, 4, 9, 16, 25, 36]</p>
<h2 id="7-filter"><a href="#7-filter" class="headerlink" title="7. filter"></a>7. filter</h2><p>滤掉不符合条件的元素，返回值是迭代器</p>
<pre><code>filter(function or None, iterable)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = <span class="built_in">range</span>(-<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(nums))</span><br><span class="line"><span class="comment"># [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list 就等于 用for 遍历并存入list中，从nums中遍历取出每个元素来和None对比，-5是有值，为true，0 是false</span></span><br><span class="line"><span class="comment"># 没看懂，0 是False， 1是true，其他都不是None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, nums)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = <span class="built_in">range</span>(-<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(nums))</span><br><span class="line"><span class="comment"># [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> is not None&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> is None&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> is True&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> is False&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]
-5 is not None
-4 is not None
-3 is not None
-2 is not None
-1 is not None
0 is not None
0 is False
1 is not None
1 is True
2 is not None
3 is not None
4 is not None
5 is not None
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo_filter</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">4</span> != <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拿到 nums 中不能被 4 整除的整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(demo_filter, nums)))  <span class="comment"># 输出：[-5, -3, -2, -1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>multiprocess</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>metadata</title>
    <url>/2023/02/11/metadata/</url>
    <content><![CDATA[<h4 id="ask-Pytest-to-automatically-provision-the-environment"><a href="#ask-Pytest-to-automatically-provision-the-environment" class="headerlink" title="ask Pytest to automatically provision the environment"></a>ask Pytest to automatically provision the environment</h4><p><code>pytest --provision</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ali1@remotedev-ali1-rdu:~$ pytest --provision</span><br><span class="line">logdir &#x27;log/helix&#x27; does not exist; fallback to &#x27;/ifs/home/ali1/.cache/helix/log&#x27;</span><br><span class="line">============================================================================== test session starts ===============================================================================</span><br><span class="line">platform linux -- Python 3.6.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1</span><br><span class="line">rootdir: /ifs/home/ali1</span><br><span class="line">plugins: timeout-1.4.2, helix-3.0.25, isilon-marks-0.3.3, isilon-accountant-0.4.2</span><br><span class="line">collected 0 items / 1 error</span><br><span class="line">Password:</span><br><span class="line">[2022-12-14 11:11:32.605863+00:00] QUEUED_FOR_ALLOCATION... waiting 30 seconds</span><br><span class="line">[2022-12-14 11:12:02.887701+00:00] QUEUED_FOR_ALLOCATION... waiting 30 seconds</span><br><span class="line">[2022-12-14 11:12:33.175448+00:00] READY</span><br><span class="line">[2022-12-14 11:12:33.499574+00:00] QUEUED_FOR_DELETION... waiting 30 seconds</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>metadata</tag>
      </tags>
  </entry>
  <entry>
    <title>Multiprocess_2 concurrent</title>
    <url>/2023/04/11/multiprocess_concurrent/</url>
    <content><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p><mark>1. time.perf_counter()  程序运行时间包括sleeping</mark>, 不用再 time.time()-starttime了。<br>2. time.process_counter() cpu运行时间，不包括sleeping<br><mark>3. concurrent.futures: 两个process 并行运行 </mark><br>4. 注意 python3.7以上才能打印出秒数<br>5. 注意不要用和包名相同的文件名<br><mark>6. Pool.map 可以取代 map(func, list)</mark></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_for_a_bit</span>(<span class="params">secondes</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Sleeping <span class="subst">&#123;secondes&#125;</span> second(s)&quot;</span>)</span><br><span class="line">    time.sleep(secondes)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Done sleeping&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        f1 = executor.submit(sleep_for_a_bit, <span class="number">1</span>)</span><br><span class="line">        f2 = executor.submit(sleep_for_a_bit, <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(f1.result())</span><br><span class="line">        <span class="built_in">print</span>(f2.result())</span><br><span class="line">        </span><br><span class="line">finish = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished in time: &quot;</span>, finish)</span><br></pre></td></tr></table></figure>

<pre><code>~/Desktop 🔥» python ccc.py                                      vivi@vivis-MBP
Finished in time:  0.103320167
Finished in time:  0.100869
Sleeping 1 second(s)
Sleeping 1 second(s)
Finished in time:  0.099204041
Finished in time:  0.095198
Finished in time:  0.077157417
Finished in time:  0.084327958
Finished in time:  0.080791833
Finished in time:  0.084751625
Done sleeping
Done sleeping
Finished in time:  1.282027666
</code></pre>
<h2 id="Pool-map-func-list-来取代-list-map-func-list"><a href="#Pool-map-func-list-来取代-list-map-func-list" class="headerlink" title="Pool.map(func, list) 来取代 list(map(func, list))"></a>Pool.map(func, list) 来取代 list(map(func, list))</h2><ol>
<li>但是看上去没发现节省时间</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">map</span>(req_get, create_list.keys()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_get</span>():</span><br><span class="line">    <span class="keyword">with</span> Pool(core_num) <span class="keyword">as</span> p:</span><br><span class="line">        x = p.<span class="built_in">map</span>(req_get, create_list.keys())</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>If x equals get_list:369,  369
[2023-04-11 14:08:28] [Line: 184] INFO - Total running time: 53.477982
[2023-04-11 14:08:28] [Line: 185] INFO - Create clients number:369
[2023-04-11 14:08:28] [Line: 186] INFO - Get clients number: 369
[2023-04-11 14:08:28] [Line: 187] ERROR - Create clients fail number: 0
[2023-04-11 14:08:28] [Line: 188] ERROR - Create clients fail information: []
369
369
369
369
</code></pre>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
        <tag>multiprocess</tag>
      </tags>
  </entry>
  <entry>
    <title>Multiprocess_1 tasks</title>
    <url>/2023/04/01/multiprotocol/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">core_num = multiprocessing.cpu_count()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;corenum: <span class="subst">&#123;core_num&#125;</span>&quot;</span>)</span><br><span class="line">clients = [<span class="string">&quot;eb380adf-8fe8-45dd-825f-4e7da940eca9&quot;</span>,<span class="string">&quot;990f5d3c-5e5f-4af8-b68b-1329272ac3b4&quot;</span>,</span><br><span class="line">           <span class="string">&quot;15cc0813-8a2e-4a90-9ba6-7a8ddf3bd32d&quot;</span>,<span class="string">&quot;5bf8729e-fb28-476e-b054-5a0656dc4fed&quot;</span>,</span><br><span class="line">           <span class="string">&quot;27a1e6bb-439b-475e-bbcf-9744622992cd&quot;</span>,<span class="string">&quot;6491b68c-5360-4638-8194-da9f5431c4eb&quot;</span>,</span><br><span class="line">           <span class="string">&quot;da2fd513-acdc-48e9-b9fe-c0de13e90eb0&quot;</span>,<span class="string">&quot;f75d48b0-74ab-4d96-b8a7-4357985e78bc&quot;</span>,</span><br><span class="line">           <span class="string">&quot;d76c8dbe-0821-4736-a4fa-9b60dc331fec&quot;</span>,<span class="string">&quot;354f9ef4-1481-469a-9e6a-9cef076b4ac0&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将clients_list 按core_num 随机分布client数量，这里core=4，</span></span><br><span class="line"><span class="string">那么会将 clients 分成四组，for 循环每次调用 chunks，都取一组给 for clients_，</span></span><br><span class="line"><span class="string">然后 for clients_ 可以拿去做事。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chunks</span>(<span class="params">clients_list, num</span>):</span><br><span class="line">    d, r = <span class="built_in">divmod</span>(<span class="built_in">len</span>(clients_list), num)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;d and r: <span class="subst">&#123;d&#125;</span>, <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        si = (d + <span class="number">1</span>) * (i <span class="keyword">if</span> i &lt; r <span class="keyword">else</span> r) + d * (<span class="number">0</span> <span class="keyword">if</span> i &lt; r <span class="keyword">else</span> i - r)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;si: <span class="subst">&#123;si&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span> clients_list[si:si + (d + <span class="number">1</span> <span class="keyword">if</span> i &lt; r <span class="keyword">else</span> d)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clients_ <span class="keyword">in</span> chunks(clients, core_num):</span><br><span class="line">    <span class="keyword">from</span> pdb <span class="keyword">import</span> set_trace</span><br><span class="line">    set_trace()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;clients_: <span class="subst">&#123;clients_&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;chunks: <span class="subst">&#123;chunks&#125;</span>&quot;</span>)</span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">```bash</span><br><span class="line"></span><br><span class="line">    corenum: <span class="number">8</span></span><br><span class="line">    d <span class="keyword">and</span> r: <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    si: <span class="number">0</span></span><br><span class="line">    ipdb&gt; l</span><br><span class="line">    ipdb&gt; clients_</span><br><span class="line">    [<span class="string">&#x27;eb380adf-8fe8-45dd-825f-4e7da940eca9&#x27;</span>, <span class="string">&#x27;990f5d3c-5e5f-4af8-b68b-1329272ac3b4&#x27;</span>]</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    clients_: [<span class="string">&#x27;eb380adf-8fe8-45dd-825f-4e7da940eca9&#x27;</span>, <span class="string">&#x27;990f5d3c-5e5f-4af8-b68b-1329272ac3b4&#x27;</span>]</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    chunks: &lt;function chunks at <span class="number">0x10c2f6310</span>&gt;</span><br><span class="line">    ipdb&gt; s</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; i</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    si: <span class="number">2</span></span><br><span class="line">    ipdb&gt; si=<span class="number">2</span>,  i1&lt;r2所以返回d+<span class="number">1</span>=<span class="number">3</span>, 也就是返回clients_list[<span class="number">2</span>:<span class="number">2</span>+<span class="number">3</span>],即第<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>个元素]</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    &gt; [<span class="number">0</span>;32m&lt;ipython-<span class="built_in">input</span>-<span class="number">1</span>-fca5ddbf22de&gt;[0m(<span class="number">30</span>)[<span class="number">0</span>;36m&lt;module&gt;[<span class="number">0</span>;34m()[0m</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    clients_: [<span class="string">&#x27;15cc0813-8a2e-4a90-9ba6-7a8ddf3bd32d&#x27;</span>, <span class="string">&#x27;5bf8729e-fb28-476e-b054-5a0656dc4fed&#x27;</span>]</span><br><span class="line">    ipdb&gt; s</span><br><span class="line">     ipdb&gt; n</span><br><span class="line">    si: <span class="number">4</span></span><br><span class="line"> </span><br><span class="line">    ipdb&gt; i</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    ipdb&gt; si=<span class="number">4</span>, i=<span class="number">2</span>不小于r=<span class="number">2</span>,于是返回d，[<span class="number">4</span>,<span class="number">6</span>] 第<span class="number">5</span>，<span class="number">6</span>个元素</span><br><span class="line">    *** SyntaxError: cannot assign to literal</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    clients_: [<span class="string">&#x27;27a1e6bb-439b-475e-bbcf-9744622992cd&#x27;</span>]   </span><br><span class="line">    ipdb&gt; 哦 上一步应该是[<span class="number">4</span>,<span class="number">5</span>] d=<span class="number">1</span>记错了</span><br><span class="line">    *** SyntaxError: invalid syntax</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    chunks: &lt;function chunks at <span class="number">0x10c2f6310</span>&gt;</span><br><span class="line">    ipdb&gt; s</span><br><span class="line">    --Call--</span><br><span class="line">    &gt; [<span class="number">0</span>;32m&lt;ipython-<span class="built_in">input</span>-<span class="number">1</span>-fca5ddbf22de&gt;[0m(<span class="number">25</span>)[<span class="number">0</span>;36mchunks[<span class="number">0</span>;34m()[0m</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    si: <span class="number">5</span></span><br><span class="line">    &gt; [<span class="number">0</span>;32m&lt;ipython-<span class="built_in">input</span>-<span class="number">1</span>-fca5ddbf22de&gt;[0m(<span class="number">25</span>)[<span class="number">0</span>;36mchunks[<span class="number">0</span>;34m()[0m</span><br><span class="line">    ipdb&gt; i</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    ipdb&gt; d</span><br><span class="line">    *** Newest frame</span><br><span class="line">    ipdb&gt; si=<span class="number">5</span>, 返回 <span class="number">5</span>+<span class="number">1</span>，也就是[<span class="number">5</span>,<span class="number">6</span>] 一个元素</span><br><span class="line">    *** SyntaxError: invalid syntax</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    clients_: [<span class="string">&#x27;6491b68c-5360-4638-8194-da9f5431c4eb&#x27;</span>]</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    chunks: &lt;function chunks at <span class="number">0x10c2f6310</span>&gt;</span><br><span class="line">    ipdb&gt; s</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    si: <span class="number">6</span></span><br><span class="line">    ipdb&gt; i</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    ipdb&gt; [<span class="number">6</span>:<span class="number">6</span>+<span class="number">1</span>]</span><br><span class="line">    *** SyntaxError: invalid syntax</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    clients_: [<span class="string">&#x27;da2fd513-acdc-48e9-b9fe-c0de13e90eb0&#x27;</span>]</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    chunks: &lt;function chunks at <span class="number">0x10c2f6310</span>&gt;</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    si: <span class="number">7</span></span><br><span class="line">    ipdb&gt; [<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    chunks: &lt;function chunks at <span class="number">0x10c2f6310</span>&gt;</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    si: <span class="number">8</span></span><br><span class="line">    ipdb&gt; [<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">    [<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    clients_: [<span class="string">&#x27;d76c8dbe-0821-4736-a4fa-9b60dc331fec&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">    [0m</span><br><span class="line">    ipdb&gt; [<span class="number">9</span>,<span class="number">10</span>] 到这一步就结束啦</span><br><span class="line">    *** SyntaxError: invalid syntax</span><br><span class="line">    ipdb&gt; n</span><br><span class="line">    clients_: [<span class="string">&#x27;354f9ef4-1481-469a-9e6a-9cef076b4ac0&#x27;</span>]</span><br><span class="line">    ipdb&gt; 分给了<span class="number">8</span>个进程，第一个进程有<span class="number">3</span>个client要执行，另外<span class="number">7</span>个进程每个执行一个client</span><br><span class="line">    *** SyntaxError: invalid character <span class="string">&#x27;，&#x27;</span> (U+FF0C)</span><br><span class="line">    ipdb&gt; n</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
        <tag>multiprocess</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL</title>
    <url>/2023/03/12/openssl/</url>
    <content><![CDATA[<h1 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h1><p>在SSL/TLS/HTTPS通信中，证书虽然不是TLS/SSL协议的一部分，却是HTTPS非常关键的一环，网站引入证书才能避免中间人攻击。证书涉及了很多密码学知识，理解证书后，再深入理解TLS/SSL协议，效果会更好。</p>
<p>啥是TLS？？？Mutual TLS (mTLS) certificate authentication 双向证书认证</p>
<p>OpenSSL 是一个安全套接字层密码库，囊括主要的密码算法、常用密钥、证书封装管理功能及实现ssl协议。<br>OpenSSL整个软件包大概可以分成三个主要的功能部分：</p>
<ol>
<li>SSL协议库libssl</li>
<li>应用程序命令工具</li>
<li>密码算法库libcrypto</li>
</ol>
<p>.KEY 私钥。</p>
<p><strong>.CSR</strong> 是 Certificate Signing Request 的缩写，即证书签名请求，这不是证书，只是包含申请证书的基本信息。生成证书时要把这个提交给权威的证书颁发机构，颁发机构审核通过之后，再根据这些申请信息生成相应的证书。</p>
<p>.CRT 即 certificate的缩写，即证书。</p>
<p><strong>X.509</strong> 定义公钥证书格式， structure， 不同的密钥有不同的结构体。</p>
<blockquote>
<p>X.509的证书文件，一般以.crt结尾，根据该文件的内容编码格式，可以分为以下二种格式：</p>
</blockquote>
<blockquote>
<p>.PEM - Privacy Enhanced Mail，以base64编码，将二进制文件转为文本，打开看文本格式，以”—–BEGIN…“开头，”—–END…”结尾，Apache 和 *NIX 服务器偏向于使用这种编码格式。</p>
</blockquote>
<blockquote>
<p>.DER - Distinguished Encoding Rules，是二进制格式，不可读。Java 和 Windows 服务器偏向于使用这种编码格式。</p>
</blockquote>
<h2 id="1-自签证书，-CA、证书链、证书的撤销-CRLs证书吊销列表-certificate-revocation-lists"><a href="#1-自签证书，-CA、证书链、证书的撤销-CRLs证书吊销列表-certificate-revocation-lists" class="headerlink" title="1. 自签证书， CA、证书链、证书的撤销 CRLs证书吊销列表: certificate revocation lists"></a>1. 自签证书， CA、证书链、证书的撤销 CRLs证书吊销列表: certificate revocation lists</h2><h3 id="1-1-For-instances"><a href="#1-1-For-instances" class="headerlink" title="1.1. For instances:"></a>1.1. For instances:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out server.key 2048  <span class="comment"># 先生成一个私钥                 </span></span><br><span class="line">openssl req -new -key server.key -out server.csr <span class="comment"># 用这个私钥加密证书请求信息，生成一个证书请求</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -out server.crt -signkey server.key -days 3650 <span class="comment"># 用证书请求 和 私钥自签名来申请一个x509公钥</span></span><br><span class="line"><span class="comment"># 用x509公钥 和 私钥自签名来发请求</span></span><br><span class="line">python3 manage.py runserver_plus --cert-file ./server.crt --key-file ./server.key 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>Generate Root CA</span></figcaption><table><tr><td class="code"><pre><span class="line">openssl genrsa -out private/ca.key 2048 <span class="comment">#先生成一个私钥</span></span><br><span class="line"></span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># openssl genrsa -out private/ca.key 2048</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">.....................+++++</span><br><span class="line">.............+++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># cat private/ca.key</span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpAIBAAKCAQEArPbCOb9to</span><br><span class="line">……</span><br><span class="line">XfJxLjmrJIxzlAn5/3OI9sAuZW0ZQu3VhpMXow/d/IN4T3i5UNOjdA==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用私钥自签，生成一个x509 的 公钥CA</span></span><br><span class="line">openssl req -new -x509 -days 365 -key private/ca.key -out certs/ca.pem -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=Dell/OU=Dell/CN=west.isilon.com&quot;</span> -extensions v3_ca -config openssl.cnf</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── certs</span><br><span class="line">│   └── ca.pem</span><br><span class="line">├── crl</span><br><span class="line">├── csr</span><br><span class="line">├── index.txt</span><br><span class="line">├── index.txt.attr</span><br><span class="line">├── intermediate</span><br><span class="line">├── openssl.cnf</span><br><span class="line">├── private</span><br><span class="line">│   └── ca.key</span><br><span class="line">└── serial</span><br><span class="line">5 directories, 6 files</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># cat certs/ca.pem</span></span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIID0DCCArigAwIBAgIUNq7/2QHSt6dhvy5XVEIlx2bqJ1AwDQYJKoZIhvcNAQEL</span><br><span class="line">dR2qFJjutlz/ExPDqhRMzSGzsMH47uH2j/rEsIW+4K0vU6G9HIIWpa4xoET+TQJI</span><br><span class="line">p5DKgza5t0QBuULe9YTMJTlHl2E=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># newkey:生成一个证书请求，加一个私钥，-nodes:不加密私钥，生成server certificate and use CA to issue it </span></span><br><span class="line">openssl req -new -newkey rsa:2048 -nodes -out csr/server.csr -keyout private/server.key -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=Dell/OU=Dell/CN=ciam.west.isilon.com&quot;</span>  -config openssl.cnf -extensions v3_server</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># openssl req -new -newkey rsa:2048 -nodes -out csr/server.csr -keyout private/server.key -subj &quot;/C=CN/ST=Shanghai/L=Shanghai/O=Dell/OU=Dell/CN=ciam.west.isilon.com&quot;  -config openssl.cnf -extensions v3_server</span></span><br><span class="line">Generating a RSA private key</span><br><span class="line">............................+++++</span><br><span class="line">..................................................+++++</span><br><span class="line">writing new private key to <span class="string">&#x27;private/server.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── certs</span><br><span class="line">│   └── ca.pem</span><br><span class="line">├── crl</span><br><span class="line">├── csr</span><br><span class="line">│   └── server.csr</span><br><span class="line">├── index.txt</span><br><span class="line">├── index.txt.attr</span><br><span class="line">├── intermediate</span><br><span class="line">├── openssl.cnf</span><br><span class="line">├── private</span><br><span class="line">│   ├── ca.key</span><br><span class="line">│   └── server.key</span><br><span class="line">└── serial</span><br><span class="line"></span><br><span class="line">5 directories, 8 files</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># cat csr/server.csr</span></span><br><span class="line">-----BEGIN CERTIFICATE REQUEST-----</span><br><span class="line">MIIDJjCCAg4CAQAwcDELMAkGA1UEBhMCQ04xETAPBgNVBAgMCFNoYW5naGFpMREw</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># cat private/server.key</span></span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDpCNWLNTNCFf0K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ca:可以sign certificate req， 签名证书请求， 并且生成 CRLs证书吊销列表: certificate revocation lists</span></span><br><span class="line"><span class="comment"># batch: 所有证书will be certified automatically.  notext:不要把证书文本形式输出到文件，意思是二进制？</span></span><br><span class="line"><span class="comment"># extensions: default x509, 如果没有extension section，那么输出V1 certificate，否则输出V3 certificate.x509v3.cnf</span></span><br><span class="line">openssl ca -batch -notext -<span class="keyword">in</span> csr/server.csr -out certs/server.pem -config openssl.cnf -extensions v3_server</span><br><span class="line">CIAM-ali1:~/certification <span class="comment"># openssl ca -batch -notext -in csr/server.csr -out certs/server.pem -config openssl.cnf -extensions v3_server</span></span><br><span class="line">Using configuration from openssl.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject<span class="string">&#x27;s Distinguished Name is as follows</span></span><br><span class="line"><span class="string">countryName           :PRINTABLE:&#x27;</span>CN<span class="string">&#x27;</span></span><br><span class="line"><span class="string">stateOrProvinceName   :ASN.1 12:&#x27;</span>Shanghai<span class="string">&#x27;</span></span><br><span class="line"><span class="string">localityName          :ASN.1 12:&#x27;</span>Shanghai<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationName      :ASN.1 12:&#x27;</span>Dell<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationalUnitName:ASN.1 12:&#x27;</span>Dell<span class="string">&#x27;</span></span><br><span class="line"><span class="string">commonName            :ASN.1 12:&#x27;</span>ciam.west.isilon.com<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Certificate is to be certified until Mar 24 15:11:50 2024 GMT (365 days)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Write out database with 1 new entries</span></span><br><span class="line"><span class="string">Data Base Updated</span></span><br><span class="line"><span class="string">CIAM-ali1:~/certification # tree</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├── certs</span></span><br><span class="line"><span class="string">│   ├── 1000.pem</span></span><br><span class="line"><span class="string">│   ├── ca.pem</span></span><br><span class="line"><span class="string">│   └── server.pem</span></span><br><span class="line"><span class="string">├── crl</span></span><br><span class="line"><span class="string">├── csr</span></span><br><span class="line"><span class="string">│   └── server.csr</span></span><br><span class="line"><span class="string">├── index.txt</span></span><br><span class="line"><span class="string">├── index.txt.attr</span></span><br><span class="line"><span class="string">├── index.txt.attr.old</span></span><br><span class="line"><span class="string">├── index.txt.old</span></span><br><span class="line"><span class="string">├── intermediate</span></span><br><span class="line"><span class="string">├── openssl.cnf</span></span><br><span class="line"><span class="string">├── private</span></span><br><span class="line"><span class="string">│   ├── ca.key</span></span><br><span class="line"><span class="string">│   └── server.key</span></span><br><span class="line"><span class="string">├── serial</span></span><br><span class="line"><span class="string">└── serial.old</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 directories, 13 files</span></span><br><span class="line"><span class="string">CIAM-ali1:~/certification # cat certs/server.pem</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="string">MIIDpjCCAo6gAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwazELMAkGA1UEBhMCQ04x</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-1-字段解释"><a href="#1-1-1-字段解释" class="headerlink" title="1.1.1. 字段解释"></a>1.1.1. 字段解释</h4><p><mark>openssl genrsa -out ca.key 2048</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genrsa:  生成RSA加密的私钥。 generates an RSA private key, <span class="built_in">which</span> essentially involves the generation of two prime numbers.</span><br><span class="line">  -out: The output file to write to</span><br><span class="line">  numbits: the size of the private key to generate <span class="keyword">in</span> bits, default:2048</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">不加密的RSA私钥。</span><br><span class="line">openssl genrsa -out ca.key 2048</span><br><span class="line"></span><br><span class="line">加密的RSA私钥。</span><br><span class="line">openssl genrsa -des3 -out ca.key 2048</span><br><span class="line"></span><br><span class="line">指定随机数创建RSA私钥。</span><br><span class="line">openssl genrsa -des3 -out ca.key 2048 -seed abc</span><br><span class="line">openssl genrsa -des3 -out ca.key 2048 -rand file:hello.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><mark>openssl req -new -key server.key -out server.csr</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">req: 创建和处理PKCS\<span class="comment">#10格式的证书请求。 creates and processes certificate requests in PKCS#10 format</span></span><br><span class="line">     还可以添加额外信息来创建自签名CA证书。  也就是拿私钥签名之后当做 CA。上一步已经创建了私钥。可以拿私钥来创CA。</span><br><span class="line">-new -key： 生成一个新的 certificate req， 如果不指定-key, 那么就读取configfile中的配置项。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PKCS\<span class="comment">#10: 证书请求文件，类似于CSR文件，一般是一个base64文件。</span></span><br><span class="line">          是一段可以向CA申请证书的P10请求。</span><br><span class="line">          该请求一般是通过硬件生成密钥对后，将私钥单独存放，但是将公钥放入p10中，</span><br><span class="line">          CA受到该p10请求后，可以校验，并根据p10中的信息制作一张没有私钥的公钥证书。</span><br><span class="line">意思是PKCS10 --&gt; 本地会有一对公私钥  --&gt; CA 拿到P10带来的公钥 --&gt; CA generate --&gt; 一张没有私钥的公钥。</span><br><span class="line">            </span><br></pre></td></tr></table></figure>

<p><mark>openssl req -new -x509 -days 365 -key private/ca.key -out certs/ca.pem -subj “/C=CN/ST=Shanghai/L=Shanghai/O=Dell/OU=Dell/CN=west.isilon.com” -extensions v3_ca -config openssl.cnf</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用原有的RSA密钥生成证书请求文件，指定-batch选项，不询问申请者的信息。主体信息由命令行subj指定，且输出公钥</span><br><span class="line">-config openssl.cnf</span><br><span class="line">-days  默认30天，与-x509一起使用</span><br><span class="line">-extensions 指定可选sections 从configfile中， 与-x509一起使用</span><br><span class="line">-subj Replaces the subject field of an input request, /type0=value0/type1=value1/type2=</span><br><span class="line">-x509  输出自签名证书，而不是证书请求， 在这里就是CA。</span><br><span class="line"><span class="comment">#This is typically used to generate a test certificate or a self-signed root CA.</span></span><br></pre></td></tr></table></figure>




<p><mark>openssl x509 -req -in server.csr -out server.crt -signkey server.key -days 3650</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x509: 是个公钥证书，主要有个sign certificate requests like a mini CA</span><br><span class="line">-req: 期望有个证书请求csr（而不是证书本身）在input中，</span><br><span class="line">-signkey: 使用提供的私钥对文件进行自签名</span><br></pre></td></tr></table></figure>




<ol>
<li>Create a Certificate Authority private key (this is your most important key):</li>
</ol>
<p><code>openssl req -new -newkey rsa:1024 -nodes -out ca.csr -keyout ca.key</code></p>
<ol start="2">
<li>Create your CA self-signed certificate:</li>
</ol>
<p><code>openssl x509 -trustout -signkey ca.key -days 365 -req -in ca.csr -out ca.pem</code></p>
<ol start="3">
<li>Issue a client certificate by first generating the key, then request (or use one provided by external system) then sign the certificate using private key of your CA:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out client.key 1024</span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line">openssl ca -in client.csr -out client.cer</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="1-1-2-Manually-stopping-Pacific-keycloak"><a href="#1-1-2-Manually-stopping-Pacific-keycloak" class="headerlink" title="1.1.2. Manually stopping Pacific keycloak"></a>1.1.2. Manually stopping Pacific keycloak</h4><p><code>ps -ef | grep &quot;/opt/keycloak&quot; | awk &#39;&#123;print $2&#125;&#39; | xargs kill</code></p>
<h3 id="1-2-了解CA，-root-CA，-以及自签名，CA签名"><a href="#1-2-了解CA，-root-CA，-以及自签名，CA签名" class="headerlink" title="1.2. 了解CA， root CA， 以及自签名，CA签名"></a>1.2. 了解CA， root CA， 以及自签名，CA签名</h3><p>只有root 是自签名，其他都是CA签名<br>ROOT证书是用来签发和验证CA证书的，防止在不知道签名者私钥的情况下恶意篡改证书的内容<br>Root CA -&gt; Server CA -&gt; Server(最终用户)</p>
<p><mark>其实就是一个使用私钥签发（issue）的关系。</mark></p>
<ol>
<li><pre><code> ROOT 证书
</code></pre>
</li>
<li><pre><code>               的私钥
</code></pre>
</li>
<li><pre><code>                       签发   `用私钥加过密的sign签名`, `签名算法，通常是Sha256WithHash`
</code></pre>
</li>
<li><pre><code>                            CA 证书
</code></pre>
</li>
<li><pre><code>                                      签发
</code></pre>
</li>
<li><pre><code>                                            x.509证书（公钥证书), 以.cert, .crt后缀，是ASN.1编码 Abstract syntax notation dot one 抽象语法标记
</code></pre>
<blockquote>
<p>秘钥和证书都是 SEQUENCE 类型，<br>而 SEQUENCE 的 type 是 0x30，且长度是大于 127 的，因此第2 个字节是 0x82.<br>ASN.1 编码表示的数据是二进制数据，通常通过 BASE64 转化成字符串保存在 pem 文件中，<br>而 0x3082 经过 BASE64 编码后，就是字符串 MI，<mark>因此所有 PEM 文件存储的秘钥开始的前两个字符是 MI</mark>。</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkcs<span class="comment">#1 用于定义 RSA 公钥、私钥结构</span></span><br><span class="line">pkcs<span class="comment">#7 用于定义证书链</span></span><br><span class="line">pkcs<span class="comment">#8 用于定义任何算法公私钥</span></span><br><span class="line">pkcs<span class="comment">#12 用于定义私钥证书</span></span><br><span class="line">X.509 定义公钥证书</span><br></pre></td></tr></table></figure>


<p><img src="/uploads/69094374817016.png"><br><img src="vx_images/69094374817016.png"></p>
<h4 id="1-2-1-看个keytool生成证书的范例"><a href="#1-2-1-看个keytool生成证书的范例" class="headerlink" title="1.2.1. 看个keytool生成证书的范例"></a>1.2.1. 看个keytool生成证书的范例</h4><p><code>keytool -genkeypair -storepass password -storetype PKCS12 -keyalg RSA -keysize 2048 -dname &quot;CN=server&quot; -alias server -ext &quot;SAN:c=DNS:localhost,IP:127.0.0.1&quot; -keystore conf/server.keystore</code></p>
<p>-genkeypair  生成密钥对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Generates a key pair (a public key and associated private key).</span><br><span class="line">              Wraps the public key into an X.509 v3 self-signed certificate,</span><br><span class="line">              which is stored as a single-element certificate chain. This</span><br><span class="line">              certificate chain and the private key are stored in a new</span><br><span class="line">              keystore entry identified by alias.</span><br></pre></td></tr></table></figure>
<p>-storepass 更改密钥库的存储口令,<br>-storetype   PKCS12 私钥证书<br>-keyalg      RSA, DSA, EC, DES, DESede<br>-keysize<br>-dname</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The dname value specifies the X.500 Distinguished Name to be</span><br><span class="line">    associated with the value of alias, and is used as the issuer</span><br><span class="line">    and subject fields in the self-signed certificate. If no</span><br><span class="line">    distinguished name is provided at the command line, then the</span><br><span class="line">    user is prompted for one.</span><br></pre></td></tr></table></figure>
<p>-ext<br>-keystore<br>-validity<br>-keypass</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SAN or SubjectAlternativeName</span><br><span class="line">            Values: type:value(,type:value)*, where type can be EMAIL, URI,</span><br><span class="line">            DNS, IP, or OID. The value argument is the string format value</span><br><span class="line">            for the type.</span><br></pre></td></tr></table></figure>


<h2 id="2-genkeypair-keyalg-keysize"><a href="#2-genkeypair-keyalg-keysize" class="headerlink" title="2. genkeypair keyalg keysize"></a>2. genkeypair keyalg keysize</h2><p>OpenSSL一共实现了4种非对称加密算法，<br>DH算法一般用户密钥交换。RSA 算法既可以用于密钥交换，也可以用于数字签名，DSA算法则一般只用于数字签名<br>DH、<br>RSA、<br>DSA<br>椭圆曲线算法（EC）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-genkeypair 生成密钥对      -keyalg算法   RSA             -keysize   2048  </span><br><span class="line">                                         DSA                        1024 </span><br><span class="line">                                         EC                         256</span><br><span class="line">-genseckey 生成密钥          -keyalg      DES                        56   </span><br><span class="line">                                         DESede                     168</span><br></pre></td></tr></table></figure>

<h5 id="2-1-1-1-ROOT证书"><a href="#2-1-1-1-ROOT证书" class="headerlink" title="2.1.1.1. ROOT证书"></a>2.1.1.1. ROOT证书</h5><h5 id="2-1-1-2-CA证书和"><a href="#2-1-1-2-CA证书和" class="headerlink" title="2.1.1.2. CA证书和"></a>2.1.1.2. CA证书和</h5><h5 id="2-1-1-3-使用CA证签发的X-509证书"><a href="#2-1-1-3-使用CA证签发的X-509证书" class="headerlink" title="2.1.1.3. 使用CA证签发的X.509证书"></a>2.1.1.3. 使用CA证签发的X.509证书</h5>]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL2 self-signed certificate as root CA</title>
    <url>/2023/03/28/openssl_2_signed/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="73bec038692fd1086ea53e7f2bbcfc8a0d5efb93c08e7013fbcbcd7542f6e54e">f0973bc58b53032b4f8dd3ae603493b7939b2fdbb1560e7d28b34a3151adb1a713f18cf603c7562b18d634bf7c38f6d6f7b57038e641a5fde458cc79ef200f70e3d214da3c0900bdad64db14ce54c471f4cc282d366020c39dab91ea6b75e338005f353fe7bf6977360f601b1dc19c671c7be9fb737ea7e2f12980aecf1b221b819f822fbeb71b2d37fb65af901b3b87944d8698532574cccb75d229180e5744fc1769a197cf33dbbd6a9f2e9782712da88d679c4e501b2e5eaa92d7814ff9e94935bd0ea20e2718afd77948dacc2d416a2b412facb4c21f46419cc8c659669c241c6b45029f445e8050f6fa52e222825078242bef386f36b62b5dc2c8b928e1996537f73d8659c97c131f1cb27e73d02970ce1c09fb10ff177df4b5ada2074c529c8dbd855f420d790d11f556483488c6e8c7ddaad8cd88a050f760838f8d05459314c262c1195445e5f5233e6a07310ef88dea4a6a149a7c45e4b410ec81b1833a631259e9d96d8b252ddb9ab63f8451f2ca9919e8f48e8b27e859763e33a2eb85c3526cdabfb8bb0f79d32bfbf39f1cadc017597239fde22d16bdc0d19277724c07babc78d9eceadfc504500458c3e5a8c49b197d24ed961f1854d0affdd86f57cf5a1d0cd600031d2af7d18a8969486867415de30dba7b7af0ff16b941bf8adb153522b5531c6a04bb8ece376ab4dc2b041bdd783506f26be9130b9a0db0f04c6cd16e992d6bdb1cb5edc5c6e41a7f7639ffd2fc4ffbc3d49a91d41b4ffae6545d77e8f392650d6bedabfa6d6c0393f36266670a8fde886c25c9576ecc21588bb24649a170baac8dd5b90292aa622a1a332d3b62d8abae34c7637df60267268d4961cb8e2f8537455b221052e1838a5be28a7a58368a0901f28647b5a510904be0c2339d269a13ff197a8d18ddb4a3b60b3b4b1f19e1726928540ba763842560d7e4a9a10e1ce95f5250b27d652a7c6210f0905b4ef1913bcf36600efbd66ecf0ba62dc3aedec827e357b2d30c571a6e5180b779ca9fecb35de2fbad125ab347fe6ac67804fc9b88ca57776c673c8026fd3fe18bca00361f04ceab9faa22cbba6e4e244b2cd14edd40322530abd164d6201222aaf9ff0b97b02be3a7748868ae34cd335153b541dcb3bde557f1e7018bfd8844d3b7b9f5e19cbfffa4f104f1204920cd9e885b78b57f07593d47a37baab59edbb6ac50d4554af852996aabbb2725c3bca20701b37b0d2f337d528c6dc6e615d3759d5ca3d5a6ad88a9a5220a1821b9ca75996a368d7dbbe1ded2e649d1097b2cf70214f3484cd2d242dfdb012afbeb60436f322f23b5d529da07c7184768a69e40c6f3badaa3bff8934556309c6eb9b2a96fd446c64cc46ea1e61e18ca6f739815a86ad78ceedaf337aa5e301ae9c9b40e2f770e6c5dc7e40c08f88aef9f76258496333e883f19bb0f86033563874dee1e81a2263f0a0763a5bb944fa3c23005c89e9505bc6eb45cd80907ced109d1b312ba3837eb432d033415f4465b5aac2c475fa37b91c08a820ce1f30bd9e36456b86e6bcddcd8e0bd44dcdde1303f00fb374faaac3ec4c151ac46de5bf19e347966bba22e94cfc21d70a2a3b32cca63caaa84dbae7efa31e7a1326bd755efbf287e9c9d9834634ce650f4be20e14a5bce5126c78ed38ed56e11def0424aa2d7589cc669c431a825f148078ae86657c6c93dd4523570414733d0ad8f7b08f6cd611f4aebf53db69a81249064058141d53cf6e95ab0b00c9c233b98861a4e5c1dbd9fb2e9e221fca0fee465d45f25cbde304a1c0cc21f4fb010e2465596ca3dcec4d4dd0db45bff37b12fcbbda80412051cbf31958f5b970615fd2cb6e0cdc15726a50e03d61873fb1b7aacaf1c1ebb874e61af3e57553b0ea4804122f869f2d0b73e333c1d15638bd9f4b93a5a35999a24c77050cbbd1e4d46e5936b47f9c830b3b87a6ec92b2cf6d2ea9fcad34093afd28ec3e2318e9e1e354468840714e6b9b7e3a736bd6d587d1e0c48e89cce0a9946814b5a59fee256b2981726dc672183b88c7e5fec03f9e0764011014b9246cd49a8310ccadc9b11a23742bbe3cc2acaeb89c0368a694c83e1dc0e1e914ba5cdb99887e5c163ad073c06f8185950d23562ad9616ae17984572bd6774ea73677e1e3da8ace14ced43dd0f61044c3716b354bb7653925c8013e72133f7841cceef2b6b28298fd3d63c75aef0c588f9821cdb3a470b1f99644b852526a4386cc9645aff9b280f10f888ba42212e6979e1fda80ec9bf45aa785a40a7ffff5d1dce1181fcf12d458f61fb9d14747b97306418c991c0d2f3506942c6ffc0b12f46ed7028033a4e788a3ffa47bd667d8c0d0f41a8e5a97b63c052606349ffd0772e35a96d1ac0960249cb0da47957866ce49864f6e9970c2a903c2891f4b4d86abf6efa3eeeb35206aed2581f2f91e4aa5537bfbe16cd9f8db6e3fb3ab3817eabc621828d7c33273c2c7b4ec9ccf8341d84e7495313f58feabdcc0cc27abba8b945533a5a1d9f0a5694e22bd31ad5effb74bd0414f397470c09b6cf9136cf0ae9c597e010adbec7fcfc8338b51dc0329217bf24c3f5d01b04661a00829948aae9086d22d5f5262477980fa0a5c6ee05d5921b7688640b3ba27e6f85c68d9b77a9547b336efa25fec29d7263f51b2ab63d5783adf173bf9806c267c03a6c08f7406839fca63915e98e29a4b6a5d4d45e63526d28e6f83c7067eb6acc10358d08ed2e0214a010e8e5dedb3cbd8fd309561078ef884dd5bf27da690dc69f1f9562278699ad8c1b4c909794839507be6c0a88d5f1cf0524b292362551c839ad643fc138d405b4876e749a5f6b11a342b4cc1d710dd9d092627606471931e5717dad83f66097edfdce93d19724ccc5bb932e8716c87a7f98e2738aa159bcb9b3b354ad7e756f1ad6ffdc1353a890380c9a73c21ee4dd7dae576b8b88cb3fccec1eb0f655a8f582a3f638d22ccce8c350dfdf90b984074665c9e4acc59929cb76154ed42a371f9647dfb36cf8c8554cab3e440878e514e96ba4ed8e65ada90c2ad184ef337509a41dce9ca1c895c004c4e347caa4284836c6114624fc17111c577e7e5277f7b14ed014ee9b0a6cd61aaa9e1aa0162de7470c70c7a7f246668a7e1e8445671f2ef3fde3c9015fe502adc77c44fea1dbd880ab48bdf4403a1e7759ec59b6dd0dcced1d82488f0a921adec9b18f9d95142c8d077b3f76a87354de1e8772629afd646e42756fae6c6b544ba1d21f52c607a449ad880d366fadeb9a104459581dc742a0c1c982ede647c2ba37ee77e87d93044c923ada7988108c9bb3f28a7bf1bfa7c416b6eb1e0ff090aa64f99790786c81b161938b126e70b83fa7df708917945951696c8b7406284ed23afe34a834258d56c091d60e6577c87b43493e28ee44bdca8380f600cc1c2bc1563a8fa89fc1dd9cea898c757246c176e8936a0b841ea6121f620d5f3e7c2d6fc940449b948b67ab3e8c82cc6e411135f58cdbae8883fe279a24ca3dde6e4a4cdc5a30c8faad0df489bd59e6394d747b3cf961ab21db23c4d7a02c1041bd6b9ae11b862afc2d4503d0dfaabd8c0935cb38ceb928e808eafe5aaf3fd00f84d552245b870005a2a629be5e507e316cafc4f90ce237cc206f5da1d347c9d40dd6db4dce71e46a42ffb00419c8b3fa6ac1886f90335e936b9fc758ce68c1a15c5020eb9502ea970d2f80e7e714a0e48168dd4d619b79e4a85927a614c7406276b10811dcb0502e728b7fcfec81eb276bfa61458abecb3478dba9d9a46156360be372a3b5e78ec1c428e8d3f6b718fc480ea6f64565f5aab19162cc29cf75d24812c83e338b192a9d8f4ae2197b83531110e1a28e82de5c0181ca843d9acc8ad6e7a781e837ab1da23682acf55049c9260599dcea1d21cb980a16bb4a36aa6ae235afbe7d292454f3c3b923c617e1b159b29be0d32f7c549b6ae5f67a491eac07d6d98ffd79be4c9012d5e1c7e5057ab4bc471f6df8b8fde0749f7ebd426d5b307298da1fff56f7a36627624cc43135996388ed4cb958a35479387b53685aaf3a6075375a2a359ace1c14b9a705769f65a4a7b1118da36b9964cddbdb0ebdc306da70b66560e862ff4c85b700b452817ccc49db9117717d3a86b0ce6fc0f94fb58b9995c9fa09b3eec0b20ac1dccf04e2112fdf39921d9ed9dba11ca3d69b5b303f9913606d7cadc9731ccd7d4364c6665d8d8220e26c648a20951ee0306186b8b760ec4a670ba4eb2ca1d8045c8f50db94b4d1c60856d512344e592da5171cbf34c4a788a18c64d3752b1719f1707f9a9d9ca9bb39da0b343a096936bfcb80117f63f5cecdb7fbbf0e948887388ca6079b96496d97e69ab107335df8a8f311ba788aad54868e4988831d79e8fc2fce256a217bb77e7edce3f126a71e57fa9803f69af0c5ad888fd5b40fd9a0f153c3445eb93fbc8bedd1c63a3887f45e4f9e8e3f0ebe31e5e2ac5eeee96bbc2ad0db9aa8e74a8c698fc09279888d6a861a52e1dd923cf0256739b77bb66df170af774369f58df092cf7abe62d58a9e9efbace28a9cfb69355075321b9992f54fb4e3a28406a4159f1459a556d9ddde9bd4cee09de6599789dad00193880b7cda2cae947fc68ec2853b1c8889a57036c3ae6dc184566e95461481fbfdaae08dcbcc8f28f7111f6e75fa36136b025f91c13fc7f1c291a11990eadb87d69a982879ba5e2e3b2fa573c5a97aa3ed29447d94855d5bb674130fe323dcc4db30243fe9d2f44315d8e0567fc91d363584e3311090f45e846f9efbfce05a794f7296237f9c980e451a8f9183f97435522c5bc4a151a6388e5079e83222ba5d1cea79fb54856f1044c53673ac64760cecf9036356f6cd7ab167af051f4f36e53428ff80952e89d7dd3e32d82759fa6a59121415f2a377e15fe675d0214dcfa40e4a7401c82121374bb4d019cf1060aae88d4bf8306fa5e702fef8fbd5fc7c1880725141a20a7faf487f2bbf1976ee052c6d3c608c5ddd26482f098f028a3b81d781aa9304f6988b42e4e694a82f69d2ce27056639a760f35dd56352bf305139e1a56d7055ae0abc8370ad85d0360b46bf05fde4728988c1b3d5cbb0db1c3e0a9542b16ade8fe86b755e3bd395121702bcae51c376e8e2036574c6f0ffb8cd49997844ac3348f58669335edae2253325ef64f14b9002b650e1fd80bc5b90c03ef6c27b4305feb126c05e13a4114ab01caaf916d8a897757f7a36ab71d42ba4484bd3ffb6b6f6707a03e16329200fa26c25f6428a837c6777b5767541a77e3d072181217a64f23f01047762c3d91efdc0c1f48ac7fc925a40e3b4508b071f780d2707be46e413c4ebfd6f577cb576710d4eb4a874eb7d555efb8e0dad7d4a31332e6c380221ad9915162790ff866fb2cde14df7240afeca4c7bdbd2ba57f15a87d3c6e9ee2eb6a04afbdea6a6f2761ee6780274f223a7891eb1da61c837d10983e102e246cf01871cf5e557196925dd591caa7b5660f8b8c820cc3e7d8ec376ebfb14af398aa40ae84411e628522020131c8922aec719cc10daa392c8744113f564c10ba993a8864575debd722f220e2c011cf0ee8ca466b7619741214043ae8587d9edc40829d1c2d24a96e06b5b90ef1a3fc1379b9f3699ee40f030fee717684f9b01aa68bcc18ff6813ea5211ddaaa5e31eaac7d7e527269f0d4aebbf08e89da8df1a822b20744cb9ef6881a5f7de1ea0e0847b9799eb9ccf985c8d7c46781838f0c5148fa14ee1e52e50f208a0668f3d55b99ecf62338747efa60bf8bcb43e53e0c50174003e90b5e6634984e7bb3279cc0c2f8379e0da377b9b51eed5b4e3d67d7a0250b5f83f88da03fb2580a299cfcea42d10b5af9003b614117122e7f6baa3ee03c97691f72a92680ed33fc89812360169ea6e3072f56a2944e9d17a033cc0ffc133d1fa02512c052d9e824c498c3bb2a3136244aef40c5187efd30aa6803e3fb38127104ebb912f7182fd909a20d5cbf5d77cd9173e77a344a1a5eeb40a8dda97ad7bcb5ed59f63fc2fc795b7afc79812eaee6e86e4ec24dd228912468e96e1deec53132a96b939b22c13b69ba38766f5c391a5cb87ac7cda6fd819e1ac8cb90649710edb6cdba1770e4397f576320dc83fd058e21cef04b7254e5e59fcfbd845d83d87c6884948642f66838e4f8f54a7abb8a2b1e941cb8908f8220377a5e07d5dc60b6054d982f9b6ed6df5092717e34126c5b814612596a68a664630bf7c0ae4d172933ffbd33e3128e807a78f33ac951741e6b0832fb50d54fbe65de9dfb97aa16e7013e4aa6d3494b039e4bcf072a71052695bb57d46b437c3058307320eb28363c328b4dd7adc943ee28edd396592dc8d2fa2c1cdc9d73dfd06087b6b37d59c91072f05663726f64bd35231cd78befce0517bbb9d8af277c6915db9a160f4936f6a2073907ed7d4b32ec4b592c56ccf6840a857e1ce843397014fe6c78548bf49c562d3565a0c862addc5f5d838a4d7921975da7cc2a2386b0e85f5338de5335325b4430ecc32064fa0d3ab4600fe4eb82033fbb8165a4692132d6aaa52ef8317baab54ca287d0fa30d22d72065034a615d58260b65428bea6320faaea6ce823e0ca86d0c1146cef61329cb00b56ee1795dd98f903b1a8700a9f87d92dcd5dcc846e6a66a7568c77d1e1100c078559b1e9e41f0e50c4fcf6020f75a1dfebd30b23f33fa2f3121f7ccb97739a8ed3e37901254406a4332652d668aef5ee55eaa48030b52d50010268c0390d3ce9bec53e9a645fa323104218dd9f4e1fe6777ecbe8af83308ec0f9ab5afab20cdde8a7bcf416715bfc6251d7bdd08eb65ae197880cc8bb5030771931ab43a3efa638853d4644f517b8b32ba3a3302a309fb0efb0c9498b1ddc97484c967996646bba00e10a48c68d9b31e5defac30858fd16031b2ee8f43f81537c69cdcaf92bc856dc8b2c70b40a457361fe8a4d1da34a43b8d3e748a5f9676819819d1bb9c7b51d0d7e2ea8ab8dc4e8e3a7e085ec88f8d0f088cf52dfdebea315ee700bf3b6e0f33f936aeb7fc43a5729321fcc50ccea372faa2e96af774426f5b04e5bd1162c5fe01128de28540d8983ed6f0d8fc1383be900ee320384b8dbd88bd029195a98e6e830efd129c68f0b4e67d972c8c6a4e5defa869fbf7c474bd086afc140b3e86e30d1f0d0bf71ba5c27657f4ca948f6958fa362711a06329036af7cf50e442b9f52521cdc42ebce5c1113a3dcbfc7b553678358fa0b27a9e7f7681ecef90097b4e3fe9a40d4581ba5529df7f5de19279640116bc413d2700c4e7bb53ee3e2bbc8f3a59321c84d7c7f20addcb7f1a2f17a9958756855a0914c59f62dc963456acb93b0db0fa516896ef370856ed7d9a9045790706a6898c4e0a70490d721f82747a8224ebc3bcfc3f33f2350d579e7762890a968d5d54a18a0f0548466466bb630fb836872e3b0ea31195c8b2d43c66eecf70e16295bbfb2f7bd4a8dfa68fba286a3117c4dcf6c28a3772dec2e75e5e8aa5de2d031c824b93f2044fcc0f0193e02b9a366cf80f118580cade17b479e273322497d5b1562f36874dc1436f27e188a0073892607892048fee65526dbf0efe2354cfd6ded21775aca7ff5082d1b29dd6b028ce99625a548c666a975d506de306463d0e5badc11ef979650327717938d859f7787f36fbe9a4809e2499e4121ee4df0db63e3e30c382073995f7a95432c0ab89621b8098f5f96ff8b8d5ecc3c51b7425053e5bff09ef81043e0030861e02ee17f8b866d7b92151aa8ae52dd06fdd74ab0f80d967b150591dcbe1aa3ddc5dfa72a987265dc309e89e3e63c6f7c5653dcb56167df739765bf1221c5902e9183a1d9c73300db0122cb4944489681bfe2c7ab6bf65bced11d5213ae74abea4de9022297193b27645851de72629cbf8285e04f190baaba879d6aed1fe84484049f5051c026967591c758d47c6a42fe5eb1614a2bd862a85ccd692386f1949bb0c05f54c56249d78668d7ea3e48cb671b2281d23156e47ba585eed2e667ea05651f30b91856c31058ede0db3472f8ec0304fa552bb26cc4876c6e25e53fb1c2d9cb23854e1c43d5cc7c835a9f0f8f38d604d83ccbe21c67455d33f963e54eef32d2985a373a13f08a33ff41435906d77413f31952418482663b692baadefea2b48b3edc749bdb8969981e3e7ba4182a3036fe4fdd4deb24bdc9ba5542f90eb133efb710d5cf619929c3e46bb80bfb4775635192c1927706b4771f1d438fbc67c018e0c9dbf75eec72af9233b27dca287aa51d4677d6627dd0c9ab0e9657c7cbc570301587912104f29899753ffbd542b5f07404805a3387e609a65ab7061faefdcdfe2f08d4359725a936596371fa98c09771df073f27f56c1f4103e44b7d71784d52619c71759c960b37290a8e71bcbd6172221d63972369da4d4d5b175395a902f0969165419d5d8654b299609da5e9665314b39e8b4135c953bb4a17d6f21a03c3c7f95e86a564deca99b75ec3b970216c884ff7853d4972a2222c47f33450414f6dcad109d3d6d6d54e0f08fe5b824e58a91c37f626df5ec134a1a1e088b2646ccce5ad115d0281dd814d2ae7844c172de4bb5f83fb4e555ab487248bc362102588150ad7c6e6d687500912878e4fad04460e69af423af304b75b2e5d04236dd4b085ba61133bc6b40d61105c5b1a0538f8efe774b1ae4ef9bad7f64a4927b47117466ea3a3b85043125a80c98a145671614015b90b85647213b6bfe3423c47716885bee6ac124b29415203d582905f1599c57bca0f901bf7c9c9bcc71775240c0090e13e3c9efd6f8fa1a62fe808512710199140329cc34705ded6769a9985f25a4b710701e81d8f6129bf3c7a83e6bbf8921edc12054fe9c2bd098dc46539f2179f22d5f25846289331f0f31261b0e24bc806895ea999559e41494e201369408f9043f035213da8b4e18336942dea37c1a914130f6fe078a028b9b185c4ac4ab13b327c575c917561d3429a52ebbc01fe31d04debae11c680218f8df45d16445c7d560dacd1ef051c44b17a3d600e3d8a781b538b611f99c9bd564b9ce4234d70970a5b6b2d95dd59f2099696ea1ac688897694d213040dbf50187bc70ecb96876306027c928efe0c1a470e2a8a697db4777ad893b67165de290dffda81e063d87ed198a878c7f81158c86fe8cb38edb9f0aa0c5a54603f1a78e3cd8c9e305fc918fd9e21522816db180b7df151ff9207d25483a29a71fc8bfcd560de49a221a6f31ec5dea37a6f0880b0f4555507934315b95b57d85f355b681164578dccdacc719476f28a5e79345b305970c8251562ea808e92bb784ac9f8e8c80a9802d6bb50e0c97949aa8de17a144df5b8060cc2313a16afdb198b35d9a1bab7a79c698b34d5bf2888866f0a54e415bd0cd219d7b176ecd3a14f08eac79f3efe6e12b798b32cea7a529552e05c391144f01c16a53d468d071d91b7f289a10c2cc9dfc252b203c2799ece13bc28656bf18c3dc935d772601bba748a7da9d81fbc25f86b1e68e4bf7170728253cfe73eb3332f5e72b741deb8c8dff3a38b5d84374e27fc5b9914dc96b9e9b997478c190d77d822c73a1e26f34f87ae07c61d28f75ba3e976de7fa60cf77faed6684f97d0608e5ad5e92567113baffe380c8a1faa18e8c5db0e615e425051624016b8d2aa0de9ef11c8237168304676c6a1c66b12280c3422fed3c629da0a976f34c8420bca33980405e0abe2a47ac9112bdb44a3615964cc1f1f29ce98f44059261c12ac4abab1892634c5e28f81d819ddb2c9071758c06104dbd6dd3f2f4a925d2b575ea4a0bbf760f8293972c0ed1de32df5c370f5c038085b4e8e913102ad5276b04fe31ad63b4ecf536f9ca414b321375d6f308266b142c091c5781e9aef853b836bc597e2141dc194f11fbf30bf31a0dfd35feca6612fef46b2998f985ab8cf4330f40207f5cf19b01cd922035e7f3c3b310e7ace414761160dd514e07820dab934e5fa2cfd5020064272c62ce05cb7563bcd97e2a7faa252f7e5fd4615b9cf154727abac7d562ed1a6b648e4aa7e486ae3e36bf4252aa229ff555b95740708f46f16ee9e2ccbdaaf2ad7bf9d9c274aab9bd44d4e55deaa68451e8b11023dc8cd261c8a6b2838f1089972b8b66fa0e08ecb64dde0436bae542f8d8509b940c445cff2a027192cdacb57618979544bcbf407c7a48fe2015dbb973859158a255b7fb1f41bd88c728225a2f3ab333e6b09ccea2986c5b0ea1f963981d8ede5fc9235eaa031dd6c3b03ea6f49fbb4fad37a34b1ac1fad2e58e76dc4fe9a710a4edbf98906e3488b63fcd6c8d85a8a8f619bd1dfbf5ca6a8cd024c8b89ac834de30d91067cd7eacc5d556b0e9f248ededab389d9dfd2aad21b94376be6351c4d286b009a9c794df13275b23a011e1b695cfa291eea1c9dcfe386fbf0e3541c9df0ed40d2b53b14e18f589fb723e52637c1331b4513d2d682fad9e190c45df0c6dbb42586c39529dbfd2c358b186186d8d619d5036b8cc2b87039700d7c5269a90650134aab64bd069d889770dc77ce3833ba233f159966a82fa1d7badf3aaa7d6bb8e2361295c4728faf5b8d1273812072d4e79c72e8482b4caddcb6d5fe44f3dabbf8f350371a490e855661adff29de1819de01f15f82a1189caa8b9d304f737695f2ccde8b95341ed1da7fb7979525d69c6755112417bb72bf08f486a9943e745860e1709d639153c157ea98a8d11e25194b60076429b2ba632131635741450840428607fae8d249335eb84b5655d224ffba57f0515ad71d06c8600e4480ccaf03d31b7f87b45747e11175aacb99d80ec850cab503b13c131f60ff9874cc8c79d05cc9d93e77dc3e59ab99662ef7cf0f1434d2b87cbff18d835c0d80f88251e81098eea5a6569bcc420db24d17fd1225c324b3cfbcd24c56d64e131b615a4d9bb17c5120a1b58969fe3e517a9ba3afd966670f667bfeaf60fcbb309cc7fd172f00a0bda1063c89738ee4f23a80a787d1e646bf0d729abf7eaf0dba6857509e85dc20a31be5a7e5a087211b58abc4e5054acfe7b42f529e11e52f9f777bf6304c1b99214f3c5b1b790bd0aaf283a74c9eac90c01cc2f85bdbf77d8b4678ead71feb19eeb7688b0a63e0916a2888ef26a458de5c50599a3cd61349ac63408de82748e1c7b26bbe5cc16bd6fb815f62e6f8647efffc498b482454e67880c550919d035d421ca6f40a64499d54e015a5a4115aafbd0613a6dff4679aaffc9804cedd5238e6de165e32af545783f54ec1d356fd03aa264db4ae7d29230846eeb224e5d575f10becfc452a99cb28740e13134023cc4e07e15b0efc013974fc14d2638e6161722f032139cd943dd54ccf9460aaf4984acf40a9b38c719b7af475a8d186a43143624af36d7cdd9466f2a6d82a08e3f581091487ad4fb4283606c1475f6b1c71ebb3b5cbc4c398d6525851480dd83f6ef643c80c79fabc4c7f6f191e9c0c99dc99e4c43495e23ccc4c0bfcf134fbb2eca0e21b6deb8d2ac2beab00befda7eb65ecc09bff5862e63ccd9ccae8534ac31c7db8f9d777471701a84aa7b8254c8a9f25e0293e135e234bb2a049fd6a25036e6793c07486be6717ad64799a949f1c0f770b2b98d80df18405edaf6b60a8c5ab87ab61274add92497ce2e544e63b8f6962065cace1a69618562bc04fda0f3bc81a404da00da9599e2fcaf81185404b1cbcad66ff02cd2f2f58f337cd8965d4a9b1bedfbe3fa278d0b735231a3a3445b311151585c6e6994b025e4241dece5df44d5619ef2ff573ca6419c9257efa6c9df39a7ad01bed96a565ac2247b39ccdf35949f982a91fdfae82a7776b0a045ff0c0a1cb2e831fdb080e796d5575dc461f7cbec8386b175298b00508ec62319ffa45c4cb68347f45ed1e2fc53cc77cd815ff855339a79ac660d93774991bde4a7fcf8abad53deedc9470ccedf4d29b6520058211f3751e6ea9be2a590b44fedc73dce0d0303c0f4f4809a19c31c1f1f8b8e83da42acde0fd04996f772f757f2d7c7f36686772e31c736bbbb4b3e395425d6d4bb888d2fa25c76a38961d2e29e6b5cdaf77f291aaf3ef110eb096b21d3180faff4f65a859d55d536dc6bfee7619f0b40d277ecc91fde28a4316d4a54750db33a00213ac05a487383bf89b95171d9555df75ca0118e19dc87c53719a7156739c8667f8c98693d1b9248128e49eaf90fbf6d4e2470c965c7be1e0baf5abf83e30d5ae4366bb7cbbee0b4b4e2d43e07126c2544b8edc0d5008b3347ac95d5701f43de8f19f65c0b3c3f0b69f592262c19c89bb812f0d8e99d0342843f1167b7a6e09e8f35d764126fe155605bda0273ef7933927872a6b827b8c7379c1fa035ef30ef98c5a0a049d7dcf06b631831a3bc2d400624619bb29c3bce0030eebe32aed64a70d80fdfc3985a87a088e98aaae70ea049be51dbfb6e7c9ff9a9442961874dd32a4733a8f1dd97115797708f11077048014a8993f36811101294c246739c7338ed25ec2e542f94def5c20fcc9e7a1c845e432c59c689c02596ce458bdf68fe880143eef2f09d7f2d8233f497686e6957b9158c667dd347cc6312cf01a8d7faccd4f2c73c7de0cd354bd30ebbdd4481185f6188c7dbd90761535c1d40dcd906302dd2ff36fe290ba87d18e4b23f67bf575f512452ffe3313c3f83bb063ad831347d1377c881ee468dbc79c229056b78c2b860748a790fede69466dd336ef2b954a4689e863ff3edb24b843d8b01d8c7910e4f553fbd922ba4ffae49393fff6747c7d6673122ed9335c070925ffc459856cf983189e5b5299df00729914a1e9198f33aab0da43f3ba4abc1f6643738809e62e592a743365a80b53dfd3b736be70ffc368b0a1950e45289cdb9718e52f5f2968647a289f874d627eafeec20d2e499bfecf805fab0dfb8470d004297df55204cf30495fd97b8f6566e6273fc572f19c7edeb1d1930b604c2260b5f94c152b14ae6c15c3894535148c7dc5cba8809e59fbe5f0d5f8537d9fbb4d8c339c7a76c5cb4c1aaa245ac066895a37d3799c69d3ef9b7de288404f847d5d19a459a8fba27c63765d70332a82a3a888bb804734d341e05aa68f7e9c6dbfbca2291c8fe09ac4b7717082cd41d734f93b2601792b5b24d4c92d9804420e636a912bcf296d088fee05157741ab7d4a32e477d6e3a5eddba8e78f8db38250b2c7046d5823f5748f9f14f307113bad563caff08b679fed6fc473581f49551eff15618b8f5db1f82cea479d0d426697357232eb2431cb38106f619ae5236305c72bbabcd746a56ee77ce1ac22d4a119f8602a9420cd410692bfae1715fdf7d5b4ea923660a617892e097008a41e4eb987849a30d4ee4af610fc3403080221f8610490b61d2db2da5cc39723c38bffb6318d11c775795722a5672f9dc0a20a9ec8a38e84fa2e7fd0ee1d70075195b324d6d5f9d342e5044b8742b1cff13c3713f12d4a5c1d8d057d3a7155ca323ec315915c4528c77577ddc68dc8d2b7f0a48dd6ce072fa5b67aaaad7be108c83692893cefa2193c1ee099711d6c6ac5ff023ae3ba960b3af247d2e12fa1533a6f73e861f9545ea219cfe6efbaa710d9f38972ad2524f8d9069dea3389079e69fff2431fac9b0239e0fc4dc8a741cef57bd6dc68e8dd276e93b37e5c3cc941bb870d8d10fb9ca0ca65c5e203de94f04d770261f31fb7d23dbc059c4f3fc89fa4813b98df73052fb215a4069b8da6ac588db9c29be1dc26b71d85f306979cd53e09217cf231132d0168b705e5df62ea0f7e5f530abc66697cddd4b1c9b3f4a525436bd3e3e399aa22de7ac2501bfd66ff0deac1a507048830943d5ee66b74925dcf7b4056da99dff5aa8984da06ca3e10cc92a6c3311450b7c4459f722352849a225982eadd03107fc0f3cf88c621bf9767547d4e4e27b5493918ef81e3a4019238328ab9ad9470bb85b66ce1b83bd4be25d844babd293c5dffe8b659d874636016e05fc2c34821609c266add7c6f6ff8f79a26ae34c740b8af105c10ffb972a038728f07fc81a93a7e7f16b2136ccad248d9446153229393a74e7e915cacf894b44ce11ae9d2021e94e5e7da286fea29facada2d7a2d1c4aa1eaa187904c472560d846417b7c3d333bafba012fb26c6a3c91ca37748c77aa8b8b5228e30865d10f977280c9ac86206d8b7f20862ad6072823e1971455c619f0ed6fbf25ac62e51b91886a1e52ec6e359ac2b50a722d62d6aa2f82d7bc233c2c41c999ae51a308b575e9249efb1bdd2085c6dcb889e487779cab2e1864bb51bfdae417c6c02feaa53855cf7ca60d3474fc475d03a7fee4c2435933cebc6b2d144bdeac42a8cff65849f7997089591d11f0993c705a8159a527307a84b15d7412920b0fcfc846933a8d7d94514169d49b4d57863c8f06cad4ca6cb1c0ff5ebdd6b8fdd905e657f1a174a570bb742f88b04e68804bf3ebd639d22295c2bfe7fb2511e6eae3e1f4ef1dc246721d53f2904e505750a8a0d9c12e47a266f44e90789ddcc2493b1e2839e0106f3a176b962ce5c1549d5753cc4767be7884c3558384cdc8bd03a28d9c13e5d63d32a7e6a2aca8b9f36b89e087e2fea31880f40e3d371b622b45d5980626a9ecd87ab2bd45ed7bc9dfd309c23f8829d1ae73593d0fca95867f53730691c6625f36f8e54c8671f235bc670fbad7e4791fc0685960a0705a9bb329edb2f2d5506fae8e210814172532b23d31e6471c83a8690bf20d8080104a3f8e27796cf78c01670617612774f960e480af8d5e55b5b6ea4e18c5bb2f4274621abea02b2742fd6243f5b83f2a9a412a85b80980fdf04dca47964ba1cfe294805774cbcea184e95dcd2ad88a373402e0c2cd164f71abcf3a8e4fe7f85faa2f2396c4d485188a85b091e4f75aad0700afd782198353fb40c83bf7f47ab5eea741b638337d652db1b0f474ad9a68d899586bf3c7fdbe342c79819b30f17d5bed9976e170cc53700e4c8d169d6ff410893322b80127f5a08559a12543516a6294446be93afc6e728483dcd66969cbb5c2c6a4d5d58640633389d8f60dcf1eff761bd837d4a4e700ad3aa5cb0e1b5a63be841cd1d1bf98d83001918c5a86eed1f83cbeb0854beb59b94468eeba481b7903f4b1139be8125200a5c172375bd60594796ed05eff8b4cae5de9e65e775cfeaa0f377f81b51fea4a944306f0baf3ea02174d2731938e42274f1a4225bb38bab340a458b96503936efc410c437f4fa2174422e71daf4201cd4697f4ac2fdceaa5f36fd9c80a3a41c4d7068a2b1dce6af8d45dc413799751ae193de076b84ee97b605047359045eaf3ed08a4f290755238d8ff320c27c40a4ba7f4c910419a7100218c66a4c094de4976ca3fb7939a3d015f18663743c85739e2aa3101732c2ead82d8627ad9131dc2b07a9c7c347c6a29d8bbd1d133d12a077d1a8961719d03dd1d335864ae93bf5ca695c7e2daa43f80abff6060ca2fea35b74d42adb6d3c473db926dcf49275ed2bfe56e07d560e35903f17996e25d11040f198680d144532993ec0f24aa359ab4a02afde827725779d2c521153d8f72e8b53020ea3f482a17637a059a3a9be5ccf4378278e01452c7c48a66c474f3ba5d3958b8a60b5bff57f70d63ef6d89dde7b913a5cb664627c1d06009879d15ecdedd116de86d94a7a9b94dcc92a313f92ffb4da0d120407135a4d991431eb2f052956ca817433d733bc72935049bb535cd3653cd9c56881b3fc6942ff4972d06b73274517d2c57212403982114fc477579d9f7f32f5e513544badbe6b39fdffeef037b481727ef5cc4f3f9cc397bdb2c2195a47b3d397d214f9571315af4570df44d9f59498a04803fd402c38df8f90bc1901f35713221231ca8ed5dccf6ea698c9c73ac5c29b984920c2c02adac39ee4d8cf99c9187c54118d678d8db8cf0e3ce8e0f6caa58e2b42f14d42df019e3eb51a65fabbddb7373bb76e5fecfbcd2ebb622af99f7935600dc74e57d962a8093efa8abbc80e06be27c5aa6483b555cae29f5097af6c6c1f0333343edc89b1da5f625dd6b0152a09c722283a5fb9bf3bdc43cad0582cdf5ae1ffd0eadffa5a1eff80508c51d4afe4d00794c9c0a944f89af5d2f1db8b1f6eda3a1025d50726945db9ae6495bc39382a3663866fff1aee7c6f3fdc320e5d4b74474bdbfee10b13b97174497d23a86ad6105f2c76540652241e96dd1a137102d3104d00e2adef3687bd87efeb1339d6a00c86cf39207d2fdd13ae41e59e40d4c17f51f3e3598705a205037f7d4b622b189a8d08d8051a97b7e2767e3527c7cebdf8d7f3b54e16f9cd3b7e99e00425066f343359cdd4f45cc4b6ac6891890548aadaff4fafa8168114204a55057f7410b4591362af736d8b49a2389f836d2156fb54fd4d30368615be711bd4d01e381d2a08093c66826c0b915a66da1479eda5a6ae762472b4145d24df388379d691efe577bf2290cf6d76eab604d66bfb9a9b5f81b82f486bf1165ac847f2a3963b6df8e2025c9ea6ca815c25beeab38bfe5c39e38b45aba8250ec6ae0f9f064fe8455c4b213a1f6a9136f332354d814c6777d22b2e0a9831a3ca7c97a94413a49a35976fb3da2aee374e35b7f9db55f43fc72061983f8face874f90d3858069ad016b761215436c5abfdbdbb905d6578ba2593a003d91b4d9cacb4a1db27abee9471c0cc295f0c86ba6005b616d513d50fc14ef54856db8cb7e0095e648cb7bf6b97084932e4a379a827c505d9ee2bee9ad8f0d53ad3e8348864d1f57ffb130cc703bd942dad976ac507fd5fddfbc30d95981cf846c5a7bb0c9e867094fde758dd3bc902b42adbeda92d187e8805c468c57c850550a39bce46f4381e20e6b3c1664622da45999ce88caca50df4adaac63ec9e8254193a982ba719cb2caa9d25cad350d792c6b19a0107dc173ba9845b191f6d90f3946be6d5b70bc8991029a1cd862a2f608c847ca82d558190d66594623484cf90a20187c956005c648efe27baa4e823747019209273eddc46235d31f1c0671a19d2b078e58914e2a2c4f97c9865d21f6c82270aa1b33fe590586fd733be8b533b484118050b22f870e046f5577a68d491c278cb6f52995d4554b5435fe5502fd264b19512b2548734e5333fa32e1a1739b896f7fcfc123fcd5e4013ffc875ef35229a0aa0c0830e98fbb0ffcd24f42427d05b358ffc5f3109020948e16a9d02557568cf453d686e3a670bc0561c775908b5f617d9b6750862f211ce05c038f95abcf7ae59cb94f97def8efa20d4e7af46b859bf8b0b0986d79c40f6e1732218ea65acd904736985aade13e7f60cb3aebb34770e614624e018f9d54467e4a982222c9e01dc39af07fdead5780e1c442c25a175e33a07c40d27d28f6bd67bcce8de2336d2047bb36c6d1e8e6c48261b61e169f397b698e3083bd51d765b311d684d9fd7f91cfff4e7c5be62fdbe82bc7d5ac5c3b9db903d3081fb08e8f34a6e7fb311660180ac2f60e07981c64c28eeeff6d1c8b035607fdac1e8c9619aeb85dbbd805a51b01ef3c2dd83f4062210639a05d3f08bb3c0d4080feabf4f9463d05a623637a8cbebedae45337cdddfb180fdd109f8058108d6b739f214a9eb48e7c97285add9f06dc96c27bb9f4b1ca085aeec32ecf7de955e3b8585a1f296d4e81b90bc0b2880f2809bd99091133ad97a3a64d093eaf66388385c79409011a55de0441da94fd68be12259a037aab5336b226bec952549bf4a203fd3bcefe6383a8df305eed0c33732d6b69c6900ba465b79b9bb5a53fa04ef4b3b1d685eee2eb0785d29ace03c8b9de412824b83f5f8ffcb421989205baccf3164c89566eddd8f980b5fe51ee2c0fb21e58c0f93f657c2dd4a42e18ce4533c9ab59e84361a2652b6811add0ba1d206dbd59a2635721a9be9d1259064325bbf42775cc29294b1b0bad0465dc20e3804095ad1230325dbe64354eb10dfbc5e2efd9c0e0ca98aba79e382ccd2e3c7cf241075559d9397825fa25c8244b6067b23ac66b6ed10e579f4705e14fa54f679a59ca97ae8f89b21ea552e7282a9bfa86a9e0c75f4d20082fe22acb779e9e4b1d783c9cd1d428df85805d0e98b8ec570303d86456e42bf2ef2f4fd1c83b5e53ea14c6e2260f41f640514bbc3f8472678ae73a9984cbcba0451bef32e2c2dcf4f397b71a4b9bc8ae3a37aa978e95ae4dd3dc71d1dbd9cd2c1343a9daa669a5f3053342c0406de9f358727a657a78fab4ff94f03f6cb20e6c1ba657417cc81a16e4b8bc495aa7fae2519659932b909e0d5c4b72d98350e3c3cb074e70383c65576d9df3090904982757d10bb0697714ddf6ce7f9cfbcc7fb7a2e510fe5b92d00e5292181959d8f128457609005e639feacc20140b4d2055b4b6eade26bafb4afa380dd5bafb69a02d15301d30d404211b1eb893a06f75dda084e1ba901cfe3ad422334d5171e96b0dcfb0e7dff9f9f35bf3c7644018cf206c9606b65f82b19e14f1f76d694837546c3d1aff7fc99b96b0baade5103e8028075a3a57f9470072992d24ecf714d16004a654a1e6dc4f5110b3f9b9d44569ba32982eb9cc0f3d392bde84c001f3e5dec222dce1820b2a5b2a635385a8f9739b9000825e274d75968700e3f42013d75579aca7e1169961656d79d7901e4fbf0c7f5970c234f4c12e27807ab46a91ac4b5ac9590d499212e8b9c863806bb479d1dac62016af7c7b88372515c61e87a8d6a3e4dd35e67b907dbdfc6dc414bcb4daeff03209b238692dacd575bb6b84b8305524e11c307b0c4f6905c3f92abd428290b9312a839fe6328e3293a245ba05c46d4c3cd68dad04abc4214db80c817261e84d56e711facfe2ad9561c0786749a9d9f3d6845e3fff6980aefb3ae1b82248cdf76debd0c1913f95dd0b0bc1982efd933187e8a6da26c2aa38de19fe8ee2ab967727fe8a2ea9a6f6b0215a59310efef09ad2cbad3c61cb1d0f007f45c2dea44921744098ebb49fd0512d973542c73cdcde5ea07a00d84dc05f3ea3bdc4a3030c98bab43f5e755c484c0adc5f384178cd6676927856ed842d55d3c169d2d3b9b380fa43df6c5f447bad9004bc47db69c0bfcb5cb2ba3684212a2d95a7750721a093791ce33445504b91e9cb8abfdce225166fa1cb49e17ce1aa274859f8911b0029795111e183887cc5fb74ff15c78cdc7af4216586917efbe033805ac02570c01ba1eb2f3b49c55a5a3fd4485bebb046a209ede331491e5ba701c2aba51bc90c190e31e642a9c1a2563883f357bc0134cace3b91dee91ee70548253c719fa3ecede5f4dbb87b361772bd1d7932ec38cbaa6945cecadc49c2e0e2fbb572f1231b0ad4f1c92ace56b912d43f78744611aaa876462b9caadd7a48cc66edbcbd532f641ee790a0245d3c3e8e0d702882ec1dd247ee694edb0e01e23a0b12fb76664f8d0a309b38d845544c2c705e1bc0853e429eece50c016593a3efbbd6927cc659d3a7a4d26d3bc54490b4990a17ee59a24df48cf97fafe10f92939729eb74e63909cb94e1656cfe022f5bf8d780bc9f043ff38905a25ea840e6cd45e6d93228c39837b5df60f833efd72434fc4ed7ba9966ea288631be9f2e008e6769a64f6340b740c28687813e73a782a61ecd78c983e9fc31369b1a32ecb4bb20517d3d5ada3da9511c535ca7e0ccf16e1585c476ce900717855051e8bf6e70ab66f2acc1564ab43376df16fa71767e7427ba85d030b5286e02b5a18f12df5d9e70bad6121cbc943f2d60ad8439198f0b93a87a0dceaccfa1f0f0b68a227a40c678893b79cafe3f6dbbe928e737887e40a5e855baa938e5a11d37cf2bbbb444a2f1e56a8fa00bbe358465274eca8ea60a10815b9fe90b845a4e6be33050c18abd6498614df3ed2c43e9169967d1b551663e49cd5621b3882dfc44f9299b5fc4473ccbe5964725256869dc955e7556044c2f1b8726e72cd471561de1cd332917c45fdffe8ff4b5d815cbc5be5fb738b257231dda6a0403394a3afea1a57a3bf0c40b4b69746a3ed243aebf1ba17c1ff8448a0f70fa1fd4069040c8b879bdd85655c6ab9192b1eedb799ff6ba0d30c2c9370dec80eaf0b8affc2489bd410e0f9508aeecb3f262b2e04ed88c8f47dc48dfd1ba51de6eaa984a9a003ec641ebd669f79d1551734971121177922fc4792de49e0add773a9bb6549e06d5a9d1d6b563e8bc963f25c94ea1e0b697e3b58f019e99eb7818252b1dededa17748443d547dbbd409363d703c92e11eb877bad7f7e91f9a9aec0cecceb410e3313507731aeff746d75a5afbc3dd600d718144847aeca7751a69ec1023a4611f995c961ca73c658d5bd9a868c34c8df48269665b3fd6f7bc22951485ec6b323fb34de1be4afb0ad3c2b53bd153cd4581100e7c23b40776aed2f871921c2f4b78f51267b0c75c4e41f24267242825e9a7839f1f8b2bd8686797929eb32e2b4da73ccf59a90159da18395516300475c36e9f574d76cadad4ed0af5fea9342b263a735802362e0fb61809bf27ae0d91096bfb511ff4c2cdcf0c5c6d4d16f728c6d49fbc484d87f474199e23e50010f371199c5b848c4ad5e25d9d3e8cdba7e3b8b816d8c350eb8b0081524ed563cdd08d749d034762b7bcb5893f0d3395f386d08ae319a81cdcab79af76078b8634bbdfafcf5f9d8316c0ca1065c58cb2d966bf6e3ac29a97b38f01d8dc575868ae76a0503e7be5621ec585b1f18b1be13807cca32ea6d05c50950a5f392b69efc88a5f8ef60d54b6e25e18fa64f6f2dd76c357bd57911471bc29f15e65ce97eb5349bd80d5a1ac71c3953f1f98fac0da9f9cea4e3f6a28113f83e73b7422c9dbc52324615bee178225ea1929c7291bb5fcecead814f609fedef86100e2bcb142f25c7178c234f59622154fd208ba07f7721dc8fc53c360c9b050c3ead010dfab44faaeae72f5c2572bf9c951a4e1edbdfb2f1c3e470c8cd4d669dae06ff5c93d515f88168e13abc1e037a79a687c040838a143a5cb10e76ec19aca080f402ddb80f937357995a1e48cecf4e485e978b65bfc603d8048a670dc3732973ec0b1229dc0059f21522de4c8b09dab9b3575f2cbf0be995f00d625ac84322c8c38bf174fd7dcec7ea5bb8f648fb6800db244561d0033535be0e89cf22e60d580f10cf8f00d943ae0ad53e89ade82ef4b59ad42951daa69866a96d9fa00bbe1f0d9ae2bb819e09f5df8d0c1c58d2d112b20325dc3c655279cef72b73e05394d08bf88b8a8ccceabe903ee44414d76521cb444159570ab5e8aff48b1d5281be1e0401c65a513637a3f1d69767ab865d41f04dee78d5fd7bf69378fb60523012fd1353680da07f0ca22a7b52503ec3cf965c36993c9ee541097b59415066c748a53e5799c7f66b6e709af351760bff1e0ca22fc491b2c15f8e82696baf86eaafb0f14bf63cb84738f6e1153dc329b8c88a2754bc4bd6c84cf5363154cbae73847c847b339fdeaf4009b6c94280909e4760a56c07e52057dad4728ecb3ec9c90939c6fd883ef6ff3a69017c81758ddbee7627c1c5d3bd0ef5f236627e15e8972599d8676479dc74eb6412db4076413035edeca2abe386ccf5da73283176e40102b1c29f541bd42c06a58881eee83cac3047c84bf27a5344f564187e440e8fc7a1843dd0cf798c9519dea71817297961dc76bcbd36a94092b71d3c612c058d8fe9af1fd9f0785f4c45ec146d5428a0081b290d4b961df93147b725629aa9996f10e4e149f3c25fceff4789d8cc7dd18b78da7472e38f9933a39b95a041b94992ede6ad72b4e8b176768ea0e13fc64c7033107b0f01d577904ba4128a36fdbc2291b190422d29600d81e3530c78f85198a0b0cb4755c7ec46449c489b913da71a6cd1c8d3a23da4e11aafff4eb78c46f517eb4733970871828338e0b3f9933fe7348330cbef2e9451d50e8e8dcba3944338bbf636e238556bbaaa278785171cc82e8aa84f8d27fa11c087252740c87453dbcccd279de7310c44d04996dc60a3207530cc4dc8102fa9fbd6486e25a870c1fb15defc0fa4d9406b40c9a6dd0b299504cc0f49750b2271856b028b5f07df51b580f9c7eec594818fb9b42be20c52f40caa764d656bcfe94d9ab74eac91d197dd98e0778d823b743786408d7d0d3f2872e9e303fd7afd9dd18964bb0823738220fe70972feced039395dbc5f31da5749e5f8cce5714ede369578c8023379446e81adb4746aa19e8aa2d90d81513ee9681a4e82ff1b8ec1c820cc537cffec67d82e551fc90dfb961516ddfe81bcbb2c810bf27c63b6ffdb675c04560b1e4bb822e1cdf28434225264d26908aa180897c9bbf6cbf827d4d1b6fc9a321972a80f202220911ec327f9bf8e07fbda79263af4f7a3fad859c0b3023aad6c61113d1f4cafc2fe9d40a1a25dc77b6d6ef21e3abb62d87cbe57f330c74edc698070cb4402550b5cd50a1b44254d6add0f35a538517a11dba63e547e1ac13366d1ff6af4f723377f350e918af34004572ea360d9d59c8593be35beaf29284def8621179276ec074e65e8f799d315771e8caa7de1168ad10fb705b2da1fe5657bf018f8cd46f57bc62f3ff6153b2aebff5c3a1e7a3820f91b558ef291592e52d57b717e3704be72a7f572a4ef1c7c6ffc4714050fa989ff75d6d8f331d5da53f59573e6e5fdcd4af7e44a0ee9b5e61f7f8e232ba2442e35a526d5c3c2e7dcccfe035d96df2eca3faf34494c17b6b76ae27bb0c341126d1b756ad38fc0125b6ac008d57d4f813dffa0dd70cbf975f4d79ea21716cd71af58ed0eb1a04b17f92ac171c0349c34b352b5951c7a2836f0ba66e2780cff3a69a0a90b321c751d39a0b31a165801d9d3774457b6f95ee0c37f7c7a440cbec93093b66b1afa9df073397298c39e1a5c2872f040d9b01f658f314c634d8df01ecdc27fef8ff90d998c570d7843bf6a023d737ac3f34a49aea7c182d938401a72aea3b3ccaab4ea56ebc6742faaf8c69422157c5105d972545c06a30f04946d45e7ff534e9c8b0a019c6c2ddc715eb78b03e4c9f19c107c5404318123fc6edc4c695d11232121d74be4f42449a15b9ac1c1d5ee753ea530e6552928185bce65fd7fc9ad80a8427751f6142ce98b2ca162cfafca3399edd25a63f4587617b0a6d9a8d01f98abf3e454658af777be91bd7f86ef209d0136ecc676901a02a1e0ded59c6be784c30a323a4bbc3a49db757d4356df34eaee415db69b53c3cb85d510a5ce3bbb229ac74d00c0c0016708571a98a820e1672d5d95648b6df4b6ffd3fdc2a6a6c9e82d6a07d152d819e500339779c1890e19f4d95959bfde01c8f1b4bf4b4479a297fdadaf28ebb18ebb60caa1a0c0eb57a16e4d26cc23ab4c9b0d083ef5ed10a3358d63f3e6bfde72d08e947ac642c311cbea4a1a4b766bdc3ad6b60c402d420ca7c4c04ccdeca9cffc5c895a54ce02e2fb50cc2cad8fc848199a7fdc6898346df257aae2ffa93e229cc4e34b2c6b3d7bf879babef6870cf0fc9d5198f7a6e98f004a97936e45a8af4d6d15b3d280ca678a6fd1ce1939602a312e279a21d28f0b2302db9916b8b7c7c5da16258a19936b8619d3b64887b460d045803f180e5e34a594a5098b197d9f2f40c9903d27461a75ab3c82535dd87185644c9634b04f0f53a87f1ffaf9d56dcd60b7e065ef3e12a4d5cb830b7ab8f80f8a1d781a7738115d3989f6b757a4c8ed1fe34648782ab2da371b2c73a5d4394ac7ad627ed522fa9f2b4d9ab76db53676f10bb49ccb452bdfb4e21f7082fa05802a7af0fc040b53ca3dd9e9d5ce9d3eeb0b2aa293aba23e0d5d23ddd4baa0ff89999dc337c9e76e0a5627dd804312dcb0a3ebd4ebe6d65baadbdf124ed9f75696b3267dca9aed2a8b3ede82c6ddc243977b49ff164a79fa4a3ded220bbe5b452e2d48527428e1b429ad8efbe9a1318ce4b116d3cf3603016c4723e85616d6d5bc8310321f6639daf282408f4039a291c850d1876ba5eb713db4b6a8c2041f728993b73640ec0ff5c1dff1c65e9aebf9b37d8392b3d766e94ce2573ca8405af995626dcd8d1f0d7277fda4a30bd1f5fa83f9879d516a8a9737fe44a6ba508c56bd55281f84a51ab99ed15cae2ca5b350201f95f1dc77b1043a35bc23c5d6950d86ccd881e4936ff2363c0a990eb531dd62f94610c89ab5c27a8901e2a124cff2407937e027defb08ed87472400c388185382d8de96c5ba1d35d4582bd707ecb6bde136edc5094aaf64d17410f28243f587f7b120ea0c48178ad9e437aad49b11f95d100c71fc82d986caa1b47a52716713715ab37c05a8025b15af85fa1bc1d4923552322ad1bac7cf16cfc6b4bf875bccd599dcf2cd0161df3460853c5a2eb624b948d7e6b1eaf6b48789383049ec30c4860c542b11071afd13d54674799df6b3fd165c17c6a44337f69a4e17148d2c0b6cea20c43a013f324e895961531fc85537c38e3c12772341f62c8a2d2a11ac3cbcf13dcd1f080194b2f835ad3e5d2200908888e1d15a0da86040d4fd1b898d23ac41ef36f24c2888cd97d081b343ee29ecf00f3559f21ca17a27e4a337c86113ffeae8a4e84a4cf342963360c9b50967af650e2ca7dbed8dfdef02425e646751202bf0ffa2288b13c01e31fe68758f86cb83374c5aa6868798dd3950e255f03ac80beb4be979a50b146b6ffdc3d074f81f092a8a0105bbdbcdea5a737a75db63afb384c1bec8b25be4cd4773003b9a89183b28477ea0ed8e47a2eb7b5ebd82bbe8911b22fc879bf65b1bdfddb4b7bb39abd18c508e87aedd9047f22c6562c24dcb6ba80bc61c60cdfbc9703a28683a23f9842919c00dbe7b132fa5fd2e3a558322ce6d465bd554295b0fe0a12e515f2fb85bdaee8f926dab2872eaf9d45776895848bbbc332a0bbe272d0ea39a847009bd55f1ca853425d195b7d45917e646e619960f6a04362a03a0d1ab51694d136909cef0f597726d38208286a6a8a20a135ce6f0af7f636e9db3c3f7b19537a307b329c24726f842851d0c12650629b0bb79ce72ef6bed296a56e2dade3d7a4869b258b77b74f02b32f7b391b9b5cdce8c329fe236771120c7afbdfe2daf5e971265a0fb1a90797f02db3b7308fe28aae65400a29fd732f51f83c8b3785971182afeaf10748ec67f17e18d0464109d069c7883b810fb9448277effca91379a10fee8831d796fcce212b383eab2ad2f068e19afee4cc2f2fa6ac6690d060d89669b63a47fb334cd1e6779d80d2c1cccab982c15d98d19504fb34849ceec8cb10f0aa4382db7274c8a15d8555379ba2848d1d3516bdc551891bb6d925e9cf322f0e3c917da6ee3ee09448a2e901150a6267b66b8ac8f8c7c50ebd22fca376eacafe0a62d23240e1553145b3e2fa87ec7f413d6ff4e14ce453eee4b20fe819353459249a4d435a7e225c9af412356d45105fa29527231fab817b7484f38a12e52bb9ad8f7aef2cd5d1991780d3b4faa6f8202d524444e00963d521410fa26efc2f34ca12ab20ba2834405e4872a28b15ebd1448dba4e53be83c9b387aafb8872f608e0ab46d3c431ff2f21392ca18ba4918ecc2d153ff50bef1b94f1f55862710efb1a73c37ad1655ac3501458f0916bb068b2fa5951b5bac8bbfbedc4efef2977190bf94e57a09ef8e9e421cc74a3040d1c009b35e8fa0bf9dc806809f6ea779d6dfcb871e96cb44c8c23b0a5af0cd0beaa81f53673a2598355e05dd9f5cdc841d2b7651cfddb8bed787e418584a747263425021a514c014766607ab04149130249d5eda023f2ab08fa57b28f91faf994a5989108ec7648cf4bdf88eaa6a550f65943af6d8359ffa73e292a4f2e3a224b2a8fb649e6660b87c33056063f601cbc509e508019d5a0ed4347172b7164c421b12661cd78a65103c11c89f1bd74785c8394b37629aa132eb003ae20f9d1a54f55e8183396c0892785f68a7222cc8f634b037465fbc1114987a1de5f37d2eeb1974704d922cafdea18829ed51ccb0d8b26b04a1e8695c97d81d512157cb3386b9d26324e2334d53ecfd69341eca3691c062484f931b5fe747516f3622a7f0f191193d06b418f8fac9e53164aa56d218fdaf7cf625871c9c0bce644d48f3099c50b777a7cd735a7036f5c8212c5190a74be650fbc8867375d0643ff4e74f54a01e716f04f2cee715d506ffdcc0d2ef29b5a63a486b5d2082f64bf8540eacfecc7e550b267ea10d1c03ec59304a1781b2a53e7369cf74574176e20440f3ee511fc22d3000f68cdc1280661fc2f12fea8fef3907d899cb2a6ca81b20fbb7af3b7ff0dad020b258e3e77712df7bfddbaf3a2995841bb42b8dc14da5c58eb39326a0c2e2cae029c4b819d4a479075840de9e446c6387ce0eac65c1bfb7e44b751055501cd8c0a1eb9f940ad70b3b6e325cfe990ccf264ae326ef8b1075fe36a8dff7294a574a919eb7b3ae16401562c99e674dc85da3aa21a2a831fdfb1b1691b72d7dc37960ed3307e8a0e2d6fb73283dd0d470c16348bff1a78165e18f5afc3f01f4fbcf88d4bcd8bde7052bb805955c848eba82200364ace1f24bde32c07aa5a662bee7e48cefc2111bad9b4d8a4a733c4d97e54ae14da816d662c13833665b356b7d4dfed4fff7620305d84b08f7149a651f209cd6acb06d560a75f3523898435be513421ba375fcc7861028ab8b97778283d490510a0de5bc9ad1ca7b86be95b4498e113f05eb069afea362945bf02f239afedb2daaaf90792bc6bea09b3e0b4b36f0aac297cf268930be6405094bdeea2f536ddec4fc910dc89363772034f7b220c604fae5c7338c6ed92382b281f2841d97a1865d42270fb17b59ecac956787ae560347b1b6075f6c1039856c11cb332746b8b91f251eb60f093ff456e84956a6b26b1f9fe7abea5da1e682eb2481eb35dc9ce4caea7a9e5ffc892d0f81efd84df02a08ee7b8a8691275cccc7c6bd4bfb0ce60fb20b16b11a0a0ccda06c4ab1b9980e7ef9b77d8e36b9f6dbdc2fa1b202a385feb2618ed2538baee52b27a32223fae12502058a7ea46a88667cf4d22c9cc5002a65a7d279683279fc17006e6a06bc36f59201db17abaae7b282b3d84c49431f52fa873135f64b550a72c5196496e33add1f31861e8fc8f5f70d2a9bbc9ac1db8c6db8019b8218bb939f76aff1d6396e16c56c1e5ffb74f545213faf1fe21ef23d2bca8e2b969564e801d7002baaf1ed1e283ca96d5fcfd142efe7fef79d854bb59a052c2e35ed5bdb48b0e03fe77ff773a94144d645fcefc7daab6e8d49793f4eced7387fd8f375c8ebe0358a5a69ff9e5169015cd041411be97d7001dfe66b54ad2a4d7288074c5fc6d8866774cc2f9002aa07ed8e773bd8263f7b83e358f3f392159d17e0b4330c7b04a2a6636845728a5cb783d426cb80ccb82daddea4a88262f410f6ddd5121cbb65130637789859e3364b57bb570f71da3dc71f54d1c72e615a6e5603116534ec2789d4b85283c76ddc5df358adcd99ab5fad05ad37bbc00067a0a49af619f87183152f79fcf961cc423cfe0ce2bdb93b77397558e492a16d69d3c9162ed62c2156ccf1a35ec9beef48ee203c2cd6bdcb243f21d07bb287e31f22f3372e63299836c0f827aa75a9d2e46c9c79e917a3703a8ed6a18f10c07c97a8e56abac239b4cd1bc642aad71f057e105ff6bc8e67f910156095e4771d6851cb079a694b36dcccf9a22bc63b74a260e74f3a080df8cbd66eb3ebd54910e906ba0225bce33baeda9f4c62cf91c5801ef2d6a3a597e15d27356d5cf0065f3499a5bcf39e8f63d2fdba826f6cd0cbe2d07b2a09f95add26e04fc6656efdce39f4d334a96b11c530c5816866f01681d962132642cfcb8afb7661d6634c19e1820e38ea17ead7e5a24f0314f6c4252a6cc2849c356725f786fc37049b8576e133aa3f06355fe08d51dc14011f40bd29118d6dec3cc05ae05e471b94132c3232b1c81e7527b82526652845d75b7603ccfae14134cac59d4c432831bb219d9ab774c764cf60ba9f23764c83c72f1a967923fe5be90f6ea3b3a4053c92716898414ac2dd0c75b3d9d71007230dfcc63ab8bb0a12c663c9b1670c474acb9f21d3218463abc44f40fda6d4c21d03dcd8e624715ca5cbb346d05b1ffda64d80cdecb5a8b8bd19ed9ef07307c58384e23d43948b783043991df4bf65884ba17903a24f73a9ff325093c50630a584d2573d6c7de4170be3e9451cf019ce1ddd393bb3496e417a5277ad4b43a4fd1d75b85f85ac18ec30bb843799bc5c9b24628718335ea8241ec454d7933a778b6c9406f51519959746358b5a74e2661c0ba60ffb985f5c1816e519d8f04c791742f680d4f98a3f9b698d5161a0eec75ba36fa710819043099543811b1889665a363d06bca53f460aa3241758c811c0838fd6e754624f3edca9872d9fbcbcbff2ea7a20386915937b4b66fb9a25c23bea64c57cacd199c4745ce9ad93186102a77fc34ee15bbd709611f5fe2be5e6685392a199317f07fc498077037220b429057f1b0ac8314464889adbe5a3a54bd70e4186ff718a501b4daffeb5ab6d188ddaa39c1fae0c144bb4b2597f28ab8be55d5316b12e0721af1b2b65935afea07697dbb9acd5d1b778dd557550817351d28dae5c91d822ef0e728f0f97adfbd56706ed0cc0dfa099bc56797d7957894164228cbdd81fe28d00b83583e25f3c02aadde5e9d26e19c83c22cc52351df7d6f3ec2c017795b7d2a25fd63d38a2fcf464c56884f9be49f7dafa076b004dcf134ddb965579cda69113918b558c9ecacfe5b5eb3c5d17d37237d826998a7c8a3f7318a82cc62907e39d9a4f01f7d9b0a94a91940cbcfd3b23cb23da35a38ab781d8d4287cc306b1f2fdbfbd2781f038d77b334c34590ead3e35cff0ce04b7831dfe35146be252e14e2e60f3b9a1d53d2e17803b1c412dd9ede03825bad8f0b1b5b41bcd8b1fc810f23ce66a3dc851c387d126419081174759949c9b65d47ed54bf7df5ee79a3c8d5348d46d4fc16d29aaa23d7610ea33ee8782e54677ee334d49cd3700e5e3586ea35bac5e9e0dd82b72dac319d86af337fb5081472a66510fde64e3ec90268efe26c6de1af01861f52f2d53d3639cfe9070e70f766e116bb7211fd368e7ac2bda47d32d96e7e7d39c9b367e18ebc57db2ad4931e102010b87f63ea98aaa620bbea171cc2b81dceea0e4b04622ed915d89a4798cdf4d95f29162e1b9b201686b3a28da53cf4bc674420ac02d60b89ee97ceffb1629097b787683d7321ac0f54082bf0fe23f4f412c7351b418300eecc2fd606c4b3512cc8fe1b13701d820db92eb946c148935b545fb8c428190a53728c55cb339349ff95125181a99d2346adf9e56621cfcd0188cd9d5c48657761a2cca2a277a253756116f66d8be40158122c1be590c3f6de6dfb2abded042f8888dab3a679a87b5685a20d1cbf19a81ad9cf62e2451263773413e757c6fa9164ef08dc02c0af20051e042f11fad0108728e05f7140d5fb1c4e5e6b995022ec27f174dd32052050acb9b57ab28602502a0aa79f9ed3201aa46586cbb77957093bc69550404710cffd0feac00450570f7ff285e2e3c5214f05c76584bab0ea804b064a6f519368ba68619a99061adb9ca88276b4e1fba2cbdb8c74ac9e9ae08fe6fa32800e3df7fd41fd0c56285ab930f1214cd426e6baf6dd161a3bd32ff7f1663d3d7c1c530f208d8a8d7479e55c9ef203e9be3a4d0e025db3f113ee7e2481e122f545b69ea2f825453079412516dcd6fe57db51a25538dfe1c6a5668220bc6a27c80d8137087a672ebb76584b2af85c91a01653d81047a3cb29ac1326fcc3c1605e409124b1f1f1433104be6903d97d207929266e0d3b577a7cd2fb979e9b283a91d42d2fbe59b23bfffedb6c00a5f3d8356b8d287966fc60be8debd113dc599c5108996b283bff60d68e73aa5a6f198ad548cff06815988b662ae02a2fe733c7425e2207badcfb99f4d99367ef67605976eabb59422191cb47ba835677eb2b7547f5d71d9ee11ea7df480207bfbd868199c68c041e355471d591c2bb899a2ff6f253dddac234ca3673c35a1be4d4bfb5b2d334ab651b34deeeb012c717148171a9fb4250666ab5b3815d2befd083ef8d0591ddfc4afb9048fd63e7599c8ac598cfe099571d04cd4ed0e7fb821455a4b38615bd67765659c811d3a060ccbc40a665a0ded9a52686f97c5b87f453d3115982ec8a90460a7d9954242b8f022bb42f3b91166de2c1a06bff7012bf6dbc2fc89d853f2d5751d461842f7e8ad8809d408bca43bc3896d0f0ecd0301002a15c5cc898a28f891d29a44f27e2441c99c5d328822076d15742f939ada5f0d6d01b2c89c924ed87756cdd574ee64063ebc4b4145f3b1d810229a244a845b23ba89f550053dee7927fade4be854b6c94d8d993ab41f18fc7944e693797f6426fb04828ae13ba2ce97a1b9ad5602597e2316c235cc557ef1143db82c1d1c8faa94d0e086f6993e26eb0a00a4e6a25fdca7529a16c9c3b22c1982e6209f9f4d29e168e32331f48ecd8780cdd2b2c65d2a81cd0c9060e3744ad960791cb37f8f2ced9478e562e2623f65833c38b0a035b618a98c14aa291b2167345d393cd4fd783c69981cf9f45b9fbbf698b9694b9227e35d300d214d765ee59cf715572c321212443fbd7534b81cefacd8f3315fa2d88dce33850cf8722f14156a1fce867004aedd9081e540c22b0b97b9ca4e9c678993456b0cb8faab8cc8f3dda2dfc808a4085d6742319f497f0e202e142dd3c34478d157911bb3cebb90b43dd036c58c242de05dfe7a940bc909fee85701e69a4839baa93061059b55c98dfdff06d5ad39daeb71946ce10fc3e08962735fc859a34bc90f55e04492fa132d74b4922b4803a01f2a91fb3351d7a4d3c34138f471f506d3c9ef7463c1b278dd177d7ab1bccf5cf4a8fba2ea703f807d28b5dfac2efa3f877ea126bfa040de6f85ad274cda3398b20a8eb18279a93cc2cbc20ec22407985135896b1ce050d58cc21856e45422c9c0e89930b9a7000fb54b0cf643687af4f4824b63eab91fedf4e169cd7303f6fe15274a67862c0235b3dc4c2c7e0970876f29c7c241b8ee7ece8592ddf37d93c96b2a3fd970a0b825a320000c7aed2c495be74162e14e9c5a2c871910d68382c06c4d60853410d718f0cf899afc1b6bfe196074385596e45c3722fa491f7d725a4240df7b4af0a98114c76d36e9ebc70754a6d79f51245fa4f38fbfda6497a3e7298a8f847d0bc68f19efdaffcfe1db3fe97f44bbc31c8be9acb68b4cea80fdb46c13c470dfb8f62ea73da73ed410799de73b259eb971e27a1a45ba585eee418b62872041878cbb70f160d3b9be309b048edd28213f2c52282ecacf7567f409548f36532ab1a7b66d4acaefdc60d6ddeb493d3cbc81a68af37ec0ac5f7d6b65fa94c8f293a789adfbe7ce94bdb48e7b520c5b3ffbc18e165a6f874e06e9bef38bd10d6833123794ea3d8a0e6fdda565bd964965c0b940cd47053e7cf065aaacf3a543ba7865fc9905d71c25dfcc3e046fb0c9931657a2a5d2eb9b7cc4147aa9e1faa6ac9f4656724a08a5fa3397638c0e22a11ed923a99188df7f9a5c8a46dede7cdc29aa2b7f8fb71be894e9e3c4511dc2fdec1f89c30ee96ea8c438339e55a309e76c6a7343300ea3b7bf7843e8add7e4b1b4a2d9665ae8c650178a124c84bdf0fef900614c901a6b1f6aa92c9b2a7daf0fbbb76520bfe76d072721c46b9bf8227b3d038f57244ec8eec51a7290b05e037ac477d14a2c5001760311922b58d224f20801ab1e1588cb0c16273d6bea46a5a9c02cec2ed6e9b73a82bb8cfcf976194dea92ee3a6810f468c887e1b61e0ed9943c711b7313372942e62b174e8847688dda3de6889147b74f38d2a44bc27b96fa0350126357fee15cab6c6c09bf9083e170be1184c06f66236ad2d7d642fbd2b00efb1689f2285a30162fd943e5430422d675c8b7dbf1d675c661a0a315462e2f556cae4d312cec04cd3820d1e9d3f051bc746ed98f9fe1fe3ffeaaf56dc83de1893f222082b7fe4a159cc7c033ee66627977b60f71df9c4b28449c8cd9cefbbbd6f8026cfdf250e8041b4763e4bfded5c74ddc5280d458236c530fca76043d03dc5514ba1ade9a3b7690e103578ed2cbf8069a75000f8c3cc23ac7935a08d5bd7b6de9eeab8ad75e82595a3f2c17bdac25480b134739cff7bdc39df284ccb504fae3379fb33e315984b83ac3595604cb1cb6a9b431e8635b8f743fc0475045ac0eef4dcc4f65850796274d5d93d95b4f35331de16940656fd4ee6a5a2a8785b72ab545150fd00bde6f00bc72cc46fa6c74035e7796a3cd739bd1ff319709eddce7aa68071de9672e85149535d32afd71902c64ec24d63cae692dab8adf09387e2c7aeb52ff371d472e48c5fe2eccfcd7e4e6f83a11b759830844a37f4fd658887f567feab7a9e367a045ec9f04f9c35f243bb1e6761cf3e40de1e5ffa02da14e6d37420cf9937e106e1fc1788eb30252daac3fc4fce6be039ae6b983311d532db8317f98672c6fa13e8c7a20bfb28674243c3cd4d5412e4c0df0189ef0b3afa9cf9b783bd02b886d14a59509de0ae6949e937a4e4b2b2be8ba5a9c6ab812b65c13056d8eb3539cd0859ee86a1167099ca9d302f72dbe6bd349704363c73a412edac7ead813abf955682fa9a78acf853217f2997d7292b55c7943c7dcf0ba41aef39f4b659545f2a1fdf34763ad358538483cff963648f9b6aa1b02cd1a779fc0c3d5411324d6e682aadab6b9d9f31b5b1380a9e3c30a5fdab197b9661806cef67ce046c132034cdadf74784469387925ca7b141039f278926a96fde918de02b9d0e133e0aa42ce40cae905d56b5017a67107ebb209ca1f310e260ce7653e3f6161e0b789a9a0a57a5d47278af726efa8f91646f4ff220220740638d647f263d791f98ceefd2a42dc4f39c165b6a8e9a6af40ce3ef484e9c21bc53c07139c6bdf430d091bb2eeb3f0242270d502cbbbbb92814487c3c533286baffb44fe724c8c475dc1c71824bfa00ef19efdf072cd06b3a6a0ae699dff2956a874bbd773fe81df564560dd4e2b14a045d9156fbcb173843ec661e13ed175522aeb12f695e93941b086c626fb2ddd924840994e895c17668f0855dadf8b438ccdc7faabe53898588fe287758245a807281908d6a998aa41cbc394b7a4a6f3e0be478ff108168af2878669f88f7d0e8c878190b17e2f4e2d0eb4a16a311e24ec8fe5a596959e6b1e76d16a3a87895ae4dec56457d06bebd9e1708c0851ca20aab1e75fbcbb844f2235409297b3be7212141b6dd374e0807b24a53fa1782da5eeb5506188752f5968ef2b1e74b0cf78d8c84e73546438598b5111936ec786c335c98b21943b55bf9e735391ed6d406dd044df2f7f0f866be928c4ea66cb3e47a063dea00e045b75aef1bfab520d28298700663e41f3a89326843f760836cdfb500bb0b867645f1334559e869c40ba31ed885118d4c8d9b9e2d23051cb9c2f80454b1208509f24a82af6e90202e9439b0b4734a8054334a04d1cc35b36790ba226bd8e68cb7016ef0d31d5992446cd7d1cfc0276620d1c609694e5cf2933fe2d6e7a437e0dffe9629423e2a88962009d952ec56d4a7bb2a0f63c635823bee13974a4a6160963839d229d8b46b939a8b97c99c7ad22f835ccfdca10a12f6e6810955e9ece8a26ebc17f3878bb1c9ee9e3de0bb3295232c70af99a0fd87535ba2fb72787d0477926e76660296ae44a2f4306f3c9f4ff3b176b0ab7daea6795e1c89c1b8cde23aa5b386debf620fc42785bec500461c775a3efb8d4092287ef09fdbb7f70a003a6622b2653a258ef284cae5c4dfb998b03e425b0ac86b9512c9dff1e71146d7d1139c3c0c1334f019d2fc09ddce6dcfa68d10543a2612e60a69da511b2124c4fd7bddde35c8c46bea5fdf44fab02a0484a718a65fb969d9de9c01a8cbd69db4f9f85a340be41bc78d1340843f1bc051b9483a2a4162e438db2a6629c4366edad09800c034886cdf9beda95f44aa0b7e0339b05a22cdbbcadb931644bb9b5fd72f88d7fceecf15d86527199fc1212b16f8c88a4ac65890d8950e339b9052930763cd37326e67d4e56cd894da7299d8ee99d64cc30919dd1123b04596484b3ef98e6e9f0935a95ccf01c903e6eafe450b0ae1704fd16f1de99be7aca5287f3c7738eee6a3a79a9c3ee93121bb8c076f1abcd7fedad7d8afa155143aa96ccc11a8c61057b573bbe7401bb068b15aaa9b9336ed12edeced006f10cb62d3028275e9efd38453c24a870a0586becdc87e46d96b5d1a5a0052b80e2deef03f3e421564b1b7c41852981f1b3130c281674f67e2065c8c09f6866684bc0d7b2c055e66602d50914ef63c84837af2ed743c4d87d6d1658bd116268594771db9b07be425536a8bd558f477e76bad3e4ee3b8b91608ff4470c3991e762dc118307fe53cef982ac57a0fa48ed650a5dcc3dc61b68abafc96e3008c4f3a91c2f09b91f7f0cccef5d1593970598ae7a6ded095b2a915a4da70b8bd0bea7b0a5650126e35864647c8d711ed9412151a7dc8c13f461ddf0ecfef7f64ada6ddf05e8801c19a523c2e84c2624d8e3db877320d5f5916c7fb42bc616980af53e3a7c471ee17a9f88a5c9dc53e5a9d8ec01793d8b815f6c22934155f41e47989224ca065bdec4f2c529fbf871b6370484e40bee8d7a5f581cf66fc0d727a6f74ef7aed60ed2ce7c2cdf3492b8a1a8891e978a754bbb7803d8f508fe7ed735fb5f762092bbc2e7aa60355a60093c0f21415aee0d5e2c508491fcfd84f8ecc36630ec80ad042332181d5bf9af21430da38d3c78e2aad68348b7cc7fac5aeef38b38e73d0a0ce49abb7af7cb6b567c4a87d08968c4abfe1e2dd0d3e7478bd7d2e8d0f6996711bf1790540b5392925cf27ad5cd15bef242b0689b272ec24809ad1f2f4b472895ff151fd640586ba745790538944db4aaebd767b43f129a3ea97af898fc6f0c058f6118dcf5507d4ca5bea7781adf7e5b9076bf2c3b20f7497553aa7d2c5bb7fcb413ae7954bdf51d9051800ce49db91d24ab451365870fa7ba53160b03833455489d666ca2e66959bcaae712516be82cb52ebe4ca7952e70a891d8dc0021e204ec91513e3f376650c85a9c3b5890db711110efefcacf85a66fae500b1e6a5d1d06845ad6fbd45f8344c9eea1f1ac8c3c952dd79690b51b9f1491b8854951b6bd097aa6902ff0479364f586a742d4015e3aae3f2b3329d16993cf6b6fb771fcd733c7535a935d299a2c16418d18e7253c11fd66dd364b875acf10ed826d95bbdff64789dab6a0b4d7a998d7ea7b88e32af9f9a84a3bd34d465be894f38dadfeca3daa9fca3c65abc6cdcdcd1d83ec288e5622fb36632e21676d92ff8000fe6e3fc14b96c8ae12dee4bf1bae8086764b9743cfe57a411c35f219e533ec797bcd95deeed0d758896dfc6a2bd9d1ded3ce0de48f0e197ce3c737c581fd55f74c70baaf42b8e624280f56f13a7b4c83afe9ba8e7845a71370a3324993c25970afab422b152e208c03aad49d9ad333c9d8e23ba3d00347a098b4558877af1c2f4addeff48af92c9059d674f754750cce8a9a731de8b56634df3202ceb765771a68221177368d6478bd69b48e95f247e20a63865ff1a973006ccf4ae30fc5638603b48f1c329c3b8889d9212056f2c1841a276803ff7622e328f6a7bc26d4bec5ef812738f534b3e781e7199c276f81507efce897129f2a8d8d37f0592cfd94989c08180ac16e5ed84ec347c2485052737668762d3ec98a19bdb1631f6b1a3d8cc901a19ed443c1c0b7b9ca1e1166fdbbf8e1c732928d23555b539ad2a28fc0812e573be4af6a6d877e678aefd7e3c901bb8a6c13e6735274092ac74cb8d8135188bdbf1a3c153ac6f68e9e750f6039527022de5228e719e6787c0b65b7523885b2c456ff36cb8f656186d6f8281a5260434f9e96f1122ef76503d253f0c7c4af7670cf52a5e6f4c11c70cc8f889c7748d6327f354dbfa3a705dbcfb65b29288787d9766a8e516c94972e13485c57802e2326c3948dd5fb97fe2949e23b4ab2e24b9c6dd5ac9a7c774c877202c630f212517491851bfb32eec4e7e46ee42c833f74944cd46f52eb60e34fa38d16d17739f21c44732b7b0d756fa7a54dd9e7f498124a8294b2d5551a94734b2370149a665743f7cc4ef07ced9726bcffc1fbaa71b9281d1a6e6752a3423e601d0e9d1707ecf23eb133858d8b278852f15fe38379125ca3e21badf0e272b4cd02c126dc826f6094dc7b681c148294cfdc2765ec35efa9be83ddddd659ef6057647bc5e01d2c9be747fc56bd6ccf5f2d1859140a0e4f854a9da4e965488ad6ba035b9e74be9f258aa4a85ab89c8bf922944dc96efcc07169eae17bf4468fb0123d8cf0e0b318d5306782e408637526fa594f6d718f6663b78f8f5adbd9f148de648d3e352bdc08b08f419d8e678a3ec3dccc8a0bd3bde00916538ad6b466e0c3fd3a578e2649539f8fa72c0efd344698a06e69b98877d0f997f885c48847c3b199202b5d7eaa032b558e547c6677ff03bf03a5c1734f972d25f3a9b682df2d3332454209816476c4da1bb5d500f0cc14e86171871286a11973a785becf11a39c8fb297bef1f514c5892852ba4eed737743f1ed1a65b0b72b127f87be816c068ba968a9f523764f51ba6590bb27731a0a21ab1a1f098d59341074a1ae31986926ee61bf52648a7ad62efa15b4dff9341d63a85b11ad9d45324cbe0c979c4f0ff97ecc1730b4c294a397ee4957400b18cecf92bc848682fced8718ab3a903f2b00e543a7916972a27325ee960fd2f488bca0a1ff35ab235610b0cc16e6964da05b96c2c1f178ad808c02393303eb69bca5bfe8dc908896b8ef72548587cdecb5192d162a399489c869fd49c51fe7a459631252a89f89a17ecb83f636bb17d9f4caafe92d07fe04b553243a9ed6dfeadd5a7bf782695292f82ce5887aa44d622d7876bcc5248a04a026bb38af6c013a15770f3d0cf9e91f99ce5ca7912617513caa0a31baf10d91872d951ebc14a92e41296f5f1e60c4cda39392f7254329f4025fcb03d96d35a3d4cb61985a32899bf015f0623f7c55a8ece6e00adaddf07760e129c85379a6dab6c397aded96629166c32ac41c5aa4af3138ddcfa310cc7f9109d562cb0718aaf5284b8d582c810c90dfb2d7aaef611172532771664ea08c9bb016de1ff6c12435e513a23a92d112c29dc70f2a0e46ff90e24051021f323d61349dbf56b670d0677ce1a15a218c17366b55c0f2ef98cc5906bd2fdd9b7836b84d30b8c739864de29c8834fd009451d7e906fd69d5a3d47c9f08f841ac5eeca687804fe450eca9db365e0b72e40585a9ae503034be73ac596f2fa6f5fa8027770d66ca26f9db40a3c3983666ad6e326263f2409043d4f0c8b8f54518d179910eee9a35b9ae7ca509c6ff1c46e97971e4a3d3800dd22e342e039860ad31fe13791f1e7048d6f38898ef74ceb716c9b8d50406bb6871b763feca2490ee73aab7cce6f818a6472d728fd76aa4316b74f0bd6d4577b914781d280a2b30988032892d8b70564cc5260bc91febb6dae599f5715d0a4cd57e96d502e02480e1b06b1678fb3e90641aace60c2d0961def11ba6539bc8c39772ee6b9f553e1001231b7aaf432e1a0e51b74e4b2a0f7735b3a7ec7f849a4956424aeda347445902edf3fd0ec88102dac6053fa45af46964e78cb57b122311cc05e2c1997dbaca0fa27dd940724eb4a1e31b12c3b7af78ff8796ee53da1846c51cbdbdf5020e771330adafe0e362edbd349449eb9bce963837d58c1501e35a23a984d832bad667e9d9027db046bc3fe66a46cc16b923ded355a76d7f8a6c97edf685e263b37dd4334867d7889196e9af90e188a1d2ae6cf659933778ac50fe5f538a08ab5451f67ff9d70398d668dd1d1b447b3e06b6765b163f1531b83dac718db5050e1a21b7c84dbcd680e0ad6fb8f4d06249467fedc15963e00c53a6447d1503ee0630fd67e7d3a99071aa62546236e8b130ab8890329417dbb136f7b88208a54d03f1a449c0686d7cd0c9f9e2bfe6cb27aff000cad3311a24652d2cbeb9230dafef3b80d39180497f0295dfedbcf0e2368322677e7511434f4aecfb755cde6401b1d916ccd9f549a74a7f44f80a32f3a88b2509b90eb809831e88f31ee7c3b6c68d4f9cbe4800bc2df1ccfbeac01ca708030f61ae2bc74635165f226323d83c0d2075e19188429c2d0715c108d21fb049b5d2bbaef1452cd848006ea12264dab25fe4ebecb3986393efa2fda4ed5471257c3e45989707218ba1e46fd16f998a2cbf48b036ac99e46483d5ad25d25dd6a7630f5128b68356ff7fbce08afdb2058a6f8fc52700fca914dacfcdc40eb6fbcb651a48d1483e29fd3e820a3a6dcac3f53f55babc8c09a30acd02213504681a519c36849b46afc72425afdb2f524d9374bd43fafa8738a8e1612048a7721942174989a813811d62fbdc39648bccd85af20498250612a7a4e96b2e3ae28d7e096a2d07fd3773d2d8f03463200ad77844f0e56bbd80a65829fae284f089358dd8c60dd89f109e1ba448d61870bd0b725784dc2de7b5b7078be3515e0c4adcd57a46c6088eb2a02d999ac0e0af00c0c15a271bb2156f61ad22c3ad8069902cb09773d587817bec131100966b917c41588b4636886e52973ccbd651059c8a3e962274e435025b20fdd1e6dc63f83f00ceab201053fa8a6ffb282c48012c411c19307f604e7e4597af12a53033c0ad2ecffe12b3f66a103c3553ce7f08d53571f51e0e777ccd5ab0c2d538511e9916089582c3307509029ace0d99af357d8e3489787f5d3afc40d27d1e58b1ec3940240ce6fa14103c7998513774f209bd1b4cbcc5fac8c0f4be208793310a9845f80125265846d1cc986d1d3de870010b5f066714f475f4002db0c3379df1929ac446ba7a09a92f0fd6fb1e8510fe0caf3437f54ecd2ab0b2076396d69d739c25405c0758bea3aad7e7f7497245c5a7546d36398e35e3e5c6e579c24feddd1ec62b33e691757af3420ea46dd92de567e6bef11f4cd999da4c36ec9365b15e29f0f978725b875a4dfc2ec55f0b462f572da2ad3745703353f3d0bc5d7f77595eff4846c78e752e86433052f7572c40ea4fe8e16a3880d3a6a645dbb6b05220478f0286b9fec7a12d3b2411bd8f720861300568925b7db0c65fcfdcd35e54c8742829b105182c323409e3b5bd7d43788016859ec70e88f0f41379b35506b4cafbdb2fd81ea61f9fbcc23229ef9d2783bebd3e0975e36b5e1a3d66ed1a47607a44b0cc8a581401ce2d0e4ca08f1c005009d9c6f1c874ba2190c9011ab229938c5687294bf911eb0a5960efe5cb69304416a54ff2d21b2ccdbcfacc7ba45cc7a8301451f62013d10bd63d5f1f052ce1f8345ec2188561c53c909e613e1f349d36bb60facf57ee2fd204a85c7e7763f13d6ff9e08abf8af995c67fc5238a585e0219cb4dec71471e6a902cce499caa00ac01380bab57d5fa1941530ae8b4554bc0269bbae8a42340178f608c0eb336adc395f5d71f59d60c91801a82c13500c5e14cb5f804e86ca2b405bf12a9e475b9b66c7922b636c09dd10bca88ffe0769f8a8a542abf995486e1392aeae30c126cde78f5c1019e6bd87108e852108b6459e0df038c175c7b8758480596e7a3108076d1137f6aa10a18f49ac4a85c07777817ef9597751fb00320194e787f5bff74c39dad638c6792af2a0d907fa1e58defa8ab6df8027d16085b536bb75a56911fe5217f2b6fcd1d125e455a70c787b05cb5b9206815e495c17cea4fe2290d4ac81782f8c3ce3b92dd6e587f7dde025c4e7dfafe9cd2c228dc6cdb761abf680b6ddace873ca01362ecbacbc85ed2b4cfc05c7d95d217fc0dafce85b4c235ad4e74f50e73168d73f904de75d96e7a459802bd54c0f1f4ae94d322d808eb36f57efe687cc1cc458e00836a7e866664b54576c0d6f3720e56985c0693cf35250331f03d87cf5ba59a2c6d94c1335dbe405fc58cb856f94b14d31b9dbf216256e89bbdef77aeb5764a730dbb545889e931569fa4e181e7186123f0b098f4d0ee374225fd16d309c20e9a5329eeb658176b6409f2aa5c2c748bae2234ea420ca14a2a23fc3151055ac828d94375e3fe02a9319e050aa50ecb598a29ea7ca6eb0bae96f19d7d048190958abf0b313ee89ef1c2913bee81dcd2357f7ffae3950d4fd203ca26f38036aade1d3e150dd60f15bb82a440b43cf2f4c95eb52073d79778f3a096f6848540fc4562254bb3261de64dbe16908814d171f4cbf82ce0282b47eec06609447873a0b1a87cf166db851d448ff4626b76cb6029bac98167604cfb96802e5db0647f142fb7daba7b57ceb72cca1b4e9228d49e816234f0c7d85afae8ef4b885dc25b56038776ce2b12fe3cd7a0f4016094d9b6ea3f4b4427be040861cf6f4deec48dfc1366f0fe8ca5e678dc78dda066c8d06b570372dfa382816523bc4e0df7c7042cdb33742e7d837a48e98b30190f15794b53c78ea4efd08002e0f8fe4449438ef8da13ced724be613318e5f8a58dc9c8ea3eadeffbc56ec21e0589d5f762834978731632b53b49d0a9e90069b487168c2c4105897e188858e41b93f61ee2ecbbe9546788fdc248f391ceacba9d8c7b9935d4868c8137a37683c3330ee500a6b3398193739a5d2a71aa5126d5a1fc4ad5ecbe4441a6717d5935f62845ce8c336e5415fc8f58e50f7c1dcbdc6f0b9a05d2d19c9c4b5139d86a992d4de869cab9d3dbf56025ceffa5ef6604bef8ed5dd0b40e1027cd6a2d07203f6c4079e81fed6539176dfeb9e702800d1a34a45668bb64084b53e3bd46965112694d9332a77448209f3048d106c0a235ef4b52018506fffe0421d450767b4527d13046f4bc42040b747b5817b5ed6bff1b21597c2d954d670394ccf8903ce9bc09c04a66a3671385d205f119370acd60c7213de74df8ee012abc1f43aa46cd488ced3222d6a5076f18b844235ec33bdeee796357608e2272fdf491bc32a48d9ca15a01e6dc90134daebc235745f4c7edcc213ecdacc9129bf1d1107f91735d96a27c54d8e6e3b800563bc6102419d6336fcceb98e4aa6c11a906203236014b4dde55283c0c604cb811621bd69d7d0f8b16e7d510c0e49701b9be8950da4f6419a065b97aeb23b7e1d3e5b923b3784eab9966b4349d0a2526ab90d9f7e366bf895b14b54e94debbb1d97b503f8a8c5dec03e125625110d69183f917e1819e8ec1e395fb428feaa6dd0a36eeccc021a8522924892ffcd26d3711ce7228d483294b8ef5f74b51856a1fbddb79ae20eb92d5d374b69a0187a94b165e17cedb12af6a4d9805752721011e457ad812c49125047e740ae3067fc3c4e3291a51e81cf6cf28b76831f464bf0b14f7635e09eeb231fa186be51f164b4aa669582ebe86bd75bfd10f51a341d397432d98315ef71a7b5ec19614f97831fed6c2c62c75d606d6a4ffefe43a5d5a87caf225196c5e6f2a44f6945215ce26e02aad4c9f636c0c3b31df77636e20fac9af559c5363509593fd626ea5ce50d730dab15e3ec1be89f6aeb2bf9225eb1cc80cf9a8c5cbd8c68644ec0fce9a7172fa73eb34f1d4801076f4f1e98c64bcc5fdf4a32f3f43c10b88bcb93ba15eef2ee3fb7e36bcbc95600608fa68f7eb171ffe2773fce222da8f4109cd70e50e873a7378ebe50158d82452247a969e0887b743f3fb2209acbf40bcd178e41cd5b22025bf98d3928a1590a6d00fe62e68013d5e5df64bc77a509b8c7ccd6846a802a0b33aa68cb47bd0c7b955456812d4796d6a448792c7ef127de8ec0af0e57a04d99e329b9032b0b1c7087640b8f6a00bff8b1c9c6e41bc505566a057d812ff810098e04fe4e65b8d1bde9793d97ce8dee2de87f68370b2b119aab39855e3992401ba3ba5a034e4810cc50ca238ac63d016ca5076fdf67c49629b77f56ad3648209b4652a2f0a0a4e4e71e20fcb7fb9d00d46d1f9ef7b7876b400898e8a3bba6cb40fdc3469b0b3c4e15595cae77ed5ce25dc2c05cb5515adfe264db5d897dc987315302678ea3a3a8daaba9396966d5152c2060b05708898ebd7a3cdfa11f548c2600067034b565b6ce4ffa5248020f5081a4908de05919cb33c270da3e97c1aff458f3e6ec4c2d42e987874fab097b446dc7ec62c0f5ee1a72f1759a01e2380c797f5e80f71655e4d21ea5da981a193c9c9769137b8fa332e9b675951b577a77fba50792919d52710b34885cd95bdf1e429d909dc8cb30ac7b785c6e1d058204fb40c73bdd78d1b1efcaea9acbf219daaa1dbdc006c3629255544fd5dbafb4b71542a0f7acd9ba5b6843bc318870c71f40167eb5ed401f93a202945d6ebcff178a80a31b7e0aa3c894e33b2f524144c940261e7a4e4cf7e8ed9b1bc4e3ba900817331fc3f9fe1bb4581bf855766b7e7a2c7a92016c7df88a8f528358abc34a4e68281a1bb006ecae4c67f1ce048ff3ad982c689721379fc10d44eea385349000a549f9df497e3b6e6fb18e16df46f471fc5ec078d0b1203791a7d59a3056143447838de04d489b9ff5b8cd887f1310b844c4205da4ae3c1f19e0935b1cdda670b8f55290ef82fbd3d4743be8b68669d8fc97089725fdf0c7b2bd3024eee0628ab838d38db6f8f9154b941aaee86b0adfb376d7c5c669be923da87971f4028a04de29134b1b2ef7fdff169d7d40396edca14a87ddc4be16125f7f893437675e96d1adb586b98e77a63c4704c88fcb3f39c88fd18bdee109d583e18f33f694913f197fdbff8793277b7a1e58e3d24e84d6724f5b94e02e3c655caabbd7dd9be29c61fe54f0e72755664e1041c6d6df821ab1b7c2bb226577cc3a351c66644d84d2aa7001a5035dcade550fe40c2d51e456e1f02c3d00fd338050ae94d7fd34c2a81e7e5ed5cb4e7d32c059b2039b5ec39627ae18492d7b840168927e536505edfe5baa1c3322e51ff9ee92ea128ddc29f851babaaaef1c1323d8527de3c38644675495e9b449759974182143b084952250a6472a5f527e5cac76d93c95f5fd239215d466e8b579465071da19553b72dec29d58a8ae4389bbadff30ae8214f75739a9959fc96efb2223b0fab56eed3abf6fef8fe18a0bcc828d0a421a3c16d36e0b6d60f72c66f94a5352fd0cdeff6cf308e6870bbe852a7c869f50ee30f5b1aca80009fd2ccd57679ee1196f88d84abef0302babe9c3ca34db39dc961933128c1ff19a29878a2d85e0dfe2c03b0bb60247185afa6e2cc3d62abe8643afcd79ad3e8bbfe538b2adedf04a0d3a683548e08239ee0caf86a22a55588fcef6411463018fd3d7189416249440d6b16a99a7501797591a47bef66690812bdbfcc56c014217bb116782a89620e53d010291da478d89cf40752a3cef95e47b2a866ca451bfcb5232cd8ff4040b284bce129ebd84ece7789acbb21fc91a16a8a82ac66c9fcdbaed01c9dce588c27abb12a298499ab67e979ffe838d7df737a96c09e3d0556aa1af0174cbc3484444170d9c9cf878cc11f5138ffee84ff7a46e632c139f60b784c3f7c5a89be922f31354f1520469b68baf0a2701ce73ace56bf0b537ae9fcf686d4a82faeb268526db60bed4b459e9ebe6039b4bc4d4183da0acc69daf27ea04658a866188f195e5883989bce9e30e6671e42f737081127e04b2fb8f3d231b8da14b154102587b463efcc85561aecb433aa60471480e9c80b9f39f0e63eba6f8fccc8c7959dc26f4f6681739b7e559b0a72450759f60717b66daa0989d478f284ccda324ad9afbc690ee3c0476fb9692ec870352e967b135e77f4487647b80ec51a36ded6dd17d9061c823c04cdbefdb6906e4d56dd91b90a908e8d32cfc041a4bd6ba1aef81088ca76e9ef71514104ea81018fa47cdf4d8f6b595343a957117bec090a2d38493a8aafb6618d8abeaa2457dd0f4423dbe7bfb60f378dcebb14dc9a84ab1cf3624dec05cd1ce305e857a4c482c37e9129b929960ca6b8c2f624e73418bc2569f5bf07116955931321d554590a94c15a3ba11ab169e3ec0c6c1a8031aa1f4a549931a8d6f4f67f084146c56e023395fa5e2a06f44d8ceca6d8e8170e452ded0374126645ccf3c23414950908cb487541fc89846c61f87682a1a62735d00ab699e78a0a97d0974428ae97d3ae2def1803e72385f3bcf3d06de749c838f7241c4d1a4b7c5b2d477a1005a7db93f6631b97ee0b71af7cc3791d707e5d605e39738dd73a618113fcaf64a3918048a7b18df5b9b26510f623204de5ebda580d1a91ab8cedacd109f1fcb5806f02bf7296d574e81f3f8409d8ba04c4307ad611d4550da8ab00f6c7da44cb5c7139852e778f8db933ffdf8a6313e312defe088db7bd535976ad1b754862d44882ab0beef03925066f7499c580de0f4097d5754899568459871771bc719aa228952d098bf770c8372986814140747c6412c77ebe90ce008a76ac9bb5dd652c49b3e62eae2016fa5931c3ae972638368fa9b30051cd5097e80aa52224a4b1b710344db10548b61cfe642f89f29e0329f88e3462aa619b056170e31ca90fb2a5b9eb7ec5b40bf957d6b9f90242c2340be336b84668e25221d649f9b9411b145a9182d54e701c509285ee5e30620a1bd25d20d19157d14a9ea3886f12744b2d5899550775a16f7ceca026f097d6e72976457d308a03332ee3118dfc28bc0d23374a449bbef30f1e1baa14a5954687f72f43c40a30ed57ef8e74185f0b99350f96a3b45f59c74ec9c15adccf8494ce77f75b9979f0d0f863f62940e502df873b107a3db1b2a78ac7c0c9d5c0618445dbba99bb805e140f941c8af163311d2c5507d9b743f483ecb238ef267218bdae691de72b2c2e22de5eb6540bd81e908ea847b17c8225786a4c34b607aba1e7a357ecb6187a797dcc552be8837b069353e773117a549dd1e68a0871b3371eb001f82c7492b568d0488272d244f3e5ef0171a53c37a207418dcd5aeecd8e819e227a62e0e20f201fa48c6d9b4f64d7039f917b6de6b8587bbb2fb369c14ff4dd5ae0307a2d2efb771092e4331db56da60c264e2909d2189737ac2fb29d638c34d2becbca74ebb4898d3b32a9e2aba9c1e51a849ca19c5158c4d8acb96329d1f85411b8fb1f14e77af2333785159e25a5f1efb3263b584fb2a0d6509b68d1bfc4a375c431ebb9b57fc47ef6e649919575e71830ae6c5b80f906e5d29d66c45e7753f75e87cac9cfb67f704afbe479c18b4379eb0dc608f35519efd4447fe5391739e4c596055522919f93ab70beee56db5494cbbaadbfecd5701989ff158068fb08d852e89f969355774324c207539087e98b5076dbebb5f74328a5247ce27c895be1966d01bc029f77139fd60ff687f35a009e6e4d3ea79711e6a52eeff14b3bb0bc263f161bfdc6b4ba06040fffe7e991f7848ae20e1f21e117f0d2c4ca477ee6d9889bda27090f949778cfeb1d5e4c285e0475b72ee2d7498d139d7fea3622524b550452a4230f0d74ecb7b093dbb0b3bfa47b6c657b395f7b7f3df71d4032bf7f58e498987606358e409467814fa7890054cd6ca0d9ab3bbcead115dd484f32e1458b51a88170a33c66e2bf063ff50c1261586429eff61122e52506a521e23df9690de74ca5d7c41523a7dfa100fa040bb5cc2b50d5e02364d5c47dafc94fe3c2642a15cae8e78953b3c766b106fcfc838dd0d829468f6f9f006a8f5025c00752fb4bb32a8b7190400e8aadb1797750ece4b2c37ed50ba6e1ed3b71e97b9e0747f288b83040397aa981bee51bede7558155014e4ada4904a703b403b64c91c9168541ca07fb3299237423a97207b169e4c0e0a89d584ac95339ad8431d259adf2fb8383b085fe757d9833eec7ad91592b46e191920c478391170f6b28ae6f6b1d54f0ee54b442c14690f03138685b15a7b5d7b8e3716b78497099d97bf5b31c83b2f78bb5400df2306c9bca46fe3b7e6c4ade6517d09beeb69613592fb680ab08a6b26ca6759f242f584bff092b0101fd8c14a46f874e1e7ac846a22062f73a23d17e244cf85ef3d0b1e5aca2c9a986bba105e8435c5ab399573e881f8b5bd4b1f766d245521979cd0d058ed95b3afcba953853efc2d4a9736f45d4cb1ae99934dd7aba21738aeef3ed7d1306dbd64cdafc1048c6652a6bae84e3e9f1a8f4e891b9f7a2dde371b47dbab2d1e2103d761dd930e1674b5156a64db1896775894b279f9e3fd5ae37179bfb7ea6491d85f299642e570c252bc38e44a6b3a2186926055d4624dd0de23f3dfbe724abece823ab89e376cc4dd87303123ff4cd09b6968006a5c5978c7fd7f17bbd54ae8c7fb0f99b3830814889fc2f9a1df2220b40d601e00f8634bdf46881e4517867608096a394b46d5532453e02375b9e4f3dd01116ac3c417408a2e4b7c0a4fbdfb3547dbb59b683b8faa3e6581671b136d95e56ff86610a54b1afb9ef0b354401956e6b87f248edcd5c0e7ef5a715e09ce621467aba6ae57b752c34e04779104b770c10533db5c2efe3b88f5722da1ae31fc764771183355ebd92f074f91d18f4b7cf34cfcc1604937bda1dc35360c3ff17fb954477681d2192b3c7eadcc0eb18698e3a73667830621a642d1e8aa901d58ad5350f8d4dfa315ff951effeef41bec4a36562e4d0b8da1bb1d59d230c4d0ba85e48bd6150a4df65f44830438ad567f28695bb9d84568bf2cbcd0c3442410dcd3bf9d810258de302164c96dee9c9feda471074323d785ba00bb57b1a5f5887035f5c0eb593abb0d373e73b4df631f6227e69ac67a7898d5758c00421146961308575aaf8dac1315c520d4a3daed2d62420c86c485bf53d353910bdc449a23b80faea8b10ec69af40a6ac23fa5cf1297fdc04327c01e2f21eaaea621f7197041ae2142afdf9642c900f53e60eea2d0c2dd6cf652280913b2d6bd1eb93b1c39a480b8ca1d369011682e930879ffb4697f101109929821803853f0205308ce259e73f76791d25830c913c956438aa183bcfa50bccd7ca75058699dc3811d128407266ab99e3f6c874bceff5c7ab39951738ccadc07bde5ba265a17dcf77dbf25f1f2d0b79ebe79c410c0ef6017c138201cf132b3590908ffd1ccc02dffa3e0e0a1e6d9a76a28da7ce2d7810d6f7a8acd222e76a1961481939e9bdd548993638d94a3312ada58f3e01ddc752a2978f41db37535df64f0a669c100eac545d0c1960c0164837bc8083dd2517d1b2c36e28fe1e97f907ca02d518af0a67c64d5c4d7d0fe7832d2b69a172201aaafa7df8b5c0ba55f9531f9025a6ce54d914e3116b441661d4e4a30b3012c5386dd1c55c766d89f6eafbbe228f474a0651762e98fb5034fe955a60201f104fc3f11ff69fbf0e1511238ed503c5551169459353d7dd4bfb916dd7b6792a93a84d8d647ec8c86a96dbd187cbeac07ce61b1bd83a8f0eb0d10b4bd6f22e987488f1a1f6ca5689bba9de6f6575120a087a5c348765d9dc69ee433b50a8d8bdc7a9ad40a2749e2f13f0c09a79e2e2a876c4995ca7d9ef810d2840a170d672df9cdb25b4cf686fa3666148ea0ea98873545b48da593ffab3f42e31cc29e538519d4345fe45259a9913243e7ecc0f47da9813b7b4cb2eeefeb98ad1625be7e888e4db3f2d1f8d809d7db2f642f8c4d362d97d9e571ca6e806a0b02c1cd22cd22f7e0df9d0fd6b218d01b64db7c98c5ca12767999b099434cd4cde4453d2c34b2c3404ac2793f22af801eb10f30a9e352110173e7911f1c45e4e02424d453bf1a88c857acd02cd2614f289cd901547c8683f071d745a1931b31a3de98165d420c47ea62b90659d0b2aa0c5983855e74b03be84822f14d8041eaa404f9826e8a73642993a9f97eb047b3c3059cc35bf70f610dcb2804a04f06cbe6d9b19c0a07e66d9380c5a6aa00a1590eb274ad0192b9a16a8fa7ea26134c569afeda0b761fc9602afc722ae5a477f307ab7acc48fe2980dd4a11a51364c4ff419d851b0676853fae4b2475693172df17c99b187b05d760b5512302d1af1982ff8d6dbe02de835ac978c889d9287ce352dba66160fbe2e6b4ab0f6349af4e29db2a166bd7b0e03fbb2997e755bcf1db66f5bc539ead62c03c22f31f01c709cbdf6b569f265055bfb1a262e3083487f4860065f86796390b18216e8019ba7e539fc3b8a05caadf1dbe78bca2cfd89b5b1bf0e338411c974744888252fbceb7833f262c9440d31634150d55e6a96785d0769f10e06a39f099e7be86f55b9b37bf6499fc9bc4b9e2415644dc6bdbb0e7774846d6adddbd2ddb549ed8730b7acfbcc0642b609c338743de63623efb77f73e4f7013db25ff594983d9bc55f3be2b5e682c76bf1590962a5ff1db37d064d43ea24b1d87d01a292a9218ae3a3742d1bdabcdfc6a5cc93a7d49618d9f5aa73236bd19d354fca5ed39ddf553a0b579167742f4e4c347d402903fd94c6216fbd793de73f8375eac180ba62944a4445bec5bef2d33a89fbc70998aef0b21a1ca549ff6e2babf42de798c60e2cafab1acb7f07a4ec97d17b41263c1272156bd2b147a06236f87a81245d045f303f2fed17c027ea2168dde41d970bab75e59a96b26da14a5f624d242e6a2886dbfa704d791d1668f6bca0460d873d226350411ba6fbac97629631de189f853019add5e496ec36bb59387ab945e7832d11a23aa7034cbd77ab1df17ec2d620f882af7ca7106c97b1b7f82c2f821c45a62b5c2b904e11ade6d8522f011f424ae6daba5403b26c6c779d4198f065fcde0d90767aa181e21ae9f61fc1175087cffa8b1501515f9f15b765b8e2091d2cfaf8056cf1e6d9ab68cb66dba5e51949547c6d6b1cdf15f3bca6b3852d7bef4dc9724f005c36481e4761594f2a4b798426b1b29e391dabc1d0fef2c67e334e5f6cb08ed7b8c435f385f34d1e1d1d98194e3fb4cd4ba4bf1b398c2b14276c3ec63ed64a87fe2c11245e25fa6f08afa5e4f66f8c56a2615c1568f14a5482818522ae3f3fce01b37d39a4b9a693b3e9ec05c4917a54336cbb5e7c7a7d346c67ccd40481ca507c3cb3aab18d5b4d7f92e7157a30a66c708b09f1a02e5645440f617f444f59830e7247333a30b75e244a1079d6d16895ae5846465f33d6f75005bbb0522bc5e0af531a00073be9347c183ceb3feb92a97f3dd0bc4b7b3990438aa087ec66190050fada1db9dcf1738b2c50ba16904ea7c9ac7eaa92a8f7607a9e7b467d5edaaf250536a3bdcab5a509a8d90a67490d79f03dc5dab85f00315e660a52d2016ae4f71a710b04817f353c6c0557ca79a48a5025133525fb8c132929921796396d541988b3261cc585569267727f0f9dc801a44264a3e7a94ee07006eb2b186158d3e2affdfeaa6013b6c439a1ee36f0382924334fc821f40369b30d03fe5989be08d980370f7da6fbf2bfcc8c21d3f75c789f49533013e67f601a2fd62d2344752920727cd548103c6a4475a1ede217a9c7fddbb3516553d1e7940708881b668857f0dc8f8d51cfac369f2b21553f82dab96b8203c217b63eef339c89b83f847b94e8388e4756171f5a7b0a83f510c30ea428929e1be0c6fbbba6240f36e53449253da819aa6f91afeb69654699c76e3a871430e477ab82a46480e43fae305d0e088cc800fa18dcb81915afca3cb2e1c39333eae2e08ae53406866b917d40c79948e2b39361a5ee122643f9b704d69b59b649ebd3b37ffef20e46e9c5385cd338f107fac47157c07d4314d3bf7e326273651a72893e264c6cf0749a05d3cd230d62761a617d4d9c595aee9532dc2e880884865b17a7f5b5ed7ec28fc5898bf467193ae16fdb2b238d9087f9d482a812be51aabf501ae4f60f68f48f66b52e419062406a4ab94b39f8453dae1d2863f60bb46fe49edd162bba2cf68925099f60c0de5a5dc4f1f28d55f7b81a680f0e6700605ce34b62095413b52f8871daf2320822f4d9cf3e098a3fb7cd6c01199f09264dba82f7f63b7789b6e0a84c0794f2930e25fc7cbec9e615549c0844d294e74bf11e2bff67057713919453490bed0c9903440e5f70f328941547e036b43e41ebed9fda2141cc432b40d43f2610aedbf0bca3f46a5768db3d1c45275bd78c147f8122590f51a1aca35685ec535eb22f94514dafbb6efa546ecc72baa2fb042611b0ca04da6faad8c5a6de3425ce8b1d84e4774f4c5257fc922e2960f3bb640ea4734da542a6ef98e3841321f21e89b22a9927adf888033e164f495f36d269b89a12dc9689196c7b2a3adecc1fa6192e7ef3327f4a219ac737ed29dccaee5e8253a544cf5e78e2e0247d080f0288f367673353e65e1c53ea0d922dff91c5774e5917f3a91db000506bc015946ed900e3cd34c50ddd913366c8df06f93f941c2e27c4d10afa7847f77bc0b33f32cc392a1c3b07fe6cf8dedeba5535318608aadf5324a058e9118c3f7d110c31a3000d1fa8f71bceaccce4bcb5505249b64ca7899ca2eaa2dcefe7da1161ffb23b47e46debf32b07822e93bad9b1d606194e90b82e6804977470fd77892cd5f5f86bfc30366406f5612ce733d90ee4fcee714e5cc4a28d1ff3b294096d79a4ccd24c4a1ed765373a9a6381ee56f89f7207988f54dcebac14d142e3e0b5ffe1f2c8808778549db74b592c6cd160f73d2d89a1a0d3f18e4a7b19c9500dfb2360c5ffd4402e2ac2ad080ca60303d8659e6486332025870e59b57ae9e14206e55812d3fd0a6d8de89d846ee8b8cf492fb0fd7b2d08da0c29fac2a18f35dbb3ba53d5a4bb895883720ad0a2f23235ef844a692c231f29bb28503d9fec48b26dcc1f76de3452d505dfc6a220c9db71727def40283e8ea93173a5c37739440220b62c20b8594653bd961b05ca57d0ecd40dd382e76c9f735519f41248a7869b4309a5aad9f5d38f21827d21cf3821fcab386bce5788080520cd61c1002504c549e532320cd09efca322fd0e9e4b34801c5beb9fe7e7eb9acfb5c0d4f6f3630fcb0aa8f7c6def76e30a8a0ab14c2ce9fdde4fb4ef60b028846d69ad9dc01acf7e292190537b0b097f0fe1d296b02b08a277c1cb5e7d4d390766a5097df0cdc8d5ec8be3d4198e0fc72909f3844ef0195e01a00c3b1d078a6e9a3e32a6069356bdec64375847fe4a94db7ee1c5d3e0e2c935bbcdc6d68d2af1bb2847b49d1a5962d418ad4934c3d869d4bec2d783547e886d235eda90c027b3797f5023546ccff23e33c6c80392a5b25be4b7eac5faf0f37f92fcf8625c51e69f27149af2122f556f80403d45a2595ac19d07b69af64339e22715d82c977c62056bf78fda76d319c763ba53eb62b2e1f328143d4a3c0aa1c6405e1b47e752333e90f452cb5a0fbf555ebc785b768fd5856a395997cfab7af9dbeb1c99de7b381777bb32913e11f7bc487743989cd69d21124d7482991342f097000a85c5faf973264f61a5d235e5eb5aa26237f3762d622c1d7c9afadf6d59062315cc9284fff626997dae74171d1083cd562e4d7de09a16ad68870c418c9f700d5a1a946de474f67a650b4e347f87bb2015c1270ce59e32dc756aa7e2c5c22e849d790fa715803bbc86b93e2aa2613945c3980eb9e5d7bf132ca391c4db9119ef4d362092403d641eaaf39047c36d2335e9003bacd0c543619579b66116010e3c7d1edeb8b22e3d02f8706d330fc1b06542fc1e3f1bffb91e3184610d2e657d89de14e37aa182b0dff68ade7c0a62970f782d7f9ad67fcab5135917e4de962cea0df278e591341539c87890b5fd597fe2e1c3b2de0d4f47d139e621493ef836f957587481a253cd75d3b78e036606e0472c045ba7b6073e83e712aba47c19e62cd3e0089c53ad104eb21795cdd43b265a5f4952ee9dc81f3908d961e2903ebff3ac860c915f1e9207a9ddb78541f5f09e5801a1d537bede210704d3b5fcbca646a1a5dc1fa816db650971a405b346bce37d5a66ac5cb8bc83f9e622cadfa0c59c6a62527d61454caa6291c4d46be02b87d1cdd51022c68a382606da99d57de3461ec7508aea19bc918a6615f2326c6b12b4118162de5ad6dd587523dbba1702232e41e2fd7fa4725a7979de869c757f724879d764a295fdd35fbd4528c37a586ee91599c98b7c6d4aeac9a8a751e4544c5df6733098e12b81f0d9fcb5351868293fe8b391b06aa54dedb586b18094eab21b4fa7da576066adf08d2cc884dcdc3dcc1d43c4a9b83e09ead6f41cffb4f26d491f19d910a770476e730ca5fca7cb9beeef7cf9f0fa7f389ccb67b3879e9b91d9733fbeff7ce9181a35acda86d86a16ca080ba4efde02856a64394a21add27ced65af18ccab21aacc2da705d48f7c98c5d20a66487ad029738a18e2e2b3329a67de0ad034ac5e259960d1f33f0cf161a380d2fa686e8f6120e9be11257aecc89d1b9ff66e326cd5bf70727ebe2d4e5e9dd4359627cfcad0c5846bc8c0f9d97af1921f625ada2a4ad38d2909514f23192b17496899fb9391a4373054c9b8fbbf8df7ee0763e8b5376330e3f24897b0b35513b88b989d669f2f2d94f78dd31968e6d27403ca867f0ecefdf94de32fe230e25e82d9ef0c3f1a7aedbc1a9404bd8575c2dd2b56adfeba9efc7e5edf223cf577ce2bd473a76dba366738ad643ee140427f8a8d08f77d9b0b1ec6f8dcc042983c8615649103b8c12ed63a271b52bf6e191e6f9533efc06b013c912206f09c473ca0e53e9c01ae6084fe3d4bfe4cb0bccf2715da5640b8a8034d2a4d7a6b84b6254ab1a97d34312823926d004551c8f667744e10875e56feb960b2e949bb7c980517b101898bc421ef1eb06714c803df6908c96d2e400aff78fa0ed1030db7f7c4bb4c8d741017b3febfa7c8da649ecdbc4cca928f4e5904fb28f45f0b2665bd101ab82df3aa378efd1d1e4010fe1af5467b376fbef99febf498f2f21b5cb2097094ddf1551a72f9967c03c7034e958f1abf69a9826a18f6cd6229b8962b0d2b95fccc0da93e24b7705955ba9ed75171f21d38a6447971f8bb46b482808f2a7f6359452c20cba90fd5fbc1b47a7ba7a118ddc25bc04bd6a85ae1e8f1d4a44c6510d3e0915284c568b8fb1723eb2840d1091d11b9087768c556ad06dd2bde65319a00020333957112dd69c4e789a393f13af2b13c4e30db6987d0324b8bec172c64d5355f5af232c38f741f680d5c5647120cae43c3e3a12b07ff22978081a122df4cf1c5565f0629824d809cce02c06f2052848364aa26ffe25cd8a384ef6c3494e5c4fd702adf98035914fc3b44bf00a59451e810cfca6e60c3521003a2b8084830c0211ffeb1dd9b83a637e122e07dee68d0c879ff43ca200d4e5473ac4f89501860ff35ec1defb90a5f185a91c58f8b00e04c9297206208177e27f06485feb4c26ad1993d7bcf1c8b5345ad01068fb6e09be7cdd9e9d6554f657e14c5c9f0d38332d94e2829fc228e3ab012ed184868a6dd2e12d0b45770c469ebc49a5c81a53ff62a9bd2f3fed670ad417c2898f27d1c7f735e3985941f4616e0659b75d94721a32f07dd6c7db51eeb2dfee329d0b34b12f6500a86181a60066e79aa6b5c3d6c1a33cda63edc8a525367f5413ebac47d3193c9e2cc726043b7437435410601cef2cd3f073ec51f2a51431a9eb7829870d3c87da08d6980d41c05fb162f2feba8c037502febb7ec0e1a1d1230041e1470744fa098eb86b6b87363a41f40ed4f054b2a4f27cdea126f64329cfb9e8e26eb1ec0c1e8d6ce0f86a6eb269fb8373bd4f2c1a3dcaff9f24a07d54b8083103624e6dea107664237bd859c6bfcce206ea3cd2feabe672c1fb029fa4cba260f6daaa0db2a8ccae28d6b7055f7d815869a615f341db1d4d747662dc92882a37bd3aeb9af7c345527d360d42f78cf193747c5a94f65daf3fca2a63aac577f2e31fa49b1670c0fb54bff53ec53334bb03b6e55334d820debc43ffe55b6192347cf77e7b7850bd064491b7ac6f8ec6429a845dcfecb28ca0b24ce72b42299234107a8592f3fbd945dbe62abbc3edb6091d6935aced5fb5a4203f6df64f4d7b5ea96509c424f58af069d21330dff410a8f1c71f4459646882ddf21f3890b65d15656ddef0792fb8197dcf7f2692a41ad09606bb09994264a145455bcae8fc3983f9097194e2b94d70d388c7f84e5e5b05f802f345efb2d9fecc117c95fbc7777b3eff690efaffd23f340f96ad0cb77d2fe413d5dd2af4b8b67d83523e81270fa8a0a09049cd22e5adf8be22e20894954878ea1a8a5f74558109e4e1e7b6d18d544168d66b7a299756a1d6adac7f359b1e30a4fc2d51322282ad971b481f7c4f84eeaeeecd371c398d6074023a661bb47d432613febed9e41e2b3b7415dd25876a04d380117272b7dc170200b40fb57b58f2ae4022c54884adbe0540f534b96f8ab887ae08be48bdca873a587ccfa20f1038794b2b86ef3fde50ec5246acee5ed7a1696474a0c76ff43d4432b81bc7d74e69905922b0ede7d68af551055a533397ea20cafc172eaf9d1756638f9072b6c51da2eea890072193935653e92ee32daefbb5b301a2410e757bf21aaddf5fa455ecc3a315cebdd71be8cd34278f941a29f227038c72a4a689682bf73f12798c774249849e1fb9d801c3c43faf9eab7e5e5e084240c3bc49944c7496c58eca8cad0c08e71d3bd570605254784c06bc7dba063e169e0bcc140a5119a8a9a3c4335ed5728fc5cbb55c34e762cdbf22ed009baa0afb8fb2d140e9fa1366d22e215c049c2e725313778e19cf234d593865505e542ad4d30739af698132787fd9de7b8a1c818d5a3ef9f0b71eac4a354bc25e4ef9ac55cc018b5f504a19af17316069e7c7337ed7a0597f75aff7bfa0db074c3c266246c7e7e14878832661713e348a6840ac0e105eabf98d8e56b480c4d6dba77edbfbafeb7d77a8611abd339b26a33cf35472a3a64a1cb306e5a9600061431980a4558596bc6b102ffc5839a1f04be86440a6d4ec686107cc7c0e706f754f4eb276a69aa57aec4af2d91dd0af77210475bf79f02b87f07549dd4ebdbc9893fe27eda3979585d75e7da87260aa931d5212c893367f3b5c757651366660041f755e7e297d4d9c2ee1d55e639b69aae525283ddd75060b051ec9f49c946f9905239d928db7c248cc4936281ad22f0f836068a5306aeca6155a513379803c2d816eaa922aefe15bfaa69bca3fecea4326e56c47b824af5cd562f44eb99f02aece6e271360872024fae56ef69ea86f54868aa587cba5dc962ace90b66ab4ac4a5ebf42385b30bf00d2b518c86a36746ef32dbe7f70acdcfa30645a67caa12ba9e04edaeb9495d20df38a7aa3fc2fcfb69b184cfaf3396b8d5d3a54f6d44172e62fe64dac5ae18fb80c65451824a95ed2ae661cb8407efef433bf8fbea089f5a1aef43ee381fcc05fb5145a6380dcafeee00cf191660489e862ba23b901eb99c3bbe169246dd1e1533a30d02a29f0f636b33a474937c01b4f98f72a7ef13ab0d15d48e12f03f2a3ab2c6fb748d656dcef33cdda369b8f3c31a6155ddfa02112c5869d825bb8542e1a584fe8c9500e14705cad4429e0fd1b74d84ad7ed4ea70f60e218a30dd4b160a84ccef8856693a900c9d413b5765c19ff3506e29556481aa6488ee6213e72ac37ca1f9bc4eb660d8847f840191c0f1acdd1d86861d50ced2991e82ae3ebc4293522d0c81d24e2150ef47a9b523753c6782c47b52193f5882cf7804d03ec241dd25ba462cba192949331f73a63b3f9a3328b205a04e1742b24cb4ac0f31675de42adce7b04a57c040f117b22802ff889f21117576e8932fe321dbfddefe00ad1239e6891a1ad5e79b1d292acd01250490a1eb68f05b0cbe281c146cb94d0f156d0cf9e5617dea61ff798c2f8b47b0554c4672a1fa3e3da3b1cdd034d4f7b166f4b7ee2585e45d6d7dc5598cfc871a2446711946978ca5348bc5d301cdab952451219a149726c0bba557a1eccf455932ee4fce6ed79dcd58f124492005a5f3d697a5d15e1d929c72282356e579a5da422a884923307be4ece330e524abc0bd8ad109013b45e380cde8682ba79396a2792f9364f053a87dabcc10cc499872a5786ed9d0a2093da51ef422ddae505c4bdc1aca89fb283840e7e8e250e64730f54bf79b12705fc93c5ef7fb56e8a5722d684ecf782bb4822a17ba18d9a70d3357c32de7731a5ac2e26cc1849b447adde460c11358058630ba4dfac39783022096e1356d64b58573e5334c776f03208a8fbb71f901a1da9ad8ec81093c72fd07999b5594880a6f9440800362d87f65bcba1baf050d2dd81943cf221a94e41cbeb344c71a71a6ef491adc17c40096e2e572e7a42e1730338b210714079cc4af59fca885b0eac271b6e35c945c8dd02f2e248c4c89970b1895ab96d292e441f0e8ceeca900826c9ac9967f2bbbdad23b55ebf986f228b3617e55ba20c62aa9292d6216d93635c75a36388e66aad0ab555955a9b1cf44d2776524c2f0403e1cd52a458f280da473aa44ecff46942b0cb433dafdafadeed48ebe2499cc0b09fab48ad8291a23d8f91ae8c0fa0a5f1ca6797b2b4035d5c7c737d836a11b1213a15aa71d50d5826395ca6ee4752cabec501865038780b15f7d89ef9bc8b564ea1b4e5e203c42a98194538d888d83e1a4c038ce98a9fdcd1c84de31bb53d009d78e9720078c0ed3818640e5bf176fcd9d0a3259491252611b47fcfa63720c67616250ffc4945adf987802c49f5a2c8f6ad22e34fa1ba54126857f777dd7a6e5f12e913e898905b52b2c22fb920dd6a9ab8703a7d18947ca027791b8d61a81e0970c787706302717b5eacfa730aaae465af15385051918514d8eaf4d580f4868547ce01a7e5520c895eeac55dc46bd77a3d5aa8df95e601549c74da5760abc46917de7dd2bad4c77abf621c0e759e32cf140ab4980751f137c263549b6c2372fd579659913a11080f9dc689ff7a5b301a3365ed2eef1795deba718fe1a41ae0214cf59d45df150e8c775eb12ba28fc3bc46eb26452018bc36220da6a21d97f9986c7604180976f91f4349d4e9ccafc6a9b8899586d7416eb7fd9d007addc50993f6c41bfe1be0c9c5b1b09b46b152a9acb44b6f84d939d9bd270805df2bb602433559175c0562f9a9382cd6d186b1cd6532287c59f965cdf8b88c45a3d63db80d134db89d6cc9288f013bab76ef3549239ba2424ec5bb0a12b21a4b5d67215c753dd7816fcf0a34007e5b464560e010b54a1cd14d5eb3d0e71ad4091173239cc054d775bdbf8071032e58f805ffec371d037908040c2ddb24957594d99be3ad4840e7d0042a4ff6e917e9701c52a8efb9f77955d7d22fbe68f11bdc520a95c81ebe4150971db1ee406258bae90f04d915738e2ece5b14ddcbbf80a237c2d2bf78fc4cbfeb1296433986f2aa0c9b7332a145dd9e2de2d94282fc5d10536b90bf3e35aceccdfc9b56abf881cde1fc4ef5d3a338c433cd85b59c91f3e63d68348f7ed3e2334b3e25306f4643f28ae263aaa28fd7c36d8891410dc8ec183cf12033505718106a1cc7f41cdff38b92ee3d6c04e2996f95aa973e1e97de8a03c06ce0c4fa9e4550eaa4c11cd9f3387d505d204f9c61222b464cf1e36f44ed6c7bedbf4760438ba2e656f81eafdfbf23a13e934880d42db32e27110817092fd8a29f50fb339b3df3b7b10570ba6e6e6029c4a90eecd5970969c036d68e512765c0e2647c1a4204b9204dfe5c9d9c552ff092be2fa19902f029c70c7ff77531663a50a0e141f326dcf68084d7eb9fe39b2a9b9085b434ee5b18b420ed360c8cb6636f48aa3deb16f4c552af0a62708fe3b5efcb1e7c8e0b101d078bd0543578371ee8d5c12ba5d7983544d9ff2c2e7806fb089edd32df3c32be07c296585433673ecd3167f1dcf0bdb61473ce5d8cc30dfa27c02e824b1e5660abbd4169fd7c2df13f3eb1b7c2c0bb8eb0103f373b6a55e3c7e705d1e7a5453b252c0370fd939c9aa71a88c3db14f6cf201656469c10269a47f1150e78922cc925e62498b0452d81fe414ad8a4e11dcfff97ad9cbc9ea1ac96eeab5432eb28af7034da63d2fdc11ce05ce2283e5c4f95b5f00911c089b4ec2f94ee635f15adc9d38c3e31cc1493c31afe6b8713ed0d50221f698c49f05626ebce080565594dfd29880663ef28bcd3fde13f1ad36e2158ea64d0d703f902b7d914bbd0c9b10eea1709d615afaae7397c9a47180bb4804177cb39b82800f7981388e8dadc50c8521e2431740b70bb3866a6376c071f2b7fcc01ff0e8d654e406dca4704a668efc620bec434c801674eb2515372fafbb31bef867edcc32476549224da1e82de22facb2fb4c4e4c0677d0de74a28fa4738592f27719384b293b49f5d74e9b698567a9d62ade8d44f20a7a61e190367db417ecadc3cd431052926dd9bc380f78b1e22e88dfa4928f323aa8f9526284d55b0ee1fb481d363834c1f46d3516df998bf088a5d90fde8f95e28087f5f11651a4f2726160a77da4e1519b4c61de24ae41a91f4534c570287a77e2d9ec73fafc89ecad4f4c2be7daa5adb0bb2bed7c8670af5c30d5ca6a83fe999cdfdd5f02d751474208ab29e7c79a6ef8771addfd6bcff7663221eab38569be4c7e853cbeae3b4fb27895a2563f4c0437ffc65c6533d383ebd1c1bbf6e2f4cef695f28b04e149e021cf3857f284e9d63d51e288be1dc86a058e13f43562cada46791fd454d277193b0698445186bdbc9fca1a2c80e6f370580a7405b3d0bbd3835bbc471f1fc2094cb981c95a6e04ae49ad436947a3a983612a90a5feadd55ec9eeecf1cc2bf88f9145daebe821c87810a8478d32d8a10ebca876589630fe8a59ac4ea44778c13fb3ad053eb15ace6da5f9b90377d4caaab4029b0bc075c3aa667a7b34f8334b2275ee72b4976d36cb63ae0bc76c80ab99dc923a008393712b197f085135891a9f452704dbcb1b8437910eb01dcf75890e2c169308db3885a7016ab3712c094354af904e238ced6b2debea1d6051f727efda3f19f778c08773f997bc354857ce8c36915e2b0b817beaeff979305890d8935b3cf763d06b988474099572f5f31e834f384febfe1f3dd9089c51f746ee8982233e82edc9b4b1ffd0e63dd8feb84c3bd799dd4093e693318dd8fa647606ba96987791483fd86f95f83ab541506014c33b0043a6802902f088610e942954e52953d7a792013203f24069c062b78d0d4c772150b2c6ab27efb5ff25e359b892eae883d45b8ca0a808ddfb0c68ceba04f1fdc9f590c76cf0709bfd24ea159944f333bf5c0e582d985174054dc05927547385f5b0774d0dfa711c2cb9c8a81a95ac34650d933d8209f6a745dce03292f410a48b9c132adb63ba8abbf8ff091583942d3aad51691fb81aa537838e20ff552e302d08d83ae2c9a16d9435dedbfa55ff20dd52d10433087e1a2b21106d461f533d176f6a8aaa8ef9e0b010e8a4d232746f1cf2765dcb5c2d9fbf4ebc83ff2f7836262a50a6abfe2054d95a32195f6de092951a533e4b693ada9535b1563f63e7801a2f4b88725b2d8c3f7d5a17633fcdae9e0d5184bd8a1471bf457384f36a7ed355d929d343c5eec75e7ad99b2f71722cff6898a43d2b9458d459d3a4b1922495d94108f2ac77d67ed50bba77faa14b11527bdcc89807d3a17f1ca7e2ce225c10483ee0eee15983ba2feb38144e7c22327dbc8bf64bfe80ee0513a772c9d454b60502536c76d6dbfc51e73adc7e3e1fee42bda5d1d562320cd9d12489a367ccb602930972b1be12d61f40aa1950cc020d003f6850787942089eed9e8f1cc2dfca7abdb5d4720cb4e46157ec8b3263309595a3dd6157bf80141e3ff007b1221110d6599542ba9b13f404ff5d361814891cadd81630b38527471ca490df6badcdd45f1d2411d683721fadaaeae1d48adc6aebae0c524efcdd00b1ee7e655ccd1a51ce501148f924972d454b1fe2fb4e2bc45032dcfd35b7a4e8edc032be3f184edf88e06c0464ae50b37e46f41927eaf1fe6d1e40cf6b874521cb001eb786458ba4b9fa110cbbbd8f2d0e744b744fc98f5e4bafd5af8d920195b22431f104bdd9a8f66a5e7061e42e7596ac1e7612e88628baa7dbb3b6b93265e3b641747fbcfee00b97595d883a843bef92d52db71f5280b570a5d865239bb64757353a4154578a62e4e450e01907d524e2288a2e85f61e12b5caf5c7418f1efe0d7c905329c690fab31be6d7d8ea4691df579503b4f99d1b4e1789ed56476d2dfe2d0af3fa69e412a439d1daa02bc25112364e2949aecff921d265cc9b43b73d5582c70a545ccb46ad7da6bfeddc0257faccce4ba0dfd72daec3b4c76582a254d3823f0dae9877d3f750e94872f8642a1b3bcb4c17de84cde634c1b33bd2be18f5d9ff9f9a36dacb199bb42ef679f3a0ba82bde3316279d8bd24848c0500eff065ca803097dce9e27e80957ed5774ffbda8dc2e07ea660cb1161710cc32ba39885c453f9bd37d1b798b61553d6e0b1069e39a86785d64a4c78c94abc419e9a5c9a3d0d01db6bf84e04325222845246700f418b162d75ca36b3c17578e42099731470eee464c10c42409f71afd0abc573b36042aca9b3aefa37897ffa945505e80da38043a4984f49f09ae12ff5d67eff5e6d322449877e81180bc3d023e40867b232f3c95d6e6edcdc497d143f3aa2cf7ee1ce9126f8e34a5c7907a2bd37541bcbe82992f6027b3116712a3f7d62b90132fb7feeba02f22aaeaa01d3896c24bb4d0cd4409f19416f619e4844f95ef42bbe15a08cf9e992d2cfbe13e976b7da2ae976a989c8b53260d4cd2bb2b6490bac8b312c0189f8aaab4e31efb84091c142dc5a43bf73dfa12a055b80ba595a6127534300847dfde18a88b74e65d559d9a63db1fb91306398f4eecc544fe05785fa6e903bc74ee1933d7392d511bea2bf3835aea794263807c9b9f6395c3a8cdd258863f9034d2b682bbd8e7ca06f0efabfa2c47e50db88644e996b96b8b1fddf5595f1047c5f0f22b57dad4cd0fbf69057d138ff2e519264b8dba1fc9fef921b690675e0a030a929243916130d09b8b5e2cadb4b855018c8769ff4357bcc725b19b137218449b20f4950544ea0d70ea4eb9a87ae2db9e37d89b5e36bb31baad3fcc52fd7c73a834412904ed4d835e1fc75f6a031f0bfef5c41e272995e49e3174a98e89626b6cd3abd8c99581721a8a628f428ba62420c968b4e55327268e83b547e56dae13c9d953c3ffab211b7dccaed37bee69f269bbc2b4b156e7be6cf070494a298e137c384e35bfd4b8485606c6c6948e73c1467d3f5e3fa803d327a4e4782e8411aaf5a3c26e9ad7e9748f6c0d3cecc299791e36fa2b8582f275f4af3ad64996d56206e4875e99d3dfd7cf182186526ae1b8dcf6d7316bb5df24574b52dc3e29c4561c596029122f9833baecbc72122531decc703b201f83324cd8e6bc6da272152fa03be71d764243fb090868c358efe5d923a19e47eaee8bed7e1e76f43e3548ee6a31adbaea04defca300c08123930cc19f93a4c0812d9eb01661440590072fc5f31b3d987bb41342e5be4af538c738bbda4e643d6d481d53747cb36f5c4eedba36d76cce690edf4d9c4b7b9d84145125176dfa2c1d385bdd197dbcd28abdbfed8f2f89be88ecc3dbc61032f4e6d5f69c88ecadf87fad09d93381f4290c52594b5cfd435569bab24a1151c28ad702fe83b7a73bbc309f9392b694094ba29aa879273da493b337f6e59955a214dc3c9211e2d401eb1f19631e6d468b44d9a717e8c20cb72ae474905e4ad64c63506510b9c3ec9c8a69db04b6705cccfb96e94fec96611e5b7d4d92dc939275b42b2448c10746f73320bcf31560b41afad3fd4f5d99eb39465b38e3aac77af449834942ec406f871300a10cf14cf2c0b7f7cdaa0a078abd1d5ccce21e944a5d5a0c0a0c59d8b715545bcfc9a63a0101eba21cd5c1f8f90459391d5518dd7009ffbe15e7de2fd87b51bb62edf8dab2b5abc029a9f3ed02a2e37fc4f814c1d609806d7e2b9113c771f994d30373d3f99bf81276cb7fc8b4bf702cdd36222ef6a35b16574fc21ba680e0ecd1b9a26bc399cfabf5c4463495c3eff54504cb6dd77a4df100fc6ccb2a2fbb3deb5c40783c628f1bb1bf4392ebf7091c1726d7351e464f68084afa4d71a9bd4c59b3eec81f5e687eb35421a87e9e311054d4a7c3dbd0b996974261f97ece93505238b4fb6568004464174311521d71977e9ac2ba2b02d5bb8555634586c36ea7b17fee83347514304c004358617ff784167dced7624656559bde6254cb25825934fb6da0cacf9876386f91d88ec90a87681c433f0c289ad76858f1e3f10daaed30ee9d40db81596e10bff196202edd9665a94d9bc7fe2c8e182dc7911f2ccd1399f6b5380418d089a8c426ca4dde90c8badb6d8ef61584319c45004440f4fc9a9443cd85d5fbfce04bfeeb55cda4bd616351f6bb1ad35b09c75f4a86a271f2a4e3e53c0e1278bb7919d98705f59ed7f498b78a45775b25cb8e5d8f6b5097d21024d642e4c7a1cf2503208f6c090c0725fc6f19277691c36b399f21a053e453d98a72649cf109b83525927c53a1f6354f1e4de61df1e3b5681cd8d385ed27f19f413900b4bbe529ec46116b955f05d999d3feb21e27a0eb03c601961db183fd3f5dccbc44c144cb48024cdfd315b7499ff1c349ec091d11f5dd8def63800c8749151e967c66137fa4209c3e681ca6ca4aa41ba14de05fada1f33db2ebf91e7e44670138d4251129f59ad4a594a1c76ed5ad5d20ddc625117cffa180d4a9f5a5de17de72bf0633bb286e7f02511558deede6321d2978d8ffff8b458645969e95de1d5cb7e1d3809c3b24b80cf1cf58bfcf65ae36f4b0f3cce78a5d3d845eb21102f7b1ef644b14ee572a8b44a07fbe867662ef34986a208e589c4f0baf5bbc4ca93b1937ec143e22757a4da12490afa8fb7e4a6e44f4de0bb39d862e32926b0c3b368fca666d598f3f6c839409f30d639b56009266e70f628030dda1fce6e0908853ba9c17df634d2765029f5f2098985bc6a2913ad0b8f7a5898409ea589e52448faf7f0e76f3acd86d92058cdf4275379ff3413f4f631b95c452e6213b9540b6faf50695b9c8d9b904b28c7776f4d1608d23af11876bc690267796e565c18dc2605f47afd09cb7e4a322661f0ce8fc877cc50122a1e1a4ab348b9d55a3a441612d7ab064045135964676c6d09e54973a2d0b5c019336da115d804aab73fea9fac5b07aa1171d158d9a61e0ffc067487f9e23e00b9e11fe741cb10d261f0a469f886767780a212022a0c97e7634ac74fcccb8722b68bbaf3e21e6b5b550dd3c82a19457da6c552764ecbb9718b7007535b7881e5473bc909a4f0cdea2f47af1e50b2b218550db782b3d0d5556599ecaffeedc630964a4b525055c667cc104172ddb75444032ba3e08194ee7d460860ee71ffb1bbd6ca8cfc48c15ce3e6671f4f37c470ed7078bf9c4396042586662000483a7b3409f85594e1f17c15f1793f8bd1437f42b9fc8f07e0134f7e260bf59c05389b8e528969fa74f278e903d33dec8059b7d7cfdfb4da63f1445853c9e080b4e59cd8afb8f15bf0e52bf592cfac0800e4e0b7715dac4fcb379c691f95e709b7d629712f942311394de46cd9afe787f4ce211abb628dea3f046b25dbec4f9c7087e9da9d3e60748d9f42b85c3b7e6013735df4697ee3b713f22dee9dcdab44faeb73493366d8e05dd89308fe73fb7f3176de0a0286085b0cd7538da9b24471b370868e06e3ae6fcdd387e4c08e737dfa1dc1875813957d439b4f1be97e0445e3c8e9520de52df026028a4e8d55317f8123bda4eaf9d71bb52501e27c22ba886f3a74ea19bc88dca117e19a52b169ea1e58f6d0209bd5508281d57f8a663e8698ce07571fba22ddfa4f94213f19a1b0eb5be417e24c31050c7e2427c252f8ff6a27b46d85b8264d41107dd3bc1768e8f85ec594e0340632d42716301041f17e8d7824c1b1a42ebedfd1dfd2ce24b8ebe0a0dba21c69060a4863ffe8d44cd26866f8307f55743385124092ba8db17d86a79c85b0f58bcf8b811077cb99a4a3955f1132f52af2aef34a2fa5f9bf4fe4fcac3fb52261910cf2eecc88a81fc0423c44367a400e399defdb9ebf025f357251dc924c0264b234a04eee00a8a7a025d1311145e4b965867dbeb8b01fa362e1fe2ce236dab2595da0c73cf52980b340c9b688c7d0fac22434f57a8e4e852e15abc63828edf289fc38c56ba25e994258d480f6560274525f3634e7653db95fd20bac08aa8527532259ccaade98cf26d28b7085d17aea966a6ef73e6e3fef1189e4a99270f0fedd4f088495739dff2f4fd08525bb3d54db0c08b68e8af795e8033fbc7b7afe689ef25ffc92c4c7b1780f054ddbfba0cda6fa99523a220d03d510c327e9ce0f7d2a2f21b061cd204ab74aa1f5a18e65aa3dcb1f318f51ef000de27d33e485afd45584a28dfdb727a5d4bee5e12fffcfda63588f794d81ee5e8cd4776944ddec65b9295ed6b85c9d8eac866206f9a9fc82ddac001cb5b8692559d14506d70c7967712ea8ff7dcddad9aaf9c8cddd6948b832fe09564b9afeabe409598cc0f3a29bfe08dd1149fc19f555e1a49f7411f1b1d0c8f41c5733dd5b797664888dab1d81f04af62d4fef70418722755a2163e3d5a9fa715ef0ab6576053c16b100a589d4377f5bfd495213aa6e9cf0c3342a638d103c87a4297ee7e93e091ef8ca179d165fd41e6bea0c23602fb259fdc6e2a723133b518da51cc94d68ada67b32f2581e93a074f415144d8e986c371184840e1b970992ae5c1a78de51d3c6a326c4b42c3c73a35a024410eec2fc22f9cc28b47ebcb9ad07db1f71db0a57d9d25492600ca9656ab9086970c560911fe6bd5525dc2f5a01d6afcdf88ade0e01b1f7f47ac41b98dfcc55f88a5d17c18e35afc7ebfda6fdb3d45e8c9e27a04400f86b76c1e8128faf89dd419cb9502bbe4140fb87be6ec715b765952f4d89b9e4bbc9e672c4ae7c3c05f3077c4ea684f450a141a6445290c41d7651b4ac77cb222db68aa517cd2accab46a6b178cabf16958da9bd35c60c315ec9c92a76fa13506410f3de8ff2dd0d457dc2bf20fe1f8b62027a225fa5703976fdcb437ea5dc406f903ed7b95adb81298fc82994c601bf4ca664d2bcb82a462b6f35527fcd2e27cb7261cec0446b4154d0a330363ae0fb19238e6b94cb6a34ae6ea1e4c28bae9972453de3670bed1fdb87567ca81a23fa3d60c531289d0af5eef3b2dab3cc702f605d3a9cab1f6974080611f031df9c9cf4d20e0eb8f00a2e7a93d2df4135adb97deb0e1f780efbfb28aa9deed5e0f17b6bd6f443ea40e11ffb1f16411c0a1da951317f61e83141e24d5aa5193026083fc840ff9534d41ff94b362db50c740cb7b3cc8e291206b7027ee1adc4c686faa6c9baa224dbb9370e4f8fdaece488eb55c2b3c21df92dda9e38253ccd5109fc078341ffdfc5d778de51a7aec64b27a47d34ce580be7b51259164087cff78047c1401ec8a8e38cee9280e919ded4fa984328185ad8e81c210111485bd5d8f8a303110053b21db74dc3312c5327ca3bd1b09ead14084a5faae76b2b349f0700cbeeb889f5a786c7ea2a0d123c87cfbac696e2105353db32245e5f9648ebf3b8d5bf50ded30b9265b214485d0e16d591c12cb78e6ed587488a70f7aa367dae21d565bf81cce982281531edca029652f2db040478b992ce55d5558c3969472c5a54839a86cabd0ff07bf4d943c04017d6dd8fb8acc3a7c5a986784d1243112f3a43b52f61fa3393b2e570bc29359b0352b966a77947224f93a7657c73a629e49a6d3a953ece164a156f8de12af66ece05dea55f2b7ed5eca988e1129d640bd7e34d21dd4da824af2ef221915a32ee683b203929ab5c7265d3428208b2bfdf3713560dcb4333b7bd5a4d841777ab7cea39cf03ae0831d61c2812c4c968f4f8f30e9395f49a3c78fa552ca61c99bdab3d32c7d460546a5ec0f2098ed48ca0c5042b3980f9c7fcf622b7ab74292abe90111913ba49418dabb492afcfd8b1bbefa0db78b8fefb4e7fec1063f07267631463ba396a7c278e2a61c82cbc4b413010b69665eb2b19abf1c039676516e37aa331f7fb5342da7e6df121c029ca1bcfcef57548f165c4ac8141698944a941aae57b2d32e26683d21ddd1a9e65abb3f9ee988ffdda817aefe22c701ae149f27856c1a13cc3fb316534ab7b90f6c27b38d9127ef5b4fafb0938f27c3631a369a4cb4dfa9610aa827a7cee826a2ad845497cdf725d8792ad2839ef5c74c26d2916379fd386c15f1e74f3e799fdfe4f221b840d9b96a37ea787b286509574a896efb679e2ee30a15c83c79806470457901ee5943205be80596335dbb15e126cadb40881326182858ed7cc03258063868e512b09a8f11c97be7a9a35392ab8a22d15f7c62998175e29ec3a5a792c7dcf0f9f55eb3894dc7ccbcbe4b21e46bdb80665543e0dcb546c32c319f1591c42cf950d372f3f42869ed4a3e2512da9e80f30b85eafbc2f1d98ae7094d968460a9f03603980730b086779f58ef3e7511d2f0a3e4c3c50ac8364009071fe11cbbd22eda2064085e3373de0c42f8ddacf2c43a863e2592ebcc582a769b4dc37a6448d582604c88541f5e2d4be76e6b7608a0bff0c27d30893ed5da94f350bf92480ece120fa1790f17e0a5d6e217818f13434dbd59659f2720d528664d934dca8d54f72327a0ed2b2a2e488628f4b3b1a4c228411483ed0418919ab1bd10534a3140c998738d5f561d91371e12f02285e32f0d3e06a6945a8e966f2424526f6a7cc68177618175a219310eeb040c40831241a1ec619dfa06e7989eb51aefff0687ce2997e92d79209f587e7f9b46108918527b2ccef93100eb1e695aa81a43bbfd9d5d82dd055fd9313ac68955ed5c77903712c45aa926a5825762a5ef144cefa23df60e831e9e223cc5e2e712e1668bc5ff81151d3e60e41183c914912b7c03ff268db088925d4efa679b54a7f39c9069dae06f376495692579814e2e1737fd77085f23552a30651fe51c12e5029e02762608d31d8cf3b042344731bc95de16aeaa192fca20522f9b87a8b10caaa1de3b9e5a8f8b1fdffc0f7249ecfe0e50d12124546c9268d430e8962b802d95b35a891dfda99b70e4831a375fbdf7863aa29120baf1ab6734ec0e4c05869c303d7ed422781e1bfa8ba7dfce52870054ae18930b9e50a772c033ddc3f89661534f00d9ab68deea116f5dec16921127c05fcb685d3ea23d8cd41e3099aba85ad30dd46849516584a9461c2cdc28ed27a2b318e86f9583b97b22273242cf22e2b9533713b6c76c2c408cdecf9ad0638a4b7211a2c87aaedc5f434cf938776ce94402482796cfa28e7450f142a09246a2ace4d04454a5e73b3ef2e74ec221dc3fbce26ecef8328dadabdfc18346629bc5480c40f0248f8e50e1f7a8d171c8f9501339ac68c8b2b0ba688039482afd14ed57a196ecba144854dffb6a506a0ae2dc8d5c9aad174c6d371606de6876913a0328802cb495c8ea41cccb17cdff139bb16753b7ecb5b1810ba99f38571f17b9bf41e6319fb6df8d6a4890764a35a6934364106a15ee5c5aeca07e926b8f50e2ab3c1970c915ff7183b19cbdffb49abe7b7613a73da23b4fbc0dcc1ed09a70ee757abc1d30455cf8641b8186cb25708f0e7441c40cd0e3e550d173a2e00083a4c06f148a4cddb8ba0377e505fe41871a0e42216b63f77b5b8ea8ee9ae2f98d306fefc8494ec7ceeb52de43336a50ae3f8f3d5d1ce3ee676e170d4d564a89a8d9a83c88ed3323e173a3fb7a510dbed4f003f32f7eecf7f9ae9e9b033c4cce5c15c269badd45da0a5b1a93341ee78ce3101645d746b23a6661a6702fdca89d59bc45ba62c0311912767db83ab47dc47ea0b2a5db3ccf3ac5a1f803cbb19eaf2f4eaa5970ff9e7bb5d083ee6f6f1f22ae621f6e80963b1374fc287fa24da407fa4e6b0bf1488d61640bdefb9ff0663185517e7174f053c7a66fe9375e7c0cac52edb6622384609256a8e3399f373eab3a33b44d4c2ee4422458982f1474f7b0e47c816d8fd6e28b547e5fa5ea3da38c8bbf4d20a5905811fde54ea51d9e05fba6c1aafe53b4322e5fb0d465acf6c44f8fdb3c2d2eeee05c921cf898a829f45432f9b655ea9be087e74253e0eba4823cef394b0ada39764bb8d31980d7fc578bc9607ce72c677a969619f1ff777c7dcbc2b3bb650bfd02cafe9d33f3d9d8f9f3d776ccbbf04c79a8545f9a5c0cc340643112b3f683ef5e8e946193804c70209c54ce87093f5f9b9609344b5777cdbed47ea4042de1179fd97d4509eaff3dfe6f68030167528cf30b7b09c019be32119369f9e90e82fd65ff55774f806b0902a1efea6ffb2fbe8f57acfd5d5fc2bdcb8d6f68cb1a0651d1cd1efa23780dd57df6d87d6e536c3a418c87985dbb591bcab33b1704b9e184509519d3671f5d4de04bead82cd8fe5aa72c36916dea5cd39adc4a38bd3b43c8ea60cab9a4e010512f8d93053f70737513e37105f020ebc8152939d7628b18e9ca0d613f3b17e015399c407c1255e1c15e1dd32260354f68823a250728b02382e1e6782099882ec287b6c43d933a50e43177f3c1fbbca33a3b389ff50fd8e49d47d680228feda942ecf9e97a2676bf672d00f6bf1771502a11bdd148a34209e2ce3273f2d8bf86ed9c76298990dbe3800fa90818a00fdfbe8a4f5a077148f2f8ef3f7feb8081ba50a31dbf97fe79cea292ed281abddcf61ccd50fadb5f335fc426165c62b23b42edd52ccfd1a9a97f8e483ffb6f4ec234512025c367e8059052e36c051d28ffba7243a78edc31faa1d72ee5de561a5d14d1c55e1d04dfe0e741d85f3ca7ae138394abd4d261753cd8720d6ee83697c3c2ce35e5a624b6e2d2c720b6e9d6a901d6f265cf3e4998b6276edf63311532b6e395109c133d73c42834a14379595d79620b6a752f3d6ce9d6f182f5cf3a24e1f551c5061634d5cb1a66010a2677173dcc4fc0d32074117d53da6fd23fcfa85985311307d172300b92648d24aa93f3e70a2215bf7dde91d637772ce4c0a142818f67ab801e5b58d948f905add9c04ff0172af6ecb84650afa302bfab39a06861efcaa3664d1a5b1fe887d430562f7b0ef3d754e13452421aed52b12395fa653475f93f190d0b03c4d5ef4511bc5b9f4f18365b794cb24b0d356b9420e5e8db6dd7e75d2e95b979081610d0f1ab96317b5c1f84ef7da35eff0c885ca81ba9feb7d0872cf439347d505dee6e4a7f6f5ea715b96fd6b6da77895169dc15e9b4955fb5fb72a9caa85f7c14c7174592eafac43b448fb974759951be8fff08fb779a1da4fe74cfa082d8754ed2416dfe37e13a4c2bb5f4a557565e733e282445de594f266419148a16cf6b6420fa3caa24b5fb908aa8b6fe6791647eeb21483b36c8e0d44243b1a2cb23fcdca4e374d3152299fd4bffd1df123105e0555d26370645979039417f0cf04612371d93c0020939b6f20ab2dd98e51fc0e950e3d0f8e4fbea4ca4a76e70cd212174372d94e1ed222b01b05d2728f3f46f2036561ccb9de3c22cdef36310feda3cbce716d40417eb289f5a9672a6e072651de116b0f205c75bbfba9f32c2df88eb8732fc8ae7bb18ad5f1e7fb286ef627ae6751dfc2689f45357c9901ec54f95acffc19c2d7196b3a22bffabd75b053015f68efa41812a1dcd8060c1e4b18e81664406c03d47dc52eef06db9953c0038bb159962b5f4396e0d9f9cfb8962857d1cda44c616449acba41b71a2fad461b076836e94ba8bea9b2341c7c0e05d8e38ced3c1336c663f7973c7c1f81c09243e492987ccd58e3be044073e231e029c82e382cf0a65061478bc7a4dea0d74abd5193f1b2ac1aa4689372b93507156376f12d02c5347d0c33d2bcfacd03ca113cfe79f9452d44bbbaf79415fe337d984fb998d0f30792c036744b43682d03fd81f2b655ad64283b5cb54934d0a848553cfb2c66e7841d2f3e5d2a77fad9c7c4a5c553a70fdb7d711df3d80e3ef1c5517fc57f190f73fea762e23180447f29f6d2cef4a18b038945bc4680b102ae5a02ebccd96d63028ab390df66803703ff9bb55e2cc060e16d2448c08da4ad2d4e02db06778245321ac72034222a1adcb62bf55966bdf6e2f3a4cb2dcfa143b609a25db1ffe9c109642d7147d33fd1431faf9f8e23b665ef5215180db230fde9b7ef65ca7526974c0277f709dc4ddd84911b0570c45558fc949d791dee17f3646170deb1613c8e4182a47560f2ebf8c4146c61c25e50cf05dd15a26b1f460cc3d130b3d6f8996ed2f677203c285cf1c8c01e276aa1cf181489cb8bb9375af0d75f3cad96d5eddc4687abaa10e4197bc2cac45bd16219ffd1bf7b9684a55d12772b3c9add300815df51574e561ed75b75839a3eaeadaba57d695e429613021b08add2735f559e6b0ef353289d03549a0f78a79c0df765866c9e8e0f45a1ba710d05aa9e647567ffbe22356b96ff3ee1e641e11bb680eba3b1f1b77255f7d53faa841c9e6174b198aac84c060ec02c3f80f674682e54dc0195b5d77264b98ea643ef348cfce9b721a79e1412a9d292df9e54a07522597c49e4d8f49c4bf52e99bccea14b483c2dc653475e68398649420d720bfc1d967791744e11e91c8c6a22b18ebbd4a4086446399208d56c52af6018c5975ecbac40686a7c6ef655680714bee6d7563e198e523a5deac194738b399b93931d1625988929045f13f410e5b7355b1a4e1917017bb7e95fc0b47af950a906cc80d790191459b5fe4db620676e5eb7b509dd26c21245021e92fecf32cb8e2d70a02fad969929b1ac96480f998ebf949e4ac44881dc75109d34843e120b38fa4c49f7bc91bd0d5362e097352ba731bad424f5992780f1e3004fb63fb9e55ac100a70ad85f79a0dacd8aba55a6e3dcf99d3b94f923f61fc89ad13d8c5a9f88699fd7310766ae4d9dab4490912f6ba1c1832300d99b71522cf090121e4bc4272cff461fcda4bac52918ee6c67adfec4964967bf81593b4e61fff69be5194f39cbfa5352927082e6554f50d876dbdbd2f8539ebc2494b7a7513e21141ab23f25d8bf9197669e206a1a92434c51a3532f6adb4719081ee9a3764c2c9fdd970df02a50e2ceb73f1ee62b6146b7a64f3416636cea624b11ec64fbd2bea54306bcb4aa676c132c9bfeaf9cf76c80676407aa3af58e9e2fde7db4564343096c19fa94e9736afd49ff5599d5098351384f3d2e292a32f4a710afb24771888c0c8cb1ba825918a93e3f44df4250e981dbba709550e5ce6d89ad34f93054344c6916ca0fff663a6ea6301b424eb61e8999280f22ff0793e28d4012bb707a06cea50e461172a3f086adc60f64d5505e60f45664358209fa8ca28f8e4b278c6ea73aba117b30cf542f84f27d527500f68d927257a6d3ae24f35221900cde6b675ba137ae3cb9ef1d215a202491b6712aa8bfcc5b8fac9393c241c21f3d16a671c8471ca6f86166746c2380b9da291c970f269a0b6c77690f2299da028987ecf0bc3d8f3e7fa49c96170963a4298529f25fbcb257bd067197868b9f3206f99d7ab9037157d2eab1e1cd607fd2004ca2b074948d70f794ccfb20e89fa0aeb245e6741825f27636c35ff6a67cbae5b4e493fc1b3e166f0f19d04de5cb9ac805bd4a501c6aabf769197e3dc345bd018755d5c531b9de915627c28394eb2c26d62de825ac03f87eb53e5cce4ca78530bfdec95bd4cb972045044d4ee9b2da2cc6119f8dd14bcb24398c6da027bbd5e658eeed6e8835da8db7034203522b90c3d08207d3b15e4f74c2841bb48f463d4e98ec584fcc8bf5de9350346dcdf6ba100ecd0a86a7dcb7b100fb555785e33c611f08b3546f10ae26cfd05ea1a842772611555e2c5357238abed5c3a4fbd473b6e027f86e24e5b950191c6068500e003710fd7c9c3ee172976f08ee422d5d29e61d63696270193dd65d213eeb56ef8c79f5b30cde3ec28ad6bd674fa8e54f69deb54384d43d7bfdaccc22263fc0c5081755e64289edff169c5f29ff744c9885c30085b4898ff82c8fb3f6527e248531a77b27c3ee48a8088c604a51b06de14b514857b4a5961ead76d6099b1719cfa50496b94bd983d888cf0829a2745ee2f1b31942cde0fba08ee2880e23cfd0aa0b3786adb321e988b63bbcead44c5325406c30c6e7ae4bb1185a6f680b50fa6cd5dcb8e0bd1519d5f70e122871a12f6e639c6ab9204e684c89a27bff911db34a3cf289f41d693ee5b9ea8c940ea570329d5a5b9704284bc783651f5a9f9c476850e79da5c7eef33c95b8538d228f7b0d33973ca53877d73cd67af005a6dd0d834ae7a5fdcd2a63ad5e2393492eb2e362a26b1396239ef0bada8523b38ab5f23f17f0bb3945838e9bdfaf925d0983a2abe22ebfa9e30e05589a1f5c1ae7a2fb7633ba29530e119e5854a4c579e3a0c2fbf6a0b571cb12dcab76534f7cb402f7c5bb7fbce1133b49581b6d71cc77e98ada5e6a19d1d71fa068fd8e8de9546d4abe9b5d1f6cc5615ae1eff6f4d21b2168dcad89297451fb1a21f4f8cee18f8358f53f9710997fab3df7a9e168bc25c8d8cc1c899e3aaeae594e13f52a51dcb11362a538f00e3f9eff6a3064c504fae868872760b5576298a7fa569ab6d7f54414682dd87d2ef4cc68f1d91a91685e7ba1ddfa908128421d6b7f5fde63be0ad11e6387434632acb5dc7b9964c34cfcd364517941c81526b04da5a97f08168766e860858c0559716d9a2cb13025d46dc2ea52aba97eefad44725bf9d8384f218ae237762c025fa2d2db95dc1eb80ef56bcfc4ee8d26e2ac166761afec4ff2402649ece8c63cb6ae5238453ee2f3a0fa1eba595ed4ebcb0780121c548c5b175eb3ccbad2f4c98950a4061d9ab1806634955f8c58ee53beabe1c1c5b9c3cc5422d8783fd793f3e5c6c404e730047479c34659eedc22dda6e1653caa471a815e4b30b15cf7aea49f548b4727ffd9e2b97a35b4b0dde88800441ba98b67eeb71ceb7804a2467fc05310e44b50c86660f13679077287e9b090d02071d66626e0e846a7134715abd62670d3d4e8eb924bb83a1f405a9eb932ef74cf13b88c297f2f5ed510638b9b082961286f81f68fb0c68af8b8088a11416bab183a989a810f48829975faa254ffc4eddc1a0855bbd5388127c18891ef81638066b51db0935f5d6fc1a726ae5f38e430da6ca3d457765ccefd95923718158fcfeb4365e148bfd1b362eeb0676e8b40b7e1c8a755c0bed4cb6cbd3ba4aed1ce51309000b1a12dc36442af2ce06726ac4a608c2e5b68cc1471f2d070b2e4f4265ba5342989b07b64afc57d72c50bcb27b6ac9a57e43df339cc7ed85c7dfec0739a6bf9781903f6fd04b294ce70bdb4056361ec4e728d279efad7fbaa1206e7d39b5953b4791a78a0d182d320b12134041dbe65525b3335bebabc141d925c3558065d2916b66e141cd90459aee62cc35b9a1ce95895a91f5830399fa67efd348b86282e505a9bc12225edc1b442d2f1e363e99c579b4cb6aea05dd73452e3342f04c4f680d363510b7274d158d037bce89e376f0a7d4193f3c354962d428fe7f35b409b854510f7e05d28e8049c4de50a86f53731d4b7185802c66c22145d54012c1981643b78020f362892216311f41cee3682823bcd21a00e39ab81b618bec08ea6d892fae9b922bc104b2918fbdd2b9312a317205ac19f76775ee2207d7136a388b5b4a2eb9a20aca3f13bc577476f75529afd3b7f575188d55e08ce19632222c59985fda7f16bcd2e14ffe04dc9ab229f3ebbcc027d122b77c486978a76a79422450f6928a1d32544691a558c6f95446ecc4d2da6c8b62e13d1df69191272a144650068bab735d76a9340eb9dde1ce313ebe3412f2dc056afcf6082d75cbdb68a3927fa10f6b2917b226837e96e6a41e9bbe6b3f755bf5969cfe9a9ef4dbda40c04d06138e0be8997c8ab958e83593c1c9b6f5f19b697cccbd93709456efd1b4f172628f04691e80113fd2dc275d9aed32f2de08d69a5475e80e06e8a8f59cfb50e33604f40cd0583f1aade25643be4697ebfed021c13abcb4d416347e7dba17cae3c37e97f44c53b6522afd800f8824ddbe2d14c6d42098de3d51ab278e1482040ed5e5ead0e92da58c35c704f8e2a0c1a3b904f1c83ecfb3e9c9328ce01e6d18271ea17c3f402d657228a019493a2b16cf14af4a165ebadb4b0cdffc01a07254357e2739f39029f2aa1cb5a36c9e0f2902802e62fe5b24c70c34bcfd21a61551a05907b3386d72e07f157e5b88561d2bb95ff23df902328730c604ba5bfd390cb38f5a34fb395376d3ba7ff9ca86b4e21fba770ac2cc89f700e79a56907ec3f563a877f443ab6812b47f0e5bd5a6adc0f8d2888262b69b91f3453c6ef74c5afa8ef21de66420b48430319017857fe126bfbec372c3014ebafe258b128f89dda7c15b049c7447ba0502826eb0efe1a72d53b98fce075173bfe8455f67ab01d8847c687edf7859466e9bf46741571eedf560799d1c74613d88afddfe1b13c217013442e32c6099fc25221c7886fedbb72fb93fd017b4f3fe9baae35761ef25e13c930050048872c9cd386928ab05b9bfd9b1c34f5e0f5be9cf43f2856e364fc627399a444fae6c0e215810fbca17830032e1b88d3de76c93b524f2754d67ca6e2a2fe802311a8a9f0f2613d10749ba422adb55798aa77215687d7326ace5429481b572021f4bee3a0fb13a058f5ecb475fb7f68a442a00b822925005baa1ec03c7a650d9f98c322ce8efaee7b0dd5ede75a7237059541fa5bed1a1f67737657f342c58d573cb850e8a011fa0c14cf2aa66c78b6ac3a97ed8ae56f5e838e1663504a92831f12fc1dfc888ef4aa943693d3328facf5741963a0d0d5da2f6f3c995a4892a3ad87db818cea4b409cd28461de9e545c759aa6e56cb9d8f7198bf102e1e03a20544d9d31c903a3a728fd3edf4b5278b44bc5cab2e73eee61110637b9045ba3990438080f2a4c5ef0fcd701f2a85f2c702305ca797d732abd454e5d9bfc811d881f60c45bde5d720625225fb09312b5cdd1e6bfecce682fe2bd3cd7e6615d066a24a3f2da6fceb7c54ae4e6a96d010f57aedf5f22823b77d586116a517364ce1bde7e3a8f880c246569b0e600b94150198a7913f840f97b95fddecc3fe664fd783b3ae0a92c95903a1c143b4c894d955681c9350d95da883d3560d980aae584d81429b477466db708c1fad0e1734fe01e11420b4661817126f397386e474cae2937dfd71a544d28cad4d9d3e461140b236caf8989b9f31e6bbdaba21a098e3d139a46785c196d4ee8aef1d2657ec56c181920e5b470d86e874389df9c43ec5e6c5ffa333fae1ed85e61e9d3ad9275939871a1504ba063bd87931ccbeff71fe0d747d2145c7dc6441a987c0a8c20a3f6e8afdbbc542ee82ea7df4dcbaf8beaba2abd62ea32be54007c7070a295fa55b7fdc4cc2b55e717fe66260d26bdab093d8f9849dccaf42d80a340e252aa9ac7806c2db0e3ad9ba359d7347516f2398f366412bd21785b77f15a0a269a93ee3a220c1f8b177a97b6ae93e1b9d85bda9c2efaba22cfd911342341db451f6d15ae4dfa61fe096c39950a1e6cf470ec1d7f506c380709b64b91f7012598235f9e36778fe149e94637b4b1c259ee925290e891dc98ef785f17a5774858c2397f0726e5c97061703613a96f9304c5402fd00beed19cb3a58740fdf5067829fe48d1f35a00c34add803082b5306f91aa9659e535ad19718c1a7edc6865dae74c8f74ee0acba59c31aa646355ca04ace58b0e3795565d02c523ef739cd40bf4b86b04e13065f4b600aee60806ead86947651cb9d0e8f9dcbd168587d546c6b638c1fd73f0e1740ac2202012ed3072e644c55e8b1008b85f52d74f42dd6660182c34e8245410e4054d91825ba6519c675437beaadb9b71b51571a1d436e564d0f78d210323353e65714f85c5370a3357964f60d7928e64ac6217d8293773ef5c8649d12eba6a62c97c96c630be6a85f9050c7f2900b45289ca254f8414bbd5497b88185b17b7d25642f758c4dfa9aa24b5e4058089e231ec5a331736450562c7bd3e3011a2e50a0e8ace1b75b9550b821874c8f9260b91bd4cbd44cd4e821419c0485799767042aaa444492fa9bd2dd51cc577341ce1f5f5b89682379c12163239c0fba430f52feb5da2fdd9453549ae5e39388934ea95b1cd75b8c02a2d9e8e382e43e701d65fd2f958ded86fd963935b360622f36a96b02ba22ade7878e0d06fdb5f8fa8d9a80a060baa7b7a9a96827a149f42d67506bdbd74a07f7619f9a95e8c12913af18bfc5c446cfa3a0ccab8fe484124e63f1f82857f3bc17c7f7aef9ffb4a5c99d0135cef32f8a047f5110596554e27a124eefb8521046ac51ddc1c13f1a3f794f64e6ebe0a29165113f86a0c6faa5b3ec1dc6e0e1ae1031de233d925d4e5938b4d8032307d5e2501c5dc4d3b22f72097d9c95f110ab62fc15d0f02baf279e10a7682c37d09d22506a05033a5404f843fcfe71cf88e2ccf985e7b937ac845aa9cbd8167c9df2fe97ce4885755e3122bef41592ba072a5fffdc07ef16730565b1f836ccb2259b0007133476f39dd38fcc698a1396a3d3bcfb288e2a8aec1af6fe77d2fe1785c3b0d2c31d4d7f596caf336a36f8fdf17099a85712371f50b473236c1b9660aba278c78aff09967cc46773bf423c0ff9661995f3336a32c2780d520be5992f8c73b31660a39f1d0978ddcc51beca916ce7ce8430b10e466737daf2244348e30ba0ff2dc294d4d929bdeefb30e50216d59e4b82e030f56860bc0cf8d92063e642882b53a6b9b8649c6392423bf30f197a75be40781b664f6890e3f65bf4440b1c61f1d45126abf120a530fae1bc8e41e441ce659b972648267e772f03f486968d0875eac2d2a223a057ae2654f1c4aa755a8fb99cbaac9e8c9ab2045d9f73f107e6b73bf1bb7f94f486458893366d536803fd127c654b584e5c99e0044fb8eeb2dccdaabafc45a30c99ebdad86e68cc5654a867c8eb0fd91f3945ce24565e6a2216d413e12ebedecde8cfec743920dc2311733cbb111c08cc02ab00f70bf5e23d95c02a106c91289526ac7ec2a24486b6f277d356f32b1662390b9e87d8dd8d5b8bee16d5a726cfd0dbef8655f96db199370d004897900e43f3a8ebbe389976dcc5a41cd546e3851b037f8d2b8084655922ec41a8497bf74797297c7968d8ec5ca55b936290166f8386f6dc0c2237093aba1488cab159da53b4a06223cf5f5f62d355292fe92f7ac29a579d3f0489cd97aaed3abaa9eafa0ea5b3c43cc629dd3c4ba97959885833bd1e421dff7da676289161336d72b5b68eb18987dc89a51f74349ce3f7a1e71db9a90860adc755e0f17e2d6f0ca92f4299bc326d76c0ed9c38fec6f5a8b5372cd59e879273e83a828c833839461108cae1292957504735584e9172fef9404a1b5c66429e9e5b17c3c2062ab346df92ed972503fe2f4f3cce89c029644246a144fbe2413a1f2b647e81a9dd54ae7ecc72d21956657483018160a27c397cf4e802553a173964fe1fd4687aa7ab23d14f3b30fbdd5e5e4e848a8a9c1f535c008f98d7350925b43c6623456439660344a0c1f16bc90daeb8c72ddf1c540001063feff46ca14d4ebaad1b24e9c626f19580fd2c2e3610f274997c25ed8df49824fbb5a4143160191457e0047d549e6f53ea40dc567126117d20cbddf2a8dfa70762909c0797f4e3df0a7d6f251da61b9c1de96848bb976a15c4a4d4c6e526a0b1eda4d2971c1ba130c49c7501b1bcc1dedb18ccbce3e3be7cad815c720f8466428f46284f5fe21cd207fb4faefb30aaa9d0f4d1d8b806d11126956df83bb4218f5d94d3a340c0e837d3468e8392a5faeadada53051fd8fe21794162fec22db90138a9f3a3eb30105b717744de7bd42f04b20c224a7cedbdab266f83b2cfb1fcc048289263a24b328eefc89bbe937f0895c4515dd7fc70b57301357509a48ea8efc4825e53538e7a82b08e9aa880a99ad9a3959ad92b1bd4697d6c0a84c37758075102b1a71a199df244762546378d36c2dd174789953ac5f3e7ee37d57c738d39e29eabed76a15819b3cb9407cfae486ad242f73462fc1861d44847f381996204655cec0f6ba189313ed3284ab3cc91625a325754d7cfa3dd2830ea272af15b73459e250cbb01f0f721c04b84a34f84fe96a3817c7c87a63796b6015693c21fd9b9ef3e7d1d894371333368e34ceeeec5b7eb77c4b456390042065258cc278e07f65ee54180f92abc903a8d6d39e5eac6f0656faf5479b9c6170f02a56cc4df47661c607cca612dcc66648cdc1934d2df6dc3506c7db70d4f36e176fc5242e50602a9f3e354e2e4c4478aa042a9d25db6eefc8a248718a4727c874c45c9490b4d1e4d3519bf12dcdc6b0c794b90b1a9be39338e571f86012ade7744692b703738744b13e5d646771aa0553e456029cb84dc5247a879085262ea816c7581194514ba64a6929629170de71e7cfb9b40b69f13191efd0f91a38bfe8fd68d1124cfbc08b15a659b1c15cb117a87df44dd41aa89d754d4b2c3b44880e4553da0df50539a8f49b35ef0b141dc55bc55f8b6471241b66f935d139489fce300066e436034c39da0bb46ebe7b105ccb64045d338b1508eb66b9ceb4d196447de77674cecebdfa935540def3b601e91f9fb8821289a84bc2021ab33fd6e12c5bcfc2fe107f5d59327500166c827c998bbc5fb32dbf37ac4265e543cdaed8c5f0b9aad3a169f86387ef8a4a9250af820bd0b1bad8239984b65f7863dc6509c46419b797e261fc6d66e5704e4b448ebe873a27fe5ec6437ef93ca5bf262e7b3bc687b36c5f698d0ab167ede80c25e1c2455c1b5aec0477153a5f7507d55692060ebc74a23f5f27aaa0e945749bea99ddbe48449cf804cc588d15c709217ab182a4e869ae093d5c10b91d68557b11658fb41d2fcea59fdcfa69ce8193871c32ae6b3c985f3405155eda0e5881e4994250d348289885e6209160ffa5922ef3f8485ededf52a9115340511c85eda7ac86a36186f488e1b46414eabedd03d460be35544b4a8f6f31fd4643e7527e73d961d48d670ec53f9330a460a7be2ed3dc3b9821b0e9ea35110cbc8f06f0d077f79e521f658174cf1f02c76ebc429a06fd97d0a3335a8ef66f6eeeaa405d3e643c8552d2abae5de672f93a3c1b27eb8ab5ddd8309ad91048960827413520bde8c1582e03a2b831c66e7601dd7e2ccafba083f5d734f89e875f811f7604dddea718945ccf9bf8e00c616a117e1b14ed2330f2860719d2b8dad41f5fcb7abd204030720a3ab8e00b876a28283e94c008865bc81f3bf173049a37b984507e5bdd80d7f23a4321a405477030e49105ad0aa333d51106806f1daffefe82447bd5692614095a1299aaa529d9a7e95fc7c58b98d944ded0f8b5efb38077c8bf25536b1265f7d1f07aa298e370773dddff8eb7680f55b9a01ab503cc1b9b2b8b89ed0ef5517fd756bccd92193bca7853a91d6c88223bab02b8d752f9641eafc8c1e8077abf2b8f33f64454b74b79a607d71a0ae97066e196ab8433fc3769183646d13b637fce10847b480953fb724c3dffb2d04da7207475d60c844b4ea732a20f50ccd6fe672a99cbcd774a32b8c8c3f8375f542e916a80f87963e4a9d1817b95b076f3f040ee347e6ca2ceacf6ed3ac5a7d0dd1c936d8a8569d0360d6b45acd4c65f76870cd4ee9416fdd66f3b72e378b72e884dbf8b249999e322de7a6f1cf399633605a8b279f0b62f68e144ac6632622f5645e2eac36f3079a938849b4c7aa645f57a29881f2174bc5d19e9354d0082b7085d869bcaccb08466ad0b0b8894fa80e5693f903fa95c4ee89b0c48d51300d36d30f6f2491b6e1ffcc200b0edee6ba4b3c02d210297ef2eae64d63fe553af269f3585183533456c874936d1fed14fc0b1c193e2ea08eecb2d26d4f2ea11ac6a25469065c562609ef5f8e19774df549a184d2317e6da1038c1e4a288c5c172d6876d6dacc52c92856570f6cfa6848c9f1f5ab626d951b6806a32a64f0a513b72c183d1f9a9114310e74c1e169a77f72cc8088d7a9118a51b7a2ae0f4f4ece5f5c3a6d6c6e58e75ce0537c9facf155df4736a6ad58269f5555d8d66748fb0dd346b0375060333dad049279543f61ef80ebd13c0e6f44f4ad9608dc68972ebac8654877db8ea889bcb2c678dbd7d821b5f74cdd26f10dc9377642c2ef4a728f25e99810eaec142aef0b0e3e28b2cf7dcd6618fe76826359cc90664e1c2572b6bc18662558093bbe40b6739ff7e7e417dd18898e4304e4b84028f2707d707b4b47ba15e14c979e897b6820fab74c3fb2ab5b593c96a365f7e4ee7f127436bbab78bcaeb23072e3d5b500a01a0e2c9a68e5cee631d5d35a082f84ddc2e0063ce1957825dd6b7872ddacb1e0d8ba40c60e63b97421da06dbde8567fb5e1b84c2a28573678ad424b09798dd233c1b10e66793001a12ad5c40da85a6365c03cb9897641c94bbe8ab3f006ebdda1d3237b14d34d3d6e01129dc085f1cc95a731ad8db0dc0c39df972958a52621f5a21b119baa369887f8e5dc9897a5eb209cddcdac570a71c92d1a13458a6a2b44a9c32e70e689b63b206f95e703255d4f12032619f949193b3a939e2172c98e951417e86d829de64f10483fa959cafb5424a63f26fba52817ada44db6b295510f0f5f23810ff5a7d38850ad03001aa87daf1225a65d1b3c5db06e946d67a81cf56cef12ee6dff82823a2d3ffb40feacb44b1f48c44c2ee0377c01a76663430f68d99037ff2f5b643d52c742438300c2903b58bcf2eabdafc538cde7a70f4d3b410eed548370fee54d5ed77e4c424db45506055975d0d50c66ad5241e31dc176c0fef49ad7b3012af6f9b1d6e335876868a1cdec2ef20ee73e4888939cec0328ec59a99dc9ba9d581656cd6b5a312e08076105dad6b7cb35e2fddbec4419379ee0668e0d21ac1741d9f088913b6ede2fc7eae7ee1838ff40d9087d62744d0955559de4c1f8ac0ac1df3369bef4b181e32316e02da12c8bc7b843b77a21ee76f63b2ddf90a4822d0feb3dca86700fd90edfd4c983d3af72bae7a7b4d4a30fb90412ca5e00e9543a7dc5e913a83cd0f8eb9d7e7cfc08af0329b4a8570a27ba14de6ce4bcb3a18895b322a2d7d376923366e3ae35388722d751f160abcd4291f417608b0483a0291f8a9edcba001625294e79e0570463804920dc4356282dc9c5199229ced6b3fad96ad6b7cb060f5a351f0a1b90068ca5b7d31916bab15390f75c5446ecd3fd163e3576d23df62a07f64c565ca23d5681db1adfc8ef9a3a8adc15afae43b00657b77c8c711d953d637cb3d2aaedf16d58b93c9e2885131a53b61d210b097a19227e17f9d4214136d720598f67b1bea3045637ea3ba1fb37b7b1fb59b4473273a89c5e8b57f8c91efcefdcea8ab574dd10ed046565b97e44f51cb8beaf7060abeb0c1367bdfe1532b4dcd4af335caa0a65834208cd040e9269497c0fc815a092b9d99500723d63ef051c5870bfe76ce2f2ce293951e1417d31b4a626b3106be545e0b3dd56135d0018fb44b6c8393838b3a24ab067b77708430e7a3478306b270eb8e5ca7fb5f5796231111553c25ecad4ac7963c58b7ff602742bd1ac97603c841f1d3a17a1f04fc13ee98e89e6eff8389d19a5c24d58f0cb83802c7c4c61914cb4d6345f22d48ac60321783fa80d59c8b6d023771543218a505f4df79fedbc0b34b805eb4a7e978034f2faa4a184e281b1bae392f59fa0014c04e427ad8b10ca789d79cc86a65cdba0f809c05b4a3e9095f025f7839049a8ba76dc460e01fa8f1d52eb13d1b8443fb34c2793a9a3c1fe25fff068ec085511cc05e929d682c6dec6a031d2d3822e2766905027434908566ec950b6d9bd0bd8b8858f45f8a79824f78c27f49e42b2122106bf45539942248344559586293e6c119df5edd47cccd5b1815166634f019817c1167de42b0903f77f71a8d622bbb0d14c857dfb265963a5788ea4f6060aea30329405f05216229f15851bc4f16583a660096df410fbfb98a57f730176f14ced4437633c2887ec18a820e6aa8275872c327656aca3cc78500423afc5c00d1850c461c7b6664494450396926ef2583cb4a86298ff666daa729715f94a3d3598354aa6972dc660c5bd0756ac442d87695b9c801455fb3e97fb4ec26f026481505e0a18fc13f143b82d03af42249e20ac41ecd69cf3ce4be735f48009fa20e4fa366aab565d1b841bf1b70cfef53c7660b0375882684baeb513bea99e6024b6aebb3eec405d518a6836f406969088830af79e1ff79ba5f9ce595a3ac783234ba2f151538f5788932ba559ee1500eb7e54f0e85a96ccb5dc73bbb710b856a65925519f1f07f35b4fe7f73f5eac40300c56ddcacd277e536fee9bab2b6286ad96ea9d05de4a607f7b098fc5bffadfba250c9161283f6213ef7216a95563d2f0ae59380293a522816426a6bd6f2b9dfeba11d56085641a7d5720af7b2f66d010e8cd3665e36ff77cd93ee9dd9f0087796d57e2f3f85a39bd21404a09b35347ca78bc12f7143b71e82679a88076c63bf1f768e666f4020bfbe4ee34ac136be5acafb4f9be598c8d79139a92e6ad7aa9e23a7af71019a68fbfe2bc41249e62e3ea6a85beb51947445bc253dba83d19fc58a65e04705c5c557d992a20d40682846f169537afc5e373e764c06a76afa35926e32d8fad39209a703f41c4e23d2cde399f14ca2f6355c6b044878e3f1a5781366861c0fc9aaa14f0af66d3caa77489e6bad07126c19aec32ab725826ef1c322f096c969f13c9ec550be0ce3a05fa4512758661becbbd8d2f9ad47e9c320ca84585d375863d5c12e49bd757ae7f2710d820ab53642e4f220c0aec12bc594f445658ab49e5221a96d971e2fd0ba24696a105ccef91fe08ac0c4bca214dbfc38dca7d29f32532b68737add1ad21e24cb1ea96c7cdd3380677b27e947d925e606410d928f10a5a7bc14ecc09f29370a7c8d03092db429ccaec317df91a69ce0c7af6b557fe2cd2485caf8eef58ef11d79396c055462704e3e1ce87a4be03dcc5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>openssl_ca2</title>
    <url>/2023/04/02/openssl_ca2/</url>
    <content><![CDATA[<h2 id="1-CA-简介-amp-范例"><a href="#1-CA-简介-amp-范例" class="headerlink" title="1. CA 简介 &amp; 范例"></a>1. CA 简介 &amp; 范例</h2><p><strong>CA</strong>= certificate authority签证机构<br>提供证书（服务器证书，由域名、公司信息、序列号和签名信息组成）</p>
<p><strong>SSL:</strong> Secure Sockets Layer（安全套接层协议), 与HTTPS一起诞生<br><strong>TLS:</strong> TLS，Transport Layer Security（传输层安全性协议）， 是SSL 标准化<br><mark><strong>SSL &amp; TLS： 本质是同一个东东</strong></mark></p>
<p><strong>证书包含：</strong></p>
<ol>
<li>public key、</li>
<li>名称、 </li>
<li><mark>CA的数字签名</mark></li>
<li>有效时间，</li>
<li>签证机关的名称，</li>
<li>该证书的序列号等信息</li>
</ol>
<div class="note primary">
            <p>现在该说点什么呢</p>
          </div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 2.4. View the issued CA</span></span><br><span class="line">```bash</span><br><span class="line">CIAM-ali1:~/CAcerts <span class="comment"># openssl x509 -text -noout -in server.pem</span></span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 4096 (0x1000)</span><br><span class="line">        Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        <span class="comment"># 签证机构</span></span><br><span class="line">        Issuer: C = CN, ST = Shanghai, L = Shanghai, O = Dell, OU = Dell</span><br><span class="line">        <span class="comment">#有效期</span></span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Mar 27 08:22:59 2023 GMT</span><br><span class="line">            Not After : Mar 26 08:22:59 2024 GMT</span><br><span class="line">        <span class="comment"># 名字    </span></span><br><span class="line">        Subject: C = CN, ST = Shanghai, O = Dell, OU = Dell, CN = ciam-ali1.west.isilon.com</span><br><span class="line">        <span class="comment">#public key</span></span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                RSA Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:e8:53:ef:bd:b0:e9:99:2b:af:35:da:2e:b5:81:</span><br><span class="line">                    61:18:17:7a:7b:69:a0:46:c1:c2:ee:24:d7:36:52:</span><br><span class="line">                    e9:5c:3d:49:ea:be:31:54:e0:a5:ff:a9:e1:19:b3:</span><br><span class="line">                    81:8a:38:9e:a3:fa:62:23:b0:85:07:d1:35:3e:40:</span><br><span class="line">                    7c:1a:68:1d:a8:6b:08:01:c8:95:d3:85:09:b0:7c:</span><br><span class="line">                    60:85:dc:13:dc:91:a2:73:ee:f3:7e:42:80:99:24:</span><br><span class="line">                    4f:09:13:91:9b:da:87:ee:ae:f2:ec:d9:9e:a6:75:</span><br><span class="line">                    1d:e3:c6:cf:78:58:7d:2a:7e:8e:cf:65:30:60:ab:</span><br><span class="line">                    42:6b:6d:76:f8:f2:46:de:c3:b5:4b:c9:60:39:24:</span><br><span class="line">                    a0:5e:59:0c:b3:30:9e:3b:67:ae:d4:5f:53:6e:63:</span><br><span class="line">                    47:92:dc:0c:39:9f:a6:39:b0:45:82:5b:e1:4d:a8:</span><br><span class="line">                    ed:75:96:8a:98:32:49:f6:9b:a3:6e:69:91:f0:18:</span><br><span class="line">                    2e:66:9e:ca:77:7e:b3:a6:96:d6:4a:e1:b1:51:a3:</span><br><span class="line">                    1f:7d:d2:5f:41:ce:1c:02:c2:42:aa:b5:3b:61:1c:</span><br><span class="line">                    9f:b9:45:70:fe:85:d0:d8:a3:6f:e5:e8:3d:9f:9e:</span><br><span class="line">                    6d:53:57:f9:0f:0a:56:a4:f5:77:bb:4a:ff:<span class="built_in">fc</span>:8a:</span><br><span class="line">                    4a:67:e1:82:43:f1:7b:16:5a:80:1b:8f:da:f4:c4:</span><br><span class="line">                    25:0d</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints:</span><br><span class="line">                CA:FALSE</span><br><span class="line">            X509v3 Subject Key Identifier:</span><br><span class="line">                D1:4F:3F:CD:DC:17:7E:50:38:A8:50:D6:EA:2C:BA:3D:6C:62:35:A1</span><br><span class="line">            X509v3 Extended Key Usage:</span><br><span class="line">                TLS Web Server Authentication</span><br><span class="line">            X509v3 Subject Alternative Name:</span><br><span class="line">                DNS:ciam-ali1.west.isilon.com</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         09:6b:25:4e:ca:a1:<span class="built_in">fc</span>:2c:bb:35:5f:65:c8:47:92:7a:a1:53:</span><br><span class="line">         b7:fd:6e:41:5a:39:32:35:87:b1:24:de:83:6e:23:6c:67:49:</span><br><span class="line">         47:ba:91:de:7a:b1:81:f3:0a:3a:d3:25:35:13:6d:0f:d9:77:</span><br><span class="line">         a4:6a:7e:a6:72:06:d9:b1:95:15:36:61:46:a4:b7:0f:16:c3:</span><br><span class="line">         41:55:aa:e1:5c:93:28:4b:f0:9b:74:04:a1:08:59:97:23:c9:</span><br><span class="line">         1b:17:d0:38:7d:74:e4:9a:42:e2:f7:0a:2d:01:8d:d3:7f:57:</span><br><span class="line">         eb:b8:08:2e:fe:5f:b1:86:90:d2:97:64:9e:9a:61:51:06:9e:</span><br><span class="line">         7c:25:a9:87:5c:63:e6:d5:18:9b:cb:0e:20:71:77:06:fd:2e:</span><br><span class="line">         0f:c1:b9:21:75:34:ec:5a:11:4d:48:f8:4d:de:67:7a:f4:e6:</span><br><span class="line">         3c:a1:4a:01:40:8f:ce:2c:c1:ae:5e:52:66:0d:6c:29:7b:f0:</span><br><span class="line">         b3:ce:ae:b2:cf:13:d1:0e:ed:83:e3:15:16:5a:8c:ba:15:45:</span><br><span class="line">         08:46:b6:63:92:66:ab:2c:2c:1c:f6:2c:34:d9:7d:9f:b6:d3:</span><br><span class="line">         07:34:72:bb:89:81:27:d0:88:0f:b9:3e:e8:f2:3a:3c:7f:5c:</span><br><span class="line">         88:88:1b:77:7a:41:a9:c9:99:2f:e5:76:87:8e:26:ec:85:c0:</span><br><span class="line">         12:ac:02:25</span><br><span class="line">CIAM-ali1:~/CAcerts <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="vx_images/116433111278673.png"><br><img src="/uploads/116433111278673.png"></p>
<p><strong>个人或组织提交CRS 给 CA 机构， CA签发</strong></p>
<h2 id="2-SSL-amp-TLS-安全套接协议"><a href="#2-SSL-amp-TLS-安全套接协议" class="headerlink" title="2. SSL&amp;TLS  安全套接协议"></a>2. SSL&amp;TLS  安全套接协议</h2><p><MARK>SSL: Secure Sockets Layer（安全套接层协议), 与HTTPS一起诞生<br>TLS: TLS，Transport Layer Security（传输层安全性协议）， 是SSL 标准化<br>SSL &amp; TLS： 本质是同一个东东</MARK></p>
<blockquote>
<p>SSL是 Secure Sockets Layer（安全套接层协议）的缩写。由网景公司再1994年随HTTPS一起推出。<br>后交由IETF将SSL进行标准化，并改名为 TLS，Transport Layer Security（传输层安全性协议）。<br>所以 TLS 是 SSL 改个名而已，其实是一个东西。</p>
</blockquote>
<h3 id="2-1-SSL-分两层：-record-layer记录层-和-传输层"><a href="#2-1-SSL-分两层：-record-layer记录层-和-传输层" class="headerlink" title="2.1. SSL 分两层： record layer记录层 和 传输层"></a>2.1. SSL 分两层： record layer记录层 和 传输层</h3><p>记录层： 确定传输层的封装格式<br>传输层： 使用x509认证<br>然后，用非对称加密算法来对双方进行身份认证<br>再然后，<mark>交换对称密钥，作为session key，</mark> 给通信双方的data做加密</p>
<h3 id="2-2-SSL-证书有三种：-DV-OV-EV"><a href="#2-2-SSL-证书有三种：-DV-OV-EV" class="headerlink" title="2.2. SSL 证书有三种： DV, OV, EV"></a>2.2. SSL 证书有三种： DV, OV, EV</h3><ul>
<li>DV（Domain Validation）域名验证型证书，面向个体用户，可以通过邮箱验证、DNS验证或者文件验证</li>
<li>OV（Organization Validation）企业验证型证书，面向企业用户，CA 通过拨打信息库中公司的电话来确认；</li>
<li>EV（Extended Validation）增强验证型证书，证书审核级别为所有类型最严格验证方式， 银行，金融。</li>
</ul>
<h2 id="3-openssl-安全套接字层密码库，实现自签名证书"><a href="#3-openssl-安全套接字层密码库，实现自签名证书" class="headerlink" title="3. openssl 安全套接字层密码库，实现自签名证书"></a>3. openssl 安全套接字层密码库，实现自签名证书</h2><blockquote>
<p>可参考系列文章：<br><a href="https://angellaugh.github.io/2023/04/01/openssl/">openssl</a><br><a href="https://angellaugh.github.io/2023/03/28/openssl_2_signed/">openssl2:self-signed certificate</a></p>
</blockquote>
<span id="more"></span>

<h3 id="3-1-OpenSSL-常用到的功能：密码算法，常用密钥，证书封装"><a href="#3-1-OpenSSL-常用到的功能：密码算法，常用密钥，证书封装" class="headerlink" title="3.1. OpenSSL 常用到的功能：密码算法，常用密钥，证书封装"></a>3.1. OpenSSL 常用到的功能：密码算法，常用密钥，证书封装</h3><ol>
<li>生成公钥，私钥；</li>
<li>用公钥和私钥，加密，解密，签名，验证；</li>
<li>生成x509 CA证书；</li>
<li>各种证书的格式转换；</li>
<li>对email签名和加密；</li>
<li>时间戳；</li>
</ol>
<h3 id="3-2-OpenSSL一共实现了4种非对称加密算法，证书相关"><a href="#3-2-OpenSSL一共实现了4种非对称加密算法，证书相关" class="headerlink" title="3.2. OpenSSL一共实现了4种非对称加密算法，证书相关"></a>3.2. OpenSSL一共实现了4种非对称加密算法，证书相关</h3><ol>
<li>DH算法一般用户密钥交换。</li>
<li>RSA 算法既可以用于密钥交换，也可以用于数字签名，</li>
<li>DSA算法则一般只用于数字签名</li>
<li>椭圆曲线算法（EC）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkcs#1 用于定义 RSA 公钥、私钥结构</span><br><span class="line">pkcs#7 用于定义证书链</span><br><span class="line">pkcs#8 用于定义任何算法公私钥</span><br><span class="line">pkcs#12 用于定义私钥证书</span><br><span class="line">X.509 定义公钥证书</span><br><span class="line">-keyalg RSA, DSA, EC, DES, DESede</span><br></pre></td></tr></table></figure>

<h3 id="3-3-OpenSSL一共实现了8-种对称加密算法，用于在证书互信后，给交互data加密："><a href="#3-3-OpenSSL一共实现了8-种对称加密算法，用于在证书互信后，给交互data加密：" class="headerlink" title="3.3. OpenSSL一共实现了8 种对称加密算法，用于在证书互信后，给交互data加密："></a>3.3. OpenSSL一共实现了8 种对称加密算法，用于在证书互信后，给交互data加密：</h3><blockquote>
<p>再然后，<mark>交换对称密钥，作为session key，</mark> 给通信双方的data做加密</p>
</blockquote>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
        <tag>openssl</tag>
        <tag>ca</tag>
      </tags>
  </entry>
  <entry>
    <title>SAML 2.0</title>
    <url>/2023/03/15/saml2/</url>
    <content><![CDATA[<h1 id="SAML2-0"><a href="#SAML2-0" class="headerlink" title="SAML2.0"></a>SAML2.0</h1><h3 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a>Conception</h3><blockquote>
<p> <strong>SAML</strong>, Security Assertion Markup Language</p>
</blockquote>
<blockquote>
<p> <strong>IDP identity provider</strong>， for instance, AD,  ADFS, LDAP, 身份认证authentication<br>    * Performs authentication and passes the user’s identity and authorization level to the service provider</p>
</blockquote>
<blockquote>
<p><strong>SP service provider</strong>, for instance, cluster, application,  access resources<br>    * Trusts the identity provider and authorizes the given user to access the requested resource.<br><code>credential 是啥？ idp authorization的是啥？</code></p>
</blockquote>
<ul>
<li>is the link between the authentication of a user’s identity and the authorization to use a service.</li>
<li>simplifies federated authentication and authorization processes for users, Identity providers, and service providers</li>
<li>enable sso, users can log in once, and those same credentials can be reused to log into other service providers</li>
<li>SAML authentication is the process of verifying the user’s identity and credentials (password, two-factor authentication, etc.). SAML authorization tells the service provider what access to grant the authenticated user.</li>
<li>authentication = verify identity + verify credential  验证身份和凭证， <font bgcolor=##FF7F50>不理解这个credential 是啥</font></li>
<li>SAML 做身份和凭证/资格的验证， SAML授权告诉SP 分配什么样的access 给通过验证的user</li>
<li>SAML 同时做了authentication and authorization</li>
<li>manage one login per user &gt; manage seperate logins to email, customer relationships management <strong>CRM</strong>, ADs.</li>
<li>简化了users, idp，sp之间的认证和授权流程。 authentication and authorization processes for users, Identity providers, and service providers.</li>
</ul>
<h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><ol>
<li>IDP 和 SP establish trust</li>
<li>user 在IDP 和 SP中都存在</li>
<li>user login from IDP, IDP验证通过后，生成SAML assertion，返回给user，</li>
<li>user拿着SAML assertion 到SP验证，如果通过，user就可以访问SP；<ol>
<li>SP 把SAML assertion中的user信息和 local的 user 对比验证，</li>
</ol>
</li>
<li>IDP 拿着SAML assertion 到另一个SP 去验证，也通过的话，user也可以SSO 访问 another application；</li>
</ol>
<h3 id="IDP-和-SP-的交流"><a href="#IDP-和-SP-的交流" class="headerlink" title="IDP 和 SP 的交流"></a>IDP 和 SP 的交流</h3><ol>
<li>IDP 和 SP 都config xml， contains settings and certificate of the system</li>
<li>this metadata exchange is establish the trust between IDP and SP like <code>Workflow point 1</code></li>
<li>this XML metadata file contains the form for the user identifier called <code>the name ID formats</code>, </li>
</ol>
<p><img src="/uploads/315430821585906.png"></p>
<p><img src="/uploads/149184710911054.png"></p>
<h3 id="2-ways-of-session-init"><a href="#2-ways-of-session-init" class="headerlink" title="2 ways of session init"></a>2 ways of session init</h3><p><img src="/uploads/288243668946728.png"></p>
<p><img src="/uploads/409973578816914.png"></p>
<h3 id="A-SAML-REQ-is-generated-from-SP-request-the-authentication-from-the-IDP"><a href="#A-SAML-REQ-is-generated-from-SP-request-the-authentication-from-the-IDP" class="headerlink" title="A SAML REQ, is generated from SP, request the authentication from the IDP"></a>A SAML REQ, is generated from SP, request the authentication from the IDP</h3><h3 id="A-SAML-RES-is-generated-from-the-IDP-contains-the-actual-assertion-of-authenticated-user-and-additional-user-profile"><a href="#A-SAML-RES-is-generated-from-the-IDP-contains-the-actual-assertion-of-authenticated-user-and-additional-user-profile" class="headerlink" title="A SAML RES, is generated from the IDP, contains the actual assertion of authenticated user, and additional user profile,"></a>A SAML RES, is generated from the IDP, contains the actual assertion of authenticated user, and additional user profile,</h3><p>such as group, role, depending on what the Service Provider can support.</p>
<h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><ol>
<li>SP 从不直接与IDP交流never directly interacts with IDP，browser 充当acts了执行carry out所有重定向的代理agent，acts as the agent to carry out all the redirections.</li>
<li>SP 知道要去找哪个 IDP；</li>
<li>SP在拿到 IDP返回的saml assertion之前是不知道 谁在要资源的，也就是说用户输入的用户名和密码，只传递到IDP，until the SAML assertion comes back from the Identity Provider.</li>
<li>可以直接从IDP认证，然后去访问SP，无需必须从SP发起请求；</li>
<li>SAML 身份验证流是异步的。SP不会维护生成的任何身份验证请求的任何状态。当 SP 收到来自 IDP 的响应时，响应必须包含所有必要的信息。</li>
</ol>
<h3 id="IdP-initiated-SSO-with-SAML-Authentication"><a href="#IdP-initiated-SSO-with-SAML-Authentication" class="headerlink" title="IdP-initiated SSO with SAML Authentication"></a>IdP-initiated SSO with SAML Authentication</h3><p><code>IDP 用之前和SP建立互信时产生的私钥来sign assertion， 然后通过user&#39;s browser 发给SP， 或者发送对assertion的引用。a reference to the assertion</code></p>
<p><code>SP receive the assertion, 用pub key来验证这个assertion是否真的来自它信任的IDP，以及验证这个assertion是否被修改过。 it validates the signature using the public key in order to ensure the SAML assertion really came from its trusted IDP</code></p>
<p><code>然后 SP 从 assertion中提取 extract identity和其他它需要的信息。</code></p>
<h3 id="SP-determine-which-IDP"><a href="#SP-determine-which-IDP" class="headerlink" title="SP determine which IDP"></a>SP determine which IDP</h3><ol>
<li>通过登录用户的域名， The SP may ask the user for their email address and use the domain of the email, such as  <a href="mailto:&#112;&#x72;&#105;&#116;&#104;&#118;&#105;&#x72;&#97;&#106;&#46;&#x67;&#97;&#105;&#x6b;&#x77;&#97;&#x64;&#x40;&#100;&#101;&#x6c;&#108;&#46;&#99;&#x6f;&#109;">&#112;&#x72;&#105;&#116;&#104;&#118;&#105;&#x72;&#97;&#106;&#46;&#x67;&#97;&#105;&#x6b;&#x77;&#97;&#x64;&#x40;&#100;&#101;&#x6c;&#108;&#46;&#99;&#x6f;&#109;</a></li>
<li>SP display a list of IDP,  user choose one </li>
<li>The resource URL may be specific to one IdP. </li>
<li>The SP may have placed a cookie containing IdP information in the user’s browser the first time the user successfully signed on from the IDP and will use this information on subsequent accesses.</li>
</ol>
<h3 id="The-saml-assertion’s-context"><a href="#The-saml-assertion’s-context" class="headerlink" title="The saml assertion’s context"></a>The saml assertion’s context</h3><p><img src="/uploads/589974006532594.png"></p>
<h3 id="SAML-IdP-Providers"><a href="#SAML-IdP-Providers" class="headerlink" title="SAML IdP Providers:"></a>SAML IdP Providers:</h3><ol>
<li>Active Directory Federation Services (ADFS)</li>
<li>Auth0</li>
<li>Azure AD (Microsoft Azure Active Directory)</li>
<li>Okta</li>
<li>OneLogin</li>
<li>Ping Identity</li>
<li>Salesforce</li>
</ol>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>cirrus</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse</title>
    <url>/2023/03/02/suse/</url>
    <content><![CDATA[<h1 id="suse"><a href="#suse" class="headerlink" title="suse"></a>suse</h1><blockquote>
<p>zypper patch</p>
</blockquote>
<blockquote>
<p>zypper update</p>
</blockquote>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>SUSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/28/trypassword/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b426c21b7805e83bea00bc6798cfaba0b395001d29d969f5027031cb592c5d8e">10d79030e8222445804370796b90fca1d2aa4f99e8f5171f22f450be12c8bdd5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Understandmapyieldlambda</title>
    <url>/2023/04/11/understandmapyieldlambda.py/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1> <p>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">a= []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只会这么写，或者next</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    a.append(square(x))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">map(function, *iterables)</span></span><br><span class="line"><span class="string">对指定序列做映射，返回值是个迭代器，可迭代对象： list，set， tuple</span></span><br><span class="line"><span class="string">map 取代for循环</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">square_num = <span class="built_in">map</span>(square, numbers)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(square_num))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(square_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在list的时候调用了square_num，迭代5次，并且把每次迭代的return 都append进list中。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(square_num))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>[4, 16, 36, 64, 25]
&lt;class &#39;map&#39;&gt;
&lt;map object at 0x1109a2c40&gt;
[4, 16, 36, 64, 25]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类似于</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testyield</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">yield</span> square(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># my way</span></span><br><span class="line">a = testyield(numbers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;next <span class="subst">&#123;<span class="built_in">next</span>(a)&#125;</span>&quot;</span>)  <span class="comment"># list就是对每个元素next的动作</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># list can call the generator list就是一个循环call 迭代器的动作， next       </span></span><br><span class="line">a = <span class="built_in">list</span>(testyield(numbers))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将传入list，改写成传入单个元素，去掉for循环，外面用map取代for</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testyield2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="comment">#yield square(x) 这里不行。。 貌似yield必须要和for循环在一起</span></span><br><span class="line">    <span class="keyword">return</span> square(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;testyield2 with map&quot;</span>)</span><br><span class="line">a = <span class="built_in">map</span>(testyield2, numbers)</span><br><span class="line"><span class="comment"># is a map object</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># is a generator</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(a))</span><br><span class="line"><span class="comment"># is a list gegerator</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testyield4</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;under testyield444&quot;</span>)</span><br><span class="line">    a =<span class="keyword">yield</span> square(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">g = testyield4(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;call the testyield4 <span class="subst">&#123;<span class="built_in">next</span>(g)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># for x in numbers:</span></span><br><span class="line"><span class="comment">#     g = testyield4(x)</span></span><br><span class="line"><span class="comment">#     print(next(g))</span></span><br><span class="line">    </span><br><span class="line">aa = [<span class="built_in">next</span>(testyield4(x)) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]</span><br><span class="line"><span class="built_in">print</span>(aa)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">return 和 list[map(func, parameters)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yield 和list[next(func(x)) for x in parameters]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Teckknowledge</category>
      </categories>
      <tags>
        <tag>multiprocess</tag>
        <tag>coding</tag>
      </tags>
  </entry>
</search>
